<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Standards on</title><link>/docs/standards/</link><description>Recent content in Standards on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="/docs/standards/index.xml" rel="self" type="application/rss+xml"/><item><title>Test-Driven Development Guidelines</title><link>/docs/standards/tdd/</link><pubDate>Wed, 05 Jul 2023 14:30:18 +0800</pubDate><guid>/docs/standards/tdd/</guid><description>1 Background Test-driven development (TDD) is a software development approach in which tests are written for a piece of code before the code itself is written. The idea is that by writing the tests first, you can define the desired behavior of the code and ensure that it works as expected.
2 Key Features There are several key features of test-driven development that are important for beginners to understand:
The idea that tests are written before the code itself is written.</description></item><item><title>Code Review Guidelines</title><link>/docs/standards/code-review-guidelines/</link><pubDate>Wed, 21 Jun 2023 14:30:18 +0800</pubDate><guid>/docs/standards/code-review-guidelines/</guid><description>1 Overview 1.1 Definition The code review is a software quality assurance activity where one or several people check another developer’s work by reviewing their source code. This is done after implementation but before it is merged to the main codebase.
1.2 Purpose The purpose of code reviews are to:
Improve code quality – improve internal code maintainability, readability, uniformity, understandability, etc. Find defects – find and fix performance problems, security vulnerabilities, etc.</description></item><item><title>Coding Standards</title><link>/docs/standards/coding-standards/</link><pubDate>Wed, 21 Jun 2023 14:30:18 +0800</pubDate><guid>/docs/standards/coding-standards/</guid><description>1 Background When multiple developers work together on a single repository, code consistency can often suffer. This is why it is important to define coding standards to ensure the consistency and maintainability of the codebase across different teams and developers.
1.1 Formatters Formatters make it easier to keep code consistent. They can automatically format code to follow a set of standards or settings.
1.1.1 Python Formatter For Python, we use the black formatter.</description></item><item><title>Commit Standards</title><link>/docs/standards/commit-standards/</link><pubDate>Wed, 21 Jun 2023 14:30:18 +0800</pubDate><guid>/docs/standards/commit-standards/</guid><description>1 Why It Matters Imagine checking a git repository’s log and seeing something like this:
Started working on feature X Testing stuff Fix small bug Ticket #41 Made lots of changes Confused? Now, compare that to this:
feat: Add date validation in Purchase Order test: Add unit test for Item Price validation fix: Incorrect number format fix: Item error on save feat: Add files for new Hour Multiplier DocType Which one would be easier to read?</description></item></channel></rss>