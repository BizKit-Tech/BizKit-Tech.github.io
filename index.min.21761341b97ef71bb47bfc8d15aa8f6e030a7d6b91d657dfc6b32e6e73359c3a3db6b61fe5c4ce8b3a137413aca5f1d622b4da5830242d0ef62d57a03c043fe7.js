var suggestions=document.getElementById('suggestions'),userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(a){a.keyCode===191&&(a.preventDefault(),userinput.focus()),a.keyCode===27&&(userinput.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement);let c=0;b.keyCode===38?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var b=new FlexSearch({preset:'score',cache:!0,doc:{id:'id',field:['title','description','content'],store:['href','title','description']}}),c=[{id:0,href:"/docs/start-here/introduction/",title:"Introduction",description:"This site will provide you with documentation to better understand Frappe, ERPNext, and how BizKit uses these technologies.",content:'\u003ch2 id="get-started"\u003eGet started\u003c/h2\u003e\n\u003cp\u003eNew to the team? \u003ca href="/docs/training/"\u003eTraining →\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eTrying to set up an instance? \u003ca href="/docs/setup/"\u003eSetup →\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eNeed to know more about a project? \u003ca href="/docs/projects/"\u003eProjects →\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWanna know the development standards? \u003ca href="/docs/standards/"\u003eStandards →\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eNot sure what you\u0026rsquo;re looking for? \u003ca href="/docs/others/"\u003eOthers →\u003c/a\u003e\u003c/p\u003e\n'},{id:1,href:"/docs/help/commands/",title:"Commands",description:"Doks comes with commands for common tasks.",content:'\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\r\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003e💡\u003c/div\u003e\r\n  \u003cdiv class="w-100"\u003eYou can change the commands in the scripts section of `./package.json`.\u003c/div\u003e\r\n\u003c/div\u003e\n\u003ch2 id="create"\u003ecreate\u003c/h2\u003e\n\u003cp\u003eCreate new content for your site:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run create"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run create [path] [flags]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee also the Hugo docs: \u003ca href="https://gohugo.io/commands/hugo_new/"\u003ehugo new\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="lint"\u003elint\u003c/h2\u003e\n\u003cp\u003eCheck scripts, styles, and markdown for errors:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run lint"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run lint\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="scripts"\u003escripts\u003c/h3\u003e\n\u003cp\u003eCheck scripts for errors:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run lint:scripts"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run lint:scripts [-- --fix]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="styles"\u003estyles\u003c/h3\u003e\n\u003cp\u003eCheck styles for errors:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run lint:styles"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run lint:styles [-- --fix]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="markdown"\u003emarkdown\u003c/h3\u003e\n\u003cp\u003eCheck markdown for errors:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run lint:markdown"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run lint:markdown [-- --fix]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="clean"\u003eclean\u003c/h2\u003e\n\u003cp\u003eDelete temporary directories:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run clean"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run clean\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="start"\u003estart\u003c/h2\u003e\n\u003cp\u003eStart local development server:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run start"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run start\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="build"\u003ebuild\u003c/h2\u003e\n\u003cp\u003eBuild production website:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run build"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run build\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="functions"\u003efunctions\u003c/h3\u003e\n\u003cp\u003eBuild Lambda functions:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run build:functions"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run build:functions\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="preview"\u003epreview\u003c/h3\u003e\n\u003cp\u003eBuild production website including draft and future content:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run build:preview"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run build:preview\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:2,href:"/docs/training/bench-commands/",title:"Bench Commands",description:"Commands we can use to manage an instance.",content:'\u003ch2 id="general-usage"\u003eGeneral Usage\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench --version\u003c/code\u003e - Show bench version\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench version\u003c/code\u003e - Show version of all apps\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench src\u003c/code\u003e - Show bench repo directory\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench --help\u003c/code\u003e - Show all commands and help\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench [command] --help\u003c/code\u003e - Show help for command\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench init [bench-name]\u003c/code\u003e - Create a new bench (Run from home dir)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--python TEXT\u003c/code\u003e                   Path to Python Executable.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--ignore-exist\u003c/code\u003e                  Ignore if Bench instance exists.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--apps_path TEXT\u003c/code\u003e                path to json files with apps to install after init\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--frappe-path TEXT\u003c/code\u003e              path to frappe repo\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--frappe-branch TEXT\u003c/code\u003e            Clone a particular branch of frappe\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--clone-from TEXT\u003c/code\u003e               copy repos from path\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--clone-without-update\u003c/code\u003e          copy repos from path without update\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--no-procfile\u003c/code\u003e                   Pull changes in all the apps in bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--no-backups\u003c/code\u003e                    Run migrations for all sites in the bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--no-auto-update\u003c/code\u003e                Build JS and CSS artifacts for the bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--skip-redis-config-generation\u003c/code\u003e  Skip redis config generation if already specifying the common-site-config file\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--verbose\u003c/code\u003e                       Verbose output during install\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench --site [site-name] COMMAND\u003c/code\u003e - Specify site for command\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench update\u003c/code\u003e - Pulls changes for bench-repo and all apps, applies patches, builds JS and CSS, and then migrates.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--pull\u003c/code\u003e                Pull changes in all the apps in bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--patch\u003c/code\u003e               Run migrations for all sites in the bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--build\u003c/code\u003e               Build JS and CSS artifacts for the bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--bench\u003c/code\u003e               Update bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--requirements\u003c/code\u003e        Update requirements\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--restart-supervisor\u003c/code\u003e  restart supervisor processes after update\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--no-backup\u003c/code\u003e			  Don\u0026rsquo;t take a backup before update\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--reset\u003c/code\u003e               Ignore local changes and update\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench restart\u003c/code\u003e Restart all bench services\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench backup\u003c/code\u003e Create a backup of the default site.\u003c/p\u003e\n\u003cp\u003eBackup will be saved to \u003ccode\u003e~/frappe-bench/sites/{your site}/private/backups/\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench backup-all-sites\u003c/code\u003e Backup all sites\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--with-files\u003c/code\u003e Backup site with files\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench restore\u003c/code\u003e Restore\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--with-private-files\u003c/code\u003e Restore site with private files (Path to tar file)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--with-public-files\u003c/code\u003e Restore site with public files (Path to tar file)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench migrate\u003c/code\u003e Run patches, sync schema and rebuild files/translations\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--rebuild-website TEXT\u003c/code\u003e Rebuild webpages after migration\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench migrate-env [python-version]\u003c/code\u003e Will migrate the virtual environment to the desired python version\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench --site [sitename] set-admin-password [password]\u003c/code\u003e Will reset the administrator password\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench destroy-all-sessions\u003c/code\u003e Destroys all sessions\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="config"\u003eConfig\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebench config\u003c/code\u003e - Change bench configuration\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eauto_update [on/off]\u003c/code\u003e          Enable/Disable auto update for bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edns_multitenant [on/off]\u003c/code\u003e      Enable/Disable DNS Multitenancy\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehttp_timeout\u003c/code\u003e                  Set http timeout\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erestart_supervisor_on_update\u003c/code\u003e  Enable/Disable auto restart of supervisor\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserve_default_site\u003c/code\u003e            Configure nginx to serve the default site on\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eupdate_bench_on_update\u003c/code\u003e        Enable/Disable bench updates on running bench\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench setup\u003c/code\u003e - Setup components\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eauto-update\u003c/code\u003e  Add cronjob for bench auto update\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebackups    \u003c/code\u003e  Add cronjob for bench backups\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003econfig     \u003c/code\u003e  overwrite or make config.json\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eenv        \u003c/code\u003e  Setup virtualenv for bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enginx      \u003c/code\u003e  generate config for nginx\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprocfile   \u003c/code\u003e  Setup Procfile for bench start\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eproduction \u003c/code\u003e  setup bench for production\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eredis      \u003c/code\u003e  generate config for redis cache\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esocketio   \u003c/code\u003e  Setup node deps for socketio server\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esudoers    \u003c/code\u003e  Add commands to sudoers list for execution\u0026hellip;\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esupervisor \u003c/code\u003e  generate config for supervisor\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eadd-domain \u003c/code\u003e  add custom domain for site\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efirewall \u003c/code\u003e    setup firewall and block all ports except 22, 80 and 443\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003essh-port \u003c/code\u003e    change the default ssh connection port\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erequirements \u003c/code\u003eUpdate Python and Node packages\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--node \u003c/code\u003e Update only Node packages\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--python \u003c/code\u003e Update only Python packages\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench set-nginx-port [sitename] [port]\u003c/code\u003e - Set site\u0026rsquo;s port in Production\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="development"\u003eDevelopment\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebench new-app [app-name]\u003c/code\u003e Creates a new app\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench get-app [repo-link]\u003c/code\u003e - Downloads an app from a git repository and installs it\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--branch [branch-name]\u003c/code\u003e    Fetches specific branch of app\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench install-app [app-name]\u003c/code\u003e Installs existing app\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench remove-from-installed-apps [app-name]\u003c/code\u003e Remove app from the list of apps\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench uninstall-app [app-name]\u003c/code\u003e Delete app and everything linked to the app (Bench needs to be running)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench remove-app [app-name]\u003c/code\u003e Remove app from the bench entirely\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench --site [sitename] --force reinstall \u003c/code\u003e Reinstall with fresh database (Caution: Will wipe out old database)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench new-site [sitename]\u003c/code\u003e - Creates a new site\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--db-name\u003c/code\u003e                Database name\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--db-host\u003c/code\u003e                Custom database host URL for remote connection\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--db-port\u003c/code\u003e                Custom database listening port (eg. port other than the default 3306)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--mariadb-root-username\u003c/code\u003e  Root username for MariaDB\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--mariadb-root-password\u003c/code\u003e  Root password for MariaDB\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--admin-password\u003c/code\u003e         Administrator password for new site\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--verbose\u003c/code\u003e                     Verbose\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--force\u003c/code\u003e                       Force restore if site/database already exists\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--source_sql\u003c/code\u003e             Initiate database with a SQL file\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--install-app\u003c/code\u003e            Install app after installation`\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench use [site]\u003c/code\u003e Sets a default site\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench drop-site\u003c/code\u003e Removes site from disk and database completely\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--root-login\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--root-password\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench set-config [key] [value]\u003c/code\u003e   Adds a key-value pair to site\u0026rsquo;s config file\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench console\u003c/code\u003e   Opens a IPython console in the bench venv\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench execute\u003c/code\u003e   Execute a method inside any app.\n\u003cul\u003e\n\u003cli\u003eEg : \u003ccode\u003ebench execute frappe.utils.scheduler.enqueue_scheduler_events\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench --site [sitename] mariadb\u003c/code\u003e  Opens SQL Console\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench --site [sitename] export-fixtures\u003c/code\u003e  Exports fixtures\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench run-tests\u003c/code\u003e  Run tests\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--app\u003c/code\u003e App Name\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--doctype\u003c/code\u003e DocType to run tests for\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--test\u003c/code\u003e Specific Test\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--module\u003c/code\u003e Run a particular module that has tests\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--profile\u003c/code\u003e Runs a Python profiler on the test\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench disable-production\u003c/code\u003e  Disables production environment\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="scheduler"\u003eScheduler\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebench enable-scheduler\u003c/code\u003e - Enables Scheduler that will run scheduled tasks\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench doctor\u003c/code\u003e - Get diagnostic info about background workers\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench show-pending-jobs\u003c/code\u003e- Get pending jobs\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench purge-jobs\u003c/code\u003e - Destroy all pending jobs\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:3,href:"/docs/setup/set-up-instance/",title:"Set Up an Instance",description:"Instructions on how to set up an instance.",content:'\u003ch2 id="prerequisites"\u003ePrerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA server running on Ubuntu 20.04.\u003c/li\u003e\n\u003cli\u003eSSH access to the server.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="instructions"\u003eInstructions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eSet locale.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo update-locale LC_ALL=\u0026quot;C.UTF-8\u0026quot;\nsudo update-locale LANG=\u0026quot;C.UTF-8\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You might have to restart the server for the changes to take effect.\u003c/p\u003e\n\u003col start="2"\u003e\n\u003cli\u003eAllocate swap memory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo fallocate -l 4G /swapfile\nsudo chmod 600 /swapfile\nsudo mkswap /swapfile\nsudo swapon /swapfile\necho \u0026quot;/swapfile none swap sw 0 0\u0026quot; | sudo tee -a /etc/fstab\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003eAdd additional system configurations.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003eecho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf\necho vm.overcommit_memory=1 | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="4"\u003e\n\u003cli\u003eInstall dependencies.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get update\nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev \\\n    libbz2-dev libreadline-dev libjpeg-dev zlib1g-dev libpq-dev \\\n    wget curl llvm libncurses5-dev libncursesw5-dev \\\n    xz-utils tk-dev libffi-dev liblzma-dev python-openssl git\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="5"\u003e\n\u003cli\u003eInstall pyenv.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003egit clone https://github.com/pyenv/pyenv.git ~/.pyenv\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="6"\u003e\n\u003cli\u003eInstall python.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003eexport PYENV_ROOT=\u0026quot;$HOME/.pyenv\u0026quot;\nexport PATH=\u0026quot;$PYENV_ROOT/bin:$PATH\u0026quot;\npyenv install 3.6.10\npyenv global 3.6.10\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="7"\u003e\n\u003cli\u003eAdd pyenv to path.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003eecho \'export PYENV_ROOT=\u0026quot;$HOME/.pyenv\u0026quot;\' \u0026gt;\u0026gt; ~/.bashrc\necho \'export PATH=\u0026quot;$PYENV_ROOT/bin:$PATH\u0026quot;\' \u0026gt;\u0026gt; ~/.bashrc\necho -e \'if command -v pyenv 1\u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then\\n  eval \u0026quot;$(pyenv init -)\u0026quot;\\nfi\' \u0026gt;\u0026gt; ~/.bashrc\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You may need to logout then SSH in again for changes to take effect.\u003c/p\u003e\n\u003col start="8"\u003e\n\u003cli\u003eInstall additional prerequisites.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get install -y screen\nsudo apt-get install -y libffi-dev software-properties-common nginx\nsudo apt-get install -y xfonts-75dpi fontconfig libxrender1 xfonts-base libxext6\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="9"\u003e\n\u003cli\u003e\n\u003cp\u003eInstall MariaDB.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIf the MariaDB server is hosted in the same instance as the application server:\u003c/strong\u003e\n\u003col\u003e\n\u003cli\u003eInstall MariaDB server.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get install -y mariadb-server-10.3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you were not asked to set the password, run the following to set it: \u003ccode\u003emysql_secure_installation\u003c/code\u003e.\n2. Edit MariaDB config.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo nano /etc/mysql/my.cnf\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003eAdd the following to the file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003e[mysqld]\ncharacter-set-client-handshake = FALSE\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_unicode_ci\n\n[mysql]\ndefault-character-set = utf8mb4\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="4"\u003e\n\u003cli\u003eRestart the server.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo service mysql restart\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIf the MariaDB server is hosted in a separate instance:\u003c/strong\u003e\n\u003col\u003e\n\u003cli\u003eInstall MariaDB client.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get install -y mariadb-server-10.3\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eInstall Redis.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get install -y redis-server\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="11"\u003e\n\u003cli\u003eInstall Node, npm, and yarn.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003ecurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\nnvm install 12\nnpm install -g yarn\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="12"\u003e\n\u003cli\u003eInstall wkhtmltopdf.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get -y install xvfb libfontconfig wkhtmltopdf\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="13"\u003e\n\u003cli\u003eClean up installation files.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get clean\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="14"\u003e\n\u003cli\u003eSet git config perfmissions.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo chown -R ubuntu .config\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="15"\u003e\n\u003cli\u003eInstall Bench.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003egit clone https://github.com/BizKit-Tech/bench.git ~/.bench\npip install -e ~/.bench\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="16"\u003e\n\u003cli\u003eInstall Frappe.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003ebench init frappe-bench --frappe-path https://github.com/BizKit-Tech/frappe.git\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="17"\u003e\n\u003cli\u003eInstall ERPNext.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003e(cd ~/frappe-bench \u0026amp;\u0026amp; bench get-app https://github.com/BizKit-Tech/erpnext.git)\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="18"\u003e\n\u003cli\u003eInstall BizKit Core.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003e(cd ~/frappe-bench \u0026amp;\u0026amp; bench get-app https://github.com/BizKit-Tech/bizkit_core.git)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="converting-to-production"\u003eConverting to Production\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eInstall Python 3 and pip for sudo user.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get install -y python3-pip\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="2"\u003e\n\u003cli\u003eInstall Bench for sudo user.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo pip3 install -e ~/.bench\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003eSetup production.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo bench setup production ubuntu\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="4"\u003e\n\u003cli\u003eDisable fail2ban.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo /etc/init.d/fail2ban stop\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:4,href:"/docs/standards/code-review-guidelines/",title:"Code Review Guidelines",description:"Know more about our code review guidelines when reviewing pull requests.",content:'\u003ch1 id="1-overview"\u003e1 Overview\u003c/h1\u003e\n\u003ch2 id="11-definition"\u003e1.1 Definition\u003c/h2\u003e\n\u003cp\u003eThe \u003cstrong\u003ecode review\u003c/strong\u003e is a software quality assurance activity where one or several people check another developer’s work by reviewing their source code. This is done after implementation but before it is merged to the main codebase.\u003c/p\u003e\n\u003ch2 id="12-purpose"\u003e1.2 Purpose\u003c/h2\u003e\n\u003cp\u003eThe purpose of code reviews are to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eImprove code quality\u003c/em\u003e – improve internal code maintainability, readability, uniformity, understandability, etc.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eFind defects\u003c/em\u003e – find and fix performance problems, security vulnerabilities, etc.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eFacilitate learning and knowledge transfer\u003c/em\u003e – transfer knowledge and expectations about the codebase, approaches, quality, etc.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eShare mutual responsibility\u003c/em\u003e – foster a sense of collective code ownership\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eFind better solutions\u003c/em\u003e – generate ideas for new and better solutions that can improve the codebase\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="13-process-overview"\u003e1.3 Process Overview\u003c/h2\u003e\n\u003cp\u003eThere are two (2) participants in a code review: (1) the \u003cstrong\u003eauthor\u003c/strong\u003e, who writes the code and sends it for review, and (2) the \u003cstrong\u003ereviewer\u003c/strong\u003e, who checks the code and decides whether it should be merged to the codebase.\u003c/p\u003e\n\u003cp\u003eTo start a code review, the author creates a \u003cstrong\u003epull request\u003c/strong\u003e from their branch into the repository’s main branch. The pull request’s description must contain a \u003cstrong\u003echangelist\u003c/strong\u003e which contains the set of changes made and why they were made.\u003c/p\u003e\n\u003cp\u003eCode reviews happen in \u003cstrong\u003erounds\u003c/strong\u003e. Each round is one complete round-trip between the author and reviewer: the author sends changes, and the reviewer responds with written feedback on those changes. Every code review has one or more rounds.\u003c/p\u003e\n\u003cp\u003eThe review ends when the reviewer \u003cstrong\u003eapproves\u003c/strong\u003e the changes and merges it to the main branch.\u003c/p\u003e\n\u003cp\u003e(The above process description was adapted from \u003ca href="https://mtlynch.io/human-code-reviews-1/"\u003eHow to Do Code Reviews Like a Human (Part One)\u003c/a\u003e.)\u003c/p\u003e\n\u003ch2 id="14-git-strategy"\u003e1.4 Git Strategy\u003c/h2\u003e\n\u003cp\u003eWe have developed a \u003ca href="https://docs.google.com/presentation/d/1Y74gyc_yYdNnXHGdDB3Z87t6m2nYaV2FPzA8b_DH0CE/"\u003eGit branching strategy\u003c/a\u003e at BizKit to standardize how we work together. Please review it if you haven\u0026rsquo;t yet before starting development.\u003c/p\u003e\n\u003ch2 id="15-detailed-steps"\u003e1.5 Detailed Steps\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eThe author writes the code.\u003c/li\u003e\n\u003cli\u003eThe author creates a pull request from their branch to the repository’s develop branch.\u003c/li\u003e\n\u003cli\u003eThe author assigns two (2) reviewers to check their code.\u003c/li\u003e\n\u003cli\u003eThe author notifies the reviewers by creating a thread in the \u003ccode\u003e#pull-requests\u003c/code\u003e channel of our Discord server. Follow the following format:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003e[open] [your-name] repo-name pull-request-number\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003e[open] [kevin] erpnext 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMake sure to tag your reviewers and provide a link to your pull requests in the thread message.\u003c/p\u003e\n\u003col start="5"\u003e\n\u003cli\u003eThe reviewers review the code and provide feedback or comments using the repository host’s (as of the time of writing we’re using GitHub) built-in commenting tool.\u003c/li\u003e\n\u003cli\u003eOnce the reviewers are done, they notify the author to check the feedback or comments they made through the PR thread on Discord.\u003c/li\u003e\n\u003cli\u003eThe author implements fixes or requests or provides explanations on questions.\u003c/li\u003e\n\u003cli\u003eOnce issues have been resolved, requests have been implemented, or pending questions have been answered, the author notifies the reviewer to recheck their code.\u003c/li\u003e\n\u003cli\u003eRepeat steps 5 - 8 until the reviewers are satisfied with the changes.\u003c/li\u003e\n\u003cli\u003eThe reviewers approve the pull request, squash merge the pull request, and then delete the feature branch.\u003c/li\u003e\n\u003cli\u003eThere are two (2) ways to close the Discord PR thread: (1) manually renaming the thread \u003ccode\u003eopen\u003c/code\u003e \u0026mdash;\u0026gt; \u003ccode\u003eclosed\u003c/code\u003e, and (2) using the Thread ID as an argument to our \u003ccode\u003e/close\u003c/code\u003e slash command on Discord (Note: You have to be in Discord\u0026rsquo;s Developer Mode to be able to copy the Thread ID).\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id="16-affected-projects-and-repositories"\u003e1.6 Affected Projects and Repositories\u003c/h2\u003e\n\u003cp\u003eCode reviews are to be done for the following BizKit repositories when creating pull requests to the main branch:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFrappe\u003c/li\u003e\n\u003cli\u003eERPNext\u003c/li\u003e\n\u003cli\u003eBench\u003c/li\u003e\n\u003cli\u003eBizKit Core\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id="2-author-guidelines"\u003e2 Author Guidelines\u003c/h1\u003e\n\u003ch2 id="21-role"\u003e2.1 Role\u003c/h2\u003e\n\u003cp\u003eThe role of the author is to write the code, test it to the best of their ability, and ensure that it follows best practices and coding standards. Note that even though reviewers are expected to test the author’s code, the author should still test their code prior to submitting a pull request.\u003c/p\u003e\n\u003cp\u003eAuthors initiate the code review process by creating a pull request from their branch to the repository’s main branch. Once the pull request is made, they assign two (2) reviewers to check their code.\u003c/p\u003e\n\u003cp\u003eIt is also their responsibility to implement any changes or improvements requested by their reviewers. But it is also possible that the reviewers are wrong—just as one can accidentally write buggy code, the reviewer may also misunderstand correct code. As such, authors are free to push back on any change requests if they feel that it is incorrect.\u003c/p\u003e\n\u003cp\u003eBut even when the reviewer is wrong, the author must still exercise a level of caution. If they misread it, will others make the same mistake? This could possibly mean that the code is hard to understand or may require some changes to make it clearer. The author may look for ways to refactor the code or add comments that make the code more obviously correct.\u003c/p\u003e\n\u003ch2 id="22-important-reminders"\u003e2.2 Important Reminders\u003c/h2\u003e\n\u003ch3 id="221-value-the-reviewers-time"\u003e2.2.1 Value the Reviewer’s Time\u003c/h3\u003e\n\u003cp\u003eRemember that reviewers have their own tasks as well and are taking time off of them to help out and improve the code. They have a limited amount of focus and energy and so it would be in everyone’s best interests to make things as easy and as smooth as possible.\u003c/p\u003e\n\u003ch3 id="222-be-the-first-to-review"\u003e2.2.2 Be the First to Review\u003c/h3\u003e\n\u003cp\u003eReviewers are not personal quality assurance analysts nor testers. Before submitting our code for review, we must ensure that we’ve checked and tested it to the best of our abilities. It is a waste of everyone’s time to submit faulty or untested code for review.\u003c/p\u003e\n\u003cp\u003eIt is a good practice to read our code first before submitting it. More than just checking for mistakes, we should imagine if it wasn’t us that wrote it and we’re reading it for the first time. What might confuse us?\u003c/p\u003e\n\u003cp\u003eIt can also be helpful to take a break between writing code and reviewing it. We’re often tired by the end of a long coding session and that makes it easier for us to miss glaring issues. We can wait for a bit and look at our code with fresh eyes before submitting it for review.\u003c/p\u003e\n\u003ch3 id="223-write-a-clear-changelist-description"\u003e2.2.3 Write a Clear Changelist Description\u003c/h3\u003e\n\u003cp\u003eThe changelist description should summarize any information that the reviewer needs. We have to remember that the person looking at the code might not have the same context that we have. Think of having future readers look at the description. Will they be able to understand it without having to talk to us?\u003c/p\u003e\n\u003cp\u003eA good changelist description explains \u003cstrong\u003ewhat\u003c/strong\u003e changes were made at a high level and \u003cstrong\u003ewhy\u003c/strong\u003e they were made.\u003c/p\u003e\n\u003ch3 id="224-commit-clearly-and-commit-often"\u003e2.2.4 Commit Clearly and Commit Often\u003c/h3\u003e\n\u003cp\u003eThe same rules for changelists apply to commit messages. One should be able to easily understand the changes made in a single commit even when they have no background knowledge.\u003c/p\u003e\n\u003cp\u003eCommitting often and in smaller chunks highlights the changes made and also makes it easier to review code. At the same time, this makes it easier to revert changes if needed.\u003c/p\u003e\n\u003ch3 id="225-break-up-large-changes"\u003e2.2.5 Break up Large Changes\u003c/h3\u003e\n\u003cp\u003eFor our, and our reviewers’, benefit, it would be best to break up large changes into smaller, multiple changes and pull requests. Sending in too many changes at once can make it harder to review code and easier to let issues pass. This can also be a sign of poorly separated tasks or features.\u003c/p\u003e\n\u003cp\u003eAs much as possible, a single pull request or change should aim to add or change just one thing.\u003c/p\u003e\n\u003ch3 id="226-learn-from-mistakes"\u003e2.2.6 Learn From Mistakes\u003c/h3\u003e\n\u003cp\u003eRemember that more than catching errors, the goal of code reviews is to improve the overall code quality and capacity of developers. If we make mistakes or the reviewers provide us feedback for improvement, it’d be in our best interest to learn from them and apply them to make our next code review smoother and make ourselves better.\u003c/p\u003e\n\u003ch1 id="3-reviewer-guidelines"\u003e3 Reviewer Guidelines\u003c/h1\u003e\n\u003ch2 id="31-role"\u003e3.1 Role\u003c/h2\u003e\n\u003cp\u003eThe role of the reviewer is to check the author’s submitted code, test it to the best of their ability, and ensure that it follows best practices and coding standards. Reviewers have a right to request changes or improvements to the author’s code provided that it contributes to the overall quality of the code.\u003c/p\u003e\n\u003cp\u003eOnce the reviewer is satisfied with the author’s work, they approve the pull request and merge it to the main codebase.\u003c/p\u003e\n\u003ch2 id="32-things-to-check"\u003e3.2 Things to Check\u003c/h2\u003e\n\u003cp\u003eBelow is a checklist of the things that reviewers should check for and ask themselves during code reviews:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAm I able to \u003cstrong\u003eunderstand\u003c/strong\u003e the code easily?\u003c/li\u003e\n\u003cli\u003eIs the code written following the \u003cstrong\u003ecoding standards/guidelines\u003c/strong\u003e?\u003c/li\u003e\n\u003cli\u003eIs the same code \u003cstrong\u003eduplicated\u003c/strong\u003e more than twice?\u003c/li\u003e\n\u003cli\u003eWill I be able to \u003cstrong\u003etest/debug\u003c/strong\u003e the code easily to find the root cause?\u003c/li\u003e\n\u003cli\u003eAre functions or classes \u003cstrong\u003etoo big\u003c/strong\u003e? Do they have \u003cstrong\u003etoo many responsibilities\u003c/strong\u003e?\u003c/li\u003e\n\u003cli\u003eWill the \u003cstrong\u003eperformance\u003c/strong\u003e be acceptable with huge data?\u003c/li\u003e\n\u003cli\u003eHas \u003cstrong\u003esecurity\u003c/strong\u003e been taken care of?\u003c/li\u003e\n\u003cli\u003eHow \u003cstrong\u003emaintainable\u003c/strong\u003e is the code? Will it require minimal effort to support/update in the future?\u003c/li\u003e\n\u003cli\u003eHow \u003cstrong\u003eextensible\u003c/strong\u003e is the code? Will it be easy to add enhancements in the future?\u003c/li\u003e\n\u003cli\u003eWhat did the author \u003cstrong\u003eget right\u003c/strong\u003e? Give the author some wins!\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="33-important-reminders"\u003e3.3 Important Reminders\u003c/h2\u003e\n\u003ch3 id="331-a-human-is-on-the-other-side"\u003e3.3.1 A Human Is on the Other Side\u003c/h3\u003e\n\u003cp\u003eIt can be easy to forget that the author is another human when we’re communicating through comments or only looking at their code. But we must remember that there is still a human on the other side with their own goals, issues, and feelings.\u003c/p\u003e\n\u003cp\u003eAs a reviewer, we are an \u003cstrong\u003eally\u003c/strong\u003e, not a gatekeeper. While the goal of code reviews is to improve the quality of the code, it is not worth sacrificing a relationship with a teammate just to push for better variable naming.\u003c/p\u003e\n\u003cp\u003eEspecially when we’re working through the medium of chat, it’s easier to be misunderstood or sound harsh. And so we must walk a fine line between pushing for improvements and taking care of our relationships.\u003c/p\u003e\n\u003cp\u003eRemember to be sensitive to what the author might feel when making comments and providing feedback. If we can do that then the succeeding reminders will be easy to follow.\u003c/p\u003e\n\u003ch3 id="332-frame-feedback-as-requests-not-commands"\u003e3.3.2 Frame Feedback as Requests, Not Commands\u003c/h3\u003e\n\u003cp\u003eCompare the following feedback:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eFeedback Framed as Command\u003c/th\u003e\n\u003cth\u003eFeedback Framed as Request\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eMove this function to \u003cem\u003etransaction.js\u003c/em\u003e.\u003c/td\u003e\n\u003ctd\u003eCan we move this function to \u003cem\u003etransaction.js\u003c/em\u003e?\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eWhich one sounds more helpful or collaborative?\u003c/p\u003e\n\u003cp\u003eJust like how reviewers are not the authors’ personal testers, authors are not personal code writers. Though we are reviewing their code, it is still their work. Framing feedback as requests instead of commands has the author feel a sense of autonomy and control over their own work.\u003c/p\u003e\n\u003cp\u003eFraming feedback as requests also allows the authors to push back in case we are wrong. Maybe the authors have a good reason for writing their code as such or making that choice. If the feedback is framed as a command, any response from the author sounds like they’re disobeying. On the other hand, if it’s a request or a question, the author is simply answering.\u003c/p\u003e\n\u003ch3 id="333-provide-examples-if-possible"\u003e3.3.3 Provide Examples if Possible\u003c/h3\u003e\n\u003cp\u003eWe all have other tasks. It is highly possible that the code we’re reviewing isn’t the only thing that the author is working on. So if we have the time to spare, it would be helpful to provide them examples of the change we’re requesting.\u003c/p\u003e\n\u003cp\u003eOf course, this has its limits. This is better for smaller, more trivial segments of code. But if we suddenly provide a complete, overhauled solution of the author’s code then it signals that we think they’re incompetent or can’t do their job well.\u003c/p\u003e\n\u003ch3 id="334-avoid-using-you"\u003e3.3.4 Avoid Using “You”\u003c/h3\u003e\n\u003cp\u003eIt’s easy to get attached to our work. The same goes for code. The author put a significant amount of effort into their code and is likely to be proud of it. It is only natural that they’d be attached to it and would react defensively against any feedback they receive.\u003c/p\u003e\n\u003cp\u003eAnd so we must provide feedback in a way that lowers those defenses. Remember that we’re reviewing the code and not the author. The presence of bugs in code does not and should not indicate the lack of skill or intelligence of a developer.\u003c/p\u003e\n\u003cp\u003eHaving “you” in comments tends to bring the focus away from the code and brings it to the coder, thereby increasing the chances of them being antagonistic about it.\u003c/p\u003e\n\u003cp\u003eInstead, we can resort to using \u003cstrong\u003e“we”\u003c/strong\u003e. For example, instead of saying, “Can you move this function to \u003cem\u003etransaction.js\u003c/em\u003e?” we can say, “Can we move this function to \u003cem\u003etransaction.js\u003c/em\u003e?” Doing so reinforces the team’s collective responsibility for the code.\u003c/p\u003e\n\u003cp\u003eGoing back to \u003ca href="/docs/standards/code-review-guidelines/#332-frame-feedback-as-requests-not-commands"\u003e3.3.2 Frame Feedback as Requests, Not Commands\u003c/a\u003e, it is also a good idea to use questions.\u003c/p\u003e\n\u003cp\u003eAnother option is to write in a \u003cstrong\u003epassive voice\u003c/strong\u003e. While this means death for almost any kind of writing, we aren’t writing for journals or blogs here. “This function can be moved to \u003cem\u003etransaction.js\u003c/em\u003e.” sounds less antagonistic than, “You should move this function to \u003cem\u003etransaction.js\u003c/em\u003e.”\u003c/p\u003e\n\u003ch3 id="335-learn-from-the-author"\u003e3.3.5 Learn From the Author\u003c/h3\u003e\n\u003cp\u003eWhile the role of the reviewer is to check the author’s code and provide feedback for improvement, that doesn’t mean that the reviewer can’t learn from the author as well. Take note of the things that the author did well, praise them for it, and also learn from it.\u003c/p\u003e\n\u003cp\u003eAgain, code reviews are meant to facilitate learning and knowledge transfer and so they are also opportunities for the reviewers to learn.\u003c/p\u003e\n\u003ch1 id="4-final-reminders"\u003e4 Final Reminders\u003c/h1\u003e\n\u003cp\u003ePlease note that this process is still open to improvements. Just this because it’s on a document doesn’t mean it’s perfect. So if you, the reader, have any feedback or comments that you think will improve the overall process or requirements, please don’t hesitate to let us know.\u003c/p\u003e\n'},{id:5,href:"/docs/standards/coding-standards/",title:"Coding Standards",description:"Know more about our coding standards at BizKit.",content:'\u003ch1 id="1-background"\u003e1 Background\u003c/h1\u003e\n\u003cp\u003eWhen multiple developers work together on a single repository, code consistency can often suffer. This is why it is important to define coding standards to ensure the consistency and maintainability of the codebase across different teams and developers.\u003c/p\u003e\n\u003ch2 id="11-formatters"\u003e1.1 Formatters\u003c/h2\u003e\n\u003cp\u003eFormatters make it easier to keep code consistent. They can automatically format code to follow a set of standards or settings.\u003c/p\u003e\n\u003ch3 id="111-python-formatter"\u003e1.1.1 Python Formatter\u003c/h3\u003e\n\u003cp\u003eFor Python, we use the \u003ca href="https://pypi.org/project/black/"\u003eblack\u003c/a\u003e formatter. The reason for this is that \u003ccode\u003eblack\u003c/code\u003e is uncompromising and will keep everything consistent without need for any other config or settings files.\u003c/p\u003e\n\u003cp\u003eTo install \u003ccode\u003eblack\u003c/code\u003e, run:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003epip install black\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce done, you can call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eblack \u0026lt;source_file_or_directory\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand \u003ccode\u003eblack\u003c/code\u003e will take care of everything.\u003c/p\u003e\n\u003cp\u003eYou may also configure \u003ccode\u003eblack\u003c/code\u003e to automatically run after every save in the Visual Studio Code editor. To do so, make sure you have the \u003ca href="https://marketplace.visualstudio.com/items?itemName=ms-python.python"\u003ePython extension\u003c/a\u003e installed and then enable \u003cstrong\u003eEditor: Format on Save\u003c/strong\u003e and set the \u003cstrong\u003ePython \u0026gt; Formatting: Provider\u003c/strong\u003e to \u003ccode\u003eblack\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id="112-javascript-formatter"\u003e1.1.2 JavaScript Formatter\u003c/h3\u003e\n\u003cp\u003eFor JavaScript, we use the \u003ca href="https://prettier.io/"\u003eprettier\u003c/a\u003e formatter with the following configurations:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e{\n  \u0026quot;arrowParens\u0026quot;: \u0026quot;always\u0026quot;,\n  \u0026quot;bracketSpacing\u0026quot;: true,\n  \u0026quot;trailingComma\u0026quot;: \u0026quot;es5\u0026quot;,\n  \u0026quot;tabWidth\u0026quot;: 4,\n  \u0026quot;semi\u0026quot;: true,\n  \u0026quot;singleQuote\u0026quot;: false\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you are using the Visual Studio Code editor, then the easiest way to configure and use \u003ccode\u003eprettier\u003c/code\u003e is to install \u003ca href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"\u003ethis extension\u003c/a\u003e and set the above configurations from the editor’s settings page.\u003c/p\u003e\n\u003cp\u003eYou may also copy and paste this code into your Visual Studio Code settings file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e\u0026quot;prettier.arrowParens\u0026quot;: \u0026quot;always\u0026quot;,\n\u0026quot;prettier.bracketSpacing\u0026quot;: true,\n\u0026quot;prettier.trailingComma\u0026quot;: \u0026quot;es5\u0026quot;,\n\u0026quot;prettier.tabWidth\u0026quot;: 4,\n\u0026quot;prettier.semi\u0026quot;:true,\n\u0026quot;prettier.singleQuote\u0026quot;: false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOtherwise, you may install \u003ccode\u003eprettier\u003c/code\u003e on a per project basis using the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm install --save-dev --save-exact prettier\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen create a \u003ccode\u003e.prettierrc.json\u003c/code\u003e config file with the above configurations.\u003c/p\u003e\n\u003cp\u003eWith that done, you can format a file by running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpx prettier --write \u0026lt;source_file_or_directory\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="12-linters"\u003e1.2 Linters\u003c/h2\u003e\n\u003cp\u003eWhile a linter is no longer absolutely necessary once formatters are used, they can still catch some possible styling improvements that aren’t always caught by formatters.\u003c/p\u003e\n\u003ch3 id="121-python-linter"\u003e1.2.1 Python Linter\u003c/h3\u003e\n\u003cp\u003eFor Python, we use a combination of the \u003ca href="https://flake8.pycqa.org/en/latest/"\u003eflake8\u003c/a\u003e and \u003ca href="http://mypy-lang.org/"\u003emypy\u003c/a\u003e linters.\u003c/p\u003e\n\u003cp\u003eTo install them, run:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003epip install flake8 mypy flake8-mypy\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLinters are best used in conjunction with a code editor so to enable them on the Visual Studio Code editor, make sure you have the \u003ca href="https://marketplace.visualstudio.com/items?itemName=ms-python.python"\u003ePython extension\u003c/a\u003e installed and then have the following settings enabled:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePython \u0026gt; Linting: Enabled\u003c/li\u003e\n\u003cli\u003ePython \u0026gt; Linting: Flake8 Enabled\u003c/li\u003e\n\u003cli\u003ePython \u0026gt; Linting: Mypy Enabled\u003c/li\u003e\n\u003cli\u003ePython \u0026gt; Linting: Lint On Save\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id="2-python-language-rules"\u003e2 Python Language Rules\u003c/h1\u003e\n\u003ch2 id="21-imports"\u003e2.1 Imports\u003c/h2\u003e\n\u003cp\u003ePrefer importing packages and modules over individual classes and functions. This makes it easier to compartmentalize external classes and functions into their respective packages.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eimport package.module\nfrom package import module\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003efrom package.module import (\n    classA, classB, functionC, constantD, functionE\n)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNEVER use \u003ccode\u003e*\u003c/code\u003e (wildcard) imports.\u003c/p\u003e\n\u003cp\u003eAlso avoid function-level imports.\u003c/p\u003e\n\u003cp\u003eFor modules or packages with long names, use the as statement to shorten it and make the code more readable. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eimport longername as ln\nimport module.with.a.really.long.name as mwarln\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="22-exceptions"\u003e2.2 Exceptions\u003c/h2\u003e\n\u003cp\u003eNever use catch-all \u003ccode\u003eexcept:\u003c/code\u003e statements, or catch \u003ccode\u003eException\u003c/code\u003e or \u003ccode\u003eStandardError\u003c/code\u003e. Python is very tolerant when using this and we may end up missing certain scenarios that we don’t want to be caught like incorrect variable names or \u003ccode\u003eCtrl+C\u003c/code\u003e interrupts.\u003c/p\u003e\n\u003cp\u003eMinimize the amount of code in a \u003ccode\u003etry\u003c/code\u003e/\u003ccode\u003eexcept\u003c/code\u003e block. The larger the body of the \u003ccode\u003etry\u003c/code\u003e, the more likely that an exception will be raised by a line of code that you didn’t expect to raise an exception. In those cases, the \u003ccode\u003etry\u003c/code\u003e/\u003ccode\u003eexcept\u003c/code\u003e block hides a real error.\u003c/p\u003e\n\u003cp\u003eUse the \u003ccode\u003efinally\u003c/code\u003e clause to execute code whether or not an exception is raised in the \u003ccode\u003etry\u003c/code\u003e block. This is often useful for cleanup, i.e., closing a file.\u003c/p\u003e\n\u003ch2 id="23-truefalse-evaluations"\u003e2.3 True/False Evaluations\u003c/h2\u003e\n\u003cp\u003eUse the “implicit” false if at all possible (e.g., \u003ccode\u003eif foo:\u003c/code\u003e rather than \u003ccode\u003eif len(foo):\u003c/code\u003e). They’re easier to read and less error-prone.\u003c/p\u003e\n\u003cp\u003eAlways use \u003ccode\u003eif foo is None:\u003c/code\u003e (or \u003ccode\u003eis not None\u003c/code\u003e) to check for a \u003ccode\u003eNone\u003c/code\u003e value. This is especially important, when testing whether a variable or argument that defaults to \u003ccode\u003eNone\u003c/code\u003e was set to some other value. The other value might be a value that’s false in a boolean context.\u003c/p\u003e\n\u003cp\u003eNever compare a boolean variable to \u003ccode\u003eFalse\u003c/code\u003e using \u003ccode\u003e==\u003c/code\u003e. Use \u003ccode\u003eif not x:\u003c/code\u003e instead. If you need to distinguish \u003ccode\u003eFalse\u003c/code\u003e from \u003ccode\u003eNone\u003c/code\u003e then chain the expressions, such as \u003ccode\u003eif not x and x is not None:\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFor sequences (strings, lists, tuples), use the fact that empty sequences are false, so \u003ccode\u003eif seq:\u003c/code\u003e and \u003ccode\u003eif not seq:\u003c/code\u003e are preferable to \u003ccode\u003eif len(seq):\u003c/code\u003e and \u003ccode\u003eif not len(seq):\u003c/code\u003e respectively.\u003c/p\u003e\n\u003cp\u003eNote that when handling integers, implicit false may involve more risk than benefit (i.e., accidentally handling \u003ccode\u003eNone\u003c/code\u003e as 0). In these cases, it is okay to compare a value which is known to be an integer (and is not the result of \u003ccode\u003elen()\u003c/code\u003e) against the integer 0. Also note that \u003ccode\u003e\u0026quot;0\u0026quot;\u003c/code\u003e (i.e., \u003ccode\u003e0\u003c/code\u003e as string) evaluates to true.\u003c/p\u003e\n\u003ch1 id="3-python-style-rules"\u003e3 Python Style Rules\u003c/h1\u003e\n\u003ch2 id="31-semicolons"\u003e3.1 Semicolons\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eNEVER.\u003c/strong\u003e Don’t even think about it.\u003c/p\u003e\n\u003ch2 id="32-line-length"\u003e3.2 Line Length\u003c/h2\u003e\n\u003cp\u003eMaximum line length is \u003cem\u003e80 characters\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eExplicit exceptions to the 80 character limit:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLong import statements.\u003c/li\u003e\n\u003cli\u003eURLs, pathnames, or long flags in comments.\u003c/li\u003e\n\u003cli\u003eLong string module level constants not containing whitespace that would be inconvenient to split across lines such as URLs or pathnames.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAvoid using backslash line continuation.\u003c/p\u003e\n\u003ch2 id="33-parentheses"\u003e3.3 Parentheses\u003c/h2\u003e\n\u003cp\u003eUse parentheses sparingly.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eif foo:\n    bar()\n\nif not foo:\n    bar()\n\nwhile foo:\n    bar()\n\nif x and y:\n    bar()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eif (foo):\n    bar()\n\nif not(foo):\n    bar()\n\nwhile (foo):\n    bar()\n\nif (x and y):\n    bar()\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="34-indentation"\u003e3.4 Indentation\u003c/h2\u003e\n\u003cp\u003eIndent your code blocks with \u003cem\u003e4 spaces\u003c/em\u003e. Never use tabs or mix tabs and spaces.\u003c/p\u003e\n\u003ch2 id="35-imports-formatting"\u003e3.5 Imports Formatting\u003c/h2\u003e\n\u003cp\u003eImports should be on separate lines. As much as possible, put them at the top of the file, just after any module comments and docstrings and before module globals and constants. Imports should be grouped from most generic to least generic or in the following order:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eStandard library imports\u003c/li\u003e\n\u003cli\u003eRelated third party imports\u003c/li\u003e\n\u003cli\u003eLocal application/library specific imports\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAlways put a blank line between each group of imports.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eimport collections\nimport queue\nimport sys\n\nfrom absl import app\nfrom absl import flags\nimport bs4\nimport cryptography\nimport tensorflow as tf\n\nfrom book.genres import scifi\nfrom myproject.backend import huxley\nfrom myproject.backend.hgwells import time_machine\nfrom myproject.backend.state_machine import main_loop\nfrom otherproject.ai import body\nfrom otherproject.ai import mind\nfrom otherproject.ai import soul\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="36-naming-conventions"\u003e3.6 Naming Conventions\u003c/h2\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003ePublic\u003c/th\u003e\n\u003cth\u003eInternal*\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ePackages\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eModules\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003ctd\u003e_lower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eClasses\u003c/td\u003e\n\u003ctd\u003ePascalCase\u003c/td\u003e\n\u003ctd\u003e_PascalCase\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExceptions\u003c/td\u003e\n\u003ctd\u003ePascalCase\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFunctions\u003c/td\u003e\n\u003ctd\u003elower_with_under()\u003c/td\u003e\n\u003ctd\u003e_lower_with_under()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eGlobal/Class Constants\u003c/td\u003e\n\u003ctd\u003eCAPS_WITH_UNDER\u003c/td\u003e\n\u003ctd\u003e_CAPS_WITH_UNDER\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eGlobal/Class Variables\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003ctd\u003e_lower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInstance Variables\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003ctd\u003e_lower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMethod Names\u003c/td\u003e\n\u003ctd\u003elower_with_under()\u003c/td\u003e\n\u003ctd\u003e_lower_with_under()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFunction/Method Parameters\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLocal Variables\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cem\u003e*Note: Internal means internal to a module, or protected or private within a class and should not be accessible outside of it.\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id="37-strings"\u003e3.7 Strings\u003c/h2\u003e\n\u003cp\u003eUse double quotes \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e for strings.\u003c/p\u003e\n\u003cp\u003eWhen a literal string won’t fit on a single line, use parentheses for implicit line joining.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003ex = (\n    \u0026quot;This will build a very long long \u0026quot;\n    \u0026quot;long long long long long long string.\u0026quot;\n)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003ex = \u0026quot;This will build a very long long \\\n    long long long long long long string.\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="38-whitespace"\u003e3.8 Whitespace\u003c/h2\u003e\n\u003cp\u003eFollow standard typographic rules for the use of spaces around punctuation.\u003c/p\u003e\n\u003cp\u003eNo whitespace inside parentheses, brackets or braces.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003espam(ham[1], {eggs: 2}, [])\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003espam( ham[ 1 ], { eggs: 2 }, [ ] )\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNo whitespace before a comma, semicolon, or colon. Do use whitespace after a comma, semicolon, or colon, except at the end of the line.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eif x == 4:\n    print(x, y)\n    x, y = y, x\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eif x == 4 :\n    print(x , y)\n    x , y = y , x\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNo whitespace before the open paren/bracket that starts an argument list, indexing or slicing.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003espam(1)\ndict[\'key\'] = list[index]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003espam (1)\ndict [\'key\'] = list [index]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSurround binary operators with a single space on either side for assignment (\u003ccode\u003e=\u003c/code\u003e), comparisons (\u003ccode\u003e==\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e!=\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;=\u003c/code\u003e, \u003ccode\u003e\u0026gt;=\u003c/code\u003e, \u003ccode\u003ein\u003c/code\u003e, \u003ccode\u003enot in\u003c/code\u003e, \u003ccode\u003eis\u003c/code\u003e, \u003ccode\u003eis not\u003c/code\u003e), and booleans (\u003ccode\u003eand\u003c/code\u003e, \u003ccode\u003eor\u003c/code\u003e, \u003ccode\u003enot\u003c/code\u003e). Use your better judgment for the insertion of spaces around arithmetic operators (\u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e-\u003c/code\u003e, \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e/\u003c/code\u003e, \u003ccode\u003e//\u003c/code\u003e, \u003ccode\u003e%\u003c/code\u003e, \u003ccode\u003e**\u003c/code\u003e, \u003ccode\u003e@\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003ex == 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003ex\u0026lt;1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNever use spaces around \u003ccode\u003e=\u003c/code\u003e when passing keyword arguments or defining a default parameter value.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003edef chewie(han, leia=True):\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003edef chewie(han, leia = True):\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="39-comments-and-docstrings"\u003e3.9 Comments and Docstrings\u003c/h2\u003e\n\u003ch3 id="391-docstrings"\u003e3.9.1 Docstrings\u003c/h3\u003e\n\u003cp\u003ePython uses docstrings to document code. A docstring is a string that is the first statement in a package, module, class or function. Always use the three double-quote \u003ccode\u003e\u0026quot;\u0026quot;\u0026quot;\u003c/code\u003e format for docstrings. The base format for a docstring includes a summary line (one physical line not exceeding 80 characters) terminated by a period, question mark, or exclamation point. When writing more (encouraged), this must be followed by a blank line, followed by the rest of the docstring starting at the same cursor position as the first quote of the first line.\u003c/p\u003e\n\u003ch3 id="392-modules"\u003e3.9.2 Modules\u003c/h3\u003e\n\u003cp\u003eEvery file should contain license boilerplate and should start with a docstring describing the contents and usage of the module.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003e\u0026quot;\u0026quot;\u0026quot;A one line summary of the module or program, terminated by a period.\n\nLeave one blank line.  The rest of this docstring should contain an\noverall description of the module or program.  Optionally, it may also\ncontain a brief description of exported classes and functions and/or usage\nexamples.\n\n    Typical usage example:\n\n        foo = ClassFoo()\n        bar = foo.FunctionBar()\n\u0026quot;\u0026quot;\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="393-functions-and-methods"\u003e3.9.3 Functions and Methods\u003c/h3\u003e\n\u003cp\u003eIn this section, “function” means a method, function, or generator.\u003c/p\u003e\n\u003cp\u003eA function must have a docstring, unless it meets all of the following criteria:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003enot externally visible\u003c/li\u003e\n\u003cli\u003every short\u003c/li\u003e\n\u003cli\u003eObvious\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA docstring should give enough information to write a call to the function without reading the function’s code. The docstring should be descriptive-style (\u003ccode\u003e\u0026quot;\u0026quot;\u0026quot;Fetches rows from a Bigtable.\u0026quot;\u0026quot;\u0026quot;\u003c/code\u003e) rather than imperative-style (\u003ccode\u003e\u0026quot;\u0026quot;\u0026quot;Fetch rows from a Bigtable.\u0026quot;\u0026quot;\u0026quot;\u003c/code\u003e). A docstring should describe the function’s calling syntax and its semantics, not its implementation. For tricky code, comments alongside the code are more appropriate than using docstrings.\u003c/p\u003e\n\u003cp\u003eA method that overrides a method from a base class may have a simple docstring sending the reader to its overridden method’s docstring, such as \u003ccode\u003e\u0026quot;\u0026quot;\u0026quot;See base class.\u0026quot;\u0026quot;\u0026quot;\u003c/code\u003e. The rationale is that there is no need to repeat in many places documentation that is already present in the base method’s docstring. However, if the overriding method’s behavior is substantially different from the overridden method, or details need to be provided (e.g., documenting additional side effects), a docstring with at least those differences is required on the overriding method.\u003c/p\u003e\n\u003cp\u003eCertain aspects of a function should be documented in special sections, listed below. Each section begins with a heading line, which ends with a colon. All sections other than the heading should maintain a hanging indent of two or four spaces (be consistent within a file). These sections can be omitted in cases where the function’s name and signature are informative enough that it can be aptly described using a one-line docstring.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eArgs:\u003c/strong\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eList each parameter by name. A description should follow the name, and be separated by a colon followed by either a space or newline. If the description is too long to fit on a single 80-character line, use a hanging indent of 2 or 4 spaces more than the parameter name (be consistent with the rest of the docstrings in the file). The description should include required type(s) if the code does not contain a corresponding type annotation. If a function accepts \u003ccode\u003e*foo\u003c/code\u003e (variable length argument lists) and/or \u003ccode\u003e**bar\u003c/code\u003e (arbitrary keyword arguments), they should be listed as \u003ccode\u003e*foo\u003c/code\u003e and \u003ccode\u003e**bar\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eReturns: (or Yields: for generators)\u003c/strong\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDescribe the type and semantics of the return value. If the function only returns \u003ccode\u003eNone\u003c/code\u003e, this section is not required. It may also be omitted if the docstring starts with Returns or Yields (e.g. \u003ccode\u003e\u0026quot;\u0026quot;\u0026quot;Returns row from Bigtable as a tuple of strings.\u0026quot;\u0026quot;\u0026quot;\u003c/code\u003e) and the opening sentence is sufficient to describe return value.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eRaises:\u003c/strong\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eList all exceptions that are relevant to the interface followed by a description. Use a similar exception name + colon + space or newline and hanging indent style as described in \u003cem\u003eArgs:\u003c/em\u003e. You should not document exceptions that get raised if the API specified in the docstring is violated (because this would paradoxically make behavior under violation of the API part of the API).\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003edef foo(a, b, c=True):\n    \u0026quot;\u0026quot;\u0026quot;Gives a sample docstring for a sample function.\n\n    This is where I provide a more concise description of the\n    function if necessary.\n\n    Args:\n        a: A list of strings.\n        b: The second parameter.\n        require_all_keys: Optional; If this is True, it\'ll do\n            something weird.\n\n    Returns:\n        A dict mapping keys to the corresponding stuff that was\n        fetched. Each row is represented as a tuple of strings. For\n        example:\n\n        {b\'Serak\': (\'Rigel VII\', \'Preparer\'),\n         b\'Zim\': (\'Irk\', \'Invader\'),\n         b\'Lrrr\': (\'Omicron Persei 8\', \'Emperor\')}\n\n        Returned keys are always bytes.  If a key from the keys\n        argument is missing from the dictionary, then that row was\n        not found in the table (and c must have been False).\n\n    Raises:\n        IOError: An error occurred accessing the data.\n    \u0026quot;\u0026quot;\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="394-classes"\u003e3.9.4 Classes\u003c/h3\u003e\n\u003cp\u003eClasses should have a docstring below the class definition describing the class. If your class has public attributes, they should be documented here in an Attributes section and follow the same formatting as a \u003ca href="/docs/standards/coding-standards/#393-functions-and-methods"\u003efunction’s Args\u003c/a\u003e section.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eclass SampleClass:\n    \u0026quot;\u0026quot;\u0026quot;Summary of class here.\n\n    Longer class information....\n    Longer class information....\n\n    Attributes:\n        likes_spam: A boolean indicating if we like SPAM or not.\n        eggs: An integer count of the eggs we have laid.\n    \u0026quot;\u0026quot;\u0026quot;\n\n    def __init__(self, likes_spam=False):\n        \u0026quot;\u0026quot;\u0026quot;Inits SampleClass with blah.\u0026quot;\u0026quot;\u0026quot;\n        self.likes_spam = likes_spam\n        self.eggs = 0\n\n    def public_method(self):\n        \u0026quot;\u0026quot;\u0026quot;Performs operation blah.\u0026quot;\u0026quot;\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="395-block-and-inline-comments"\u003e3.9.5 Block and Inline Comments\u003c/h3\u003e\n\u003cp\u003eThe final place to have comments is in tricky parts of the code. If you’re going to have to explain it at the next \u003ca href="/docs/standards/code-review-guidelines/"\u003ecode review\u003c/a\u003e, you should comment it now. But never describe the code. Assume the person reading the code knows Python (though not what you’re trying to do) better than you do.\u003c/p\u003e\n\u003cp\u003eFor complicated operations, add a few lines of comments before the operations commence.\u003c/p\u003e\n\u003cp\u003eUse inline comments sparingly for non-obvious operations. Inline comments should start at least 2 spaces away from the code with the comment character \u003ccode\u003e#\u003c/code\u003e, followed by at least one space before the text of the comment itself.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003e# We use a weighted dictionary search to find out where i is in\n# the array.  We extrapolate position based on the largest num\n# in the array and the array size and then do binary search to\n# get the exact number.\n\nif i \u0026amp; (i-1) == 0:  # True if i is 0 or a power of 2.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch1 id="4-javascript-language-rules"\u003e4 JavaScript Language Rules\u003c/h1\u003e\n\u003ch2 id="41-equality-checks"\u003e4.1 Equality Checks\u003c/h2\u003e\n\u003cp\u003eWhen comparing, use \u003ccode\u003e===\u003c/code\u003e and \u003ccode\u003e!==\u003c/code\u003e over =\u003ccode\u003e=\u003c/code\u003e and \u003ccode\u003e!=\u003c/code\u003e. JavaScript is a dynamic language so using \u003ccode\u003e==\u003c/code\u003e might give unexpected results due to it allowing the type to be different.\u003c/p\u003e\n\u003ch2 id="42-truefalse-evaluations"\u003e4.2 True/False Evaluations\u003c/h2\u003e\n\u003cp\u003eUse shortcuts for booleans, but explicit comparisons for strings and numbers.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003eif (isValid) {\n  bar();\n}\n\nif (name !== \u0026quot;\u0026quot;) {\n  bar();\n}\n\nif (myArray.length \u0026gt; 0) {\n  bar();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003eif (isValid === true) {\n  bar();\n}\n\nif (name) {\n  bar();\n}\n\nif (myArray) {\n  bar();\n}\n\nif (myArray.length) {\n  bar();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="43-functions"\u003e4.3 Functions\u003c/h2\u003e\n\u003cp\u003eUse default parameter syntax over mutating function arguments.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efunction foo(opts = {}) {\n  bar();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efunction foo(opts) {\n  if (opts === undefined) {\n    opts = {};\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlways put default parameters last.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efunction foo(name, opts = {}) {\n  bar();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efunction foo(opts = {}, name) {\n  bar();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNever reassign parameters. If you need a default value, then use default parameters instead.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efunction foo(a) {\n  const b = a || 1;\n}\n\nfunction foo(a = 1) {\n  bar();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efunction foo(a) {\n  a = 1;\n}\n\nfunction foo(a) {\n  if (a === undefined) {\n    a = 1;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="44-arrow-functions"\u003e4.4 Arrow Functions\u003c/h2\u003e\n\u003cp\u003eUse arrow functions whenever possible. They are more concise, anonymous, and change the way \u003ccode\u003ethis\u003c/code\u003e binds in functions and removes the need for those ugly \u003ccode\u003econst me = this;\u003c/code\u003e assignments.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003esetInterval(() =\u0026gt; {\n  this.foo();\n}, 5000);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst me = this;\nsetInterval(function () {\n  me.foo();\n}, 5000);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch1 id="5-javascript-style-rules"\u003e5 JavaScript Style Rules\u003c/h1\u003e\n\u003ch2 id="51-semicolons"\u003e5.1 Semicolons\u003c/h2\u003e\n\u003cp\u003eUse semicolons. While JavaScript has this thing called Automatic Semicolon Insertion (ASI), it can sometimes lead to unexpected results.\u003c/p\u003e\n\u003ch2 id="52-references"\u003e5.2 References\u003c/h2\u003e\n\u003cp\u003eAvoid using \u003ccode\u003evar\u003c/code\u003e like the plague. Use \u003ccode\u003econst\u003c/code\u003e as much as possible because it ensures that we can’t reassign references so it’s easier to track errors. If we need to reassign or update values, then use \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe reason why we want to use \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e as much as possible over \u003ccode\u003evar\u003c/code\u003e is because they are block-scoped. They will only exist in the blocks they are defined in and won’t lead to those hard-to-figure-out scoping issues.\u003c/p\u003e\n\u003ch2 id="53-objects"\u003e5.3 Objects\u003c/h2\u003e\n\u003cp\u003eUse the literal syntax for object creation.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst item = {};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst item = new Object();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUse object method shorthand.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efrappe.ui.form.on(\u0026quot;Item\u0026quot;, {\n  item_code(frm) {},\n});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efrappe.ui.form.on(\u0026quot;Item\u0026quot;, {\n  item_code: function (frm) {},\n});\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="54-arrays"\u003e5.4 Arrays\u003c/h2\u003e\n\u003cp\u003eUse the literal syntax for array creation.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst items = [];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst items = new Array();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUse array spreads \u003ccode\u003e...\u003c/code\u003e to copy arrays.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst itemsCopy = [...items];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst itemsCopy = [];\n\nfor (let i = 0; i \u0026lt; items.length; i += 1) {\n  itemsCopy[i] = items[i];\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="55-destructuring"\u003e5.5 Destructuring\u003c/h2\u003e\n\u003cp\u003eUse array/object destructuring assignments.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst arr = [1, 2, 3, 4];\nconst [first, second] = arr;\n\nconst obj = { a: 1, b: 2, c: 3 };\nconst { a, b } = obj;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst arr = [1, 2, 3, 4];\nconst first = arr[0];\nconst second = arr[1];\n\nconst obj = { a: 1, b: 2, c: 3 };\nconst a = obj[\u0026quot;a\u0026quot;];\nconst b = obj[\u0026quot;b\u0026quot;];\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="56-strings"\u003e5.6 Strings\u003c/h2\u003e\n\u003cp\u003eUse double quotes \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e for strings.\u003c/p\u003e\n\u003cp\u003eWhen programmatically building up strings, consider using template strings instead of concatenation.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst greeting = `How are you, ${name}?`;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst greeting = \u0026quot;How are you, \u0026quot; + name + \u0026quot;?\u0026quot;;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="57-naming-conventions"\u003e5.7 Naming Conventions\u003c/h2\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eCase\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eClasses\u003c/td\u003e\n\u003ctd\u003ePascalCase\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExceptions\u003c/td\u003e\n\u003ctd\u003ePascalCase\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFunctions\u003c/td\u003e\n\u003ctd\u003elower_with_under()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eGlobal/Class Constants\u003c/td\u003e\n\u003ctd\u003eCAPS_WITH_UNDER\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eGlobal/Class Variables\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInstance Variables\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMethod Names\u003c/td\u003e\n\u003ctd\u003elower_with_under()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFunction/Method Parameters\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLocal Variables\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id="58-jquery"\u003e5.8 jQuery\u003c/h2\u003e\n\u003cp\u003ePrefix jQuery object variables with a \u003ccode\u003e$\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst $sidebar = $(\u0026quot;.sidebar\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst sidebar = $(\u0026quot;.sidebar\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="59-indentation"\u003e5.9 Indentation\u003c/h2\u003e\n\u003cp\u003eIndent your code blocks with \u003cem\u003e4 spaces\u003c/em\u003e. Never use tabs or mix tabs and spaces.\u003c/p\u003e\n\u003ch2 id="510-blocks"\u003e5.10 Blocks\u003c/h2\u003e\n\u003cp\u003eUse braces with all multi-line blocks. The opening brace should always be on the same line as the condition, loop, or function declaration. The closing brace should be on a separate line.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif (test) return false;\n\nif (test) {\n    return false;\n}\n\nfunction bar() {\n    return false;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif (test)\n    return false;\n\nfunction foo() { return false; }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you’re using multi-line blocks with \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e, put \u003ccode\u003eelse\u003c/code\u003e on the same line as your \u003ccode\u003eif\u003c/code\u003e block’s closing brace.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif (test) {\n    thing1();\n    thing2();\n} else {\n    thing3();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif (test) {\n    thing1();\n    thing2();\n}\nelse {\n    thing3();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf an if block always executes a return statement, the subsequent else block is unnecessary. A return in an else if block following an if block that contains a return can be separated into multiple if blocks.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction foo() {\n    if (x) {\n        return x;\n    }\n\n    return y;\n}\n\nfunction cats() {\n    if (x) {\n        return x;\n    }\n\n    if (y) {\n        return y;\n    }\n}\n\nfunction dogs(x) {\n    if (x) {\n        if (z) {\n            return y;\n        }\n    } else {\n        return z;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction foo() {\n    if (x) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\nfunction cats() {\n    if (x) {\n        return x;\n    } else if (y) {\n        return y;\n    }\n}\n\nfunction dogs(x) {\n    if (x) {\n        return x;\n    } else {\n        if (y) {\n            return y;\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch1 id="6-sql-style-rules"\u003e6 SQL Style Rules\u003c/h1\u003e\n\u003ch2 id="61-keyword-formatting"\u003e6.1 Keyword Formatting\u003c/h2\u003e\n\u003cp\u003eUse lowercase letters for ALL keywords. Place keywords and arguments in separate lines.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-sql"\u003eselect\n    item_code,\n    item_group\nfrom\n    `tabItem`\nwhere\n    disabled = 0;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-sql"\u003eSELECT item_code, item_group\nFROM `tabItem`\nWHERE disabled = 0;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="62-condition-formatting"\u003e6.2 Condition Formatting\u003c/h2\u003e\n\u003cp\u003eSeparate each and/ or condition into their own line and place the keyword before the condition.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-sql"\u003eselect\n    item_code,\n    item_group\nfrom\n    `tabItem`\nwhere\n    disabled = 0\n    and is_stock_item = 1\n    or is_fixed_asset = 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-sql"\u003eSELECT item_code, item_group\nFROM `tabItem`\nWHERE disabled = 0 AND is_stock_item = 1 OR\n    is_fixed_asset = 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="63-alias-naming-conventions"\u003e6.3 Alias Naming Conventions\u003c/h2\u003e\n\u003cp\u003eFormat aliases as \u003ccode\u003et_\u0026lt;DocType abbreviation\u0026gt;\u003c/code\u003e. For example:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eDocType Name\u003c/th\u003e\n\u003cth\u003eTable Name\u003c/th\u003e\n\u003cth\u003eAlias Name\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eItem\u003c/td\u003e\n\u003ctd\u003etabItem\u003c/td\u003e\n\u003ctd\u003et_i\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eItem Price\u003c/td\u003e\n\u003ctd\u003etabItem Price\u003c/td\u003e\n\u003ctd\u003et_ip\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePurchase Order\u003c/td\u003e\n\u003ctd\u003etabPurchase Order\u003c/td\u003e\n\u003ctd\u003et_po\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePurchase Order Item\u003c/td\u003e\n\u003ctd\u003etabPurchase Order Item\u003c/td\u003e\n\u003ctd\u003et_poi\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id="7-final-reminders"\u003e7 Final Reminders\u003c/h1\u003e\n\u003cp\u003ePlease note that these standards are still open to improvements. Just because it’s on a document doesn’t mean it’s perfect. So if you, the reader, have any feedback or comments that you think will improve the overall standards, please don’t hesitate to let us know.\u003c/p\u003e\n'},{id:6,href:"/docs/standards/commit-standards/",title:"Commit Standards",description:"Know more about our commit standards at BizKit.",content:'\u003ch1 id="1-why-it-matters"\u003e1 Why It Matters\u003c/h1\u003e\n\u003cp\u003eImagine checking a git repository’s log and seeing something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003eStarted working on feature X\nTesting stuff\nFix small bug\nTicket #41\nMade lots of changes\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eConfused? Now, compare that to this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003efeat: Add date validation in Purchase Order\ntest: Add unit test for Item Price validation\nfix: Incorrect number format\nfix: Item error on save\nfeat: Add files for new Hour Multiplier DocType\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich one would be easier to read? Or better yet, which one would be easier to \u003cem\u003eunderstand\u003c/em\u003e? The former is inconsistent, messy, and all over the place. The latter is clean, informative, and precise.\u003c/p\u003e\n\u003cp\u003eWhen writing code, good commit messages are usually the last thing we want to think of or worry about. It’s not like we’re going to read them, right? But all we have to do is review someone’s code and suddenly we realize the importance of having good commit messages. Just try to find a bug introduced after deploying a new feature and figure out which change did that. Diving deep into code without understanding the context of why the developer made that change isn’t as fun as one thinks—nor is it a good use of time.\u003c/p\u003e\n\u003cp\u003eGood commit messages tell a \u003cem\u003estory\u003c/em\u003e. They give viewers the necessary background of what was changed and why that change was made.They let people who read them understand what’s going on without having to go into the nitty-gritty of the code or worse, contact the developer who’s supposedly hard at work doing something else.\u003c/p\u003e\n\u003cp\u003eAnd that is the main reason why good commits are necessary: they make it easier for everyone else—and most especially us.\u003c/p\u003e\n\u003ch1 id="2-how-to-write-good-commits"\u003e2 How To Write Good Commits\u003c/h1\u003e\n\u003ch1 id="21-the-basic-structure"\u003e2.1 The Basic Structure\u003c/h1\u003e\n\u003cp\u003eFortunately, it isn’t that hard to write good commits. And neither does it take a long time. But at the same time, one shouldn’t hurry when writing commits—doing so is the reason why so many developers put out nonsensical commit messages like \u003ca href="https://twitter.com/gitlost"\u003ethese\u003c/a\u003e. As mentioned before, good commit messages are supposed to tell a story and there aren’t any good stories written by someone in a hurry.\u003c/p\u003e\n\u003cp\u003eWe should pause for a moment and think about what we did. Good commit messages address the following questions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhat was changed or added?\u003c/li\u003e\n\u003cli\u003eWhy was it necessary?\u003c/li\u003e\n\u003cli\u003eWhat effects does it have?\u003c/li\u003e\n\u003cli\u003eHow did it work before and how does it work now?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAt the same time, we should remember to keep commits small. A good rule of thumb is to only commit \u003cstrong\u003eone\u003c/strong\u003e change at a time. Commits don’t cost anything so these are one of the cases where it’s better to have more.\u003c/p\u003e\n\u003cp\u003eWith that out of the way, here’s the basic structure for writing commit messages:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003e\u0026lt;type\u0026gt;: \u0026lt;description\u0026gt;\n\n[optional body]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, here’s an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003efeat: Add option to hide values in trees\n\nThis commit adds functionality that allows users to enable/disable showing the account balance and warehouse stock value in the Chart of Accounts and Warehouse trees respectively. The following fields were added in the following DocTypes to allow this:\n\n- show_balance_in_coa_tree in Accounts Settings\n- show_stock_value_in_warehouse_tree in Stock Settings\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimple enough, right? Let’s get down into the rules.\u003c/p\u003e\n\u003ch2 id="22-rules-for-writing-good-commits"\u003e2.2 Rules for Writing Good Commits\u003c/h2\u003e\n\u003ch3 id="221-limit-the-subject-line-to-50-characters"\u003e2.2.1 Limit the Subject Line to 50 Characters\u003c/h3\u003e\n\u003cp\u003eThe subject line is the first line of the git commit and is usually the only thing most developers that don’t care about doing good commits fill out. Whilesome commits don’t require adding a body, the subject line is necessary. It is a short summary of the change and is used as the title for the commit in most repository hosting sites.\u003c/p\u003e\n\u003cp\u003eWhile 50 characters is not a hard limit and the world won’t end if we go over it, using it as a rule of thumb ensures that they are readable. If we’re having trouble summarizing what we did in 50 characters then we might be committing too much. If that’s the case, then we need to split up our change into smaller chunks.\u003c/p\u003e\n\u003ch3 id="222-add-a-type"\u003e2.2.2 Add a Type\u003c/h3\u003e\n\u003cp\u003eAdding a type to the subject line makes it easier for viewers to categorize and figure out what’s going on. Common types and when to use them are the following:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003ePurpose\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003efeat\u003c/td\u003e\n\u003ctd\u003eNew feature or functionality\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003efix\u003c/td\u003e\n\u003ctd\u003eBug fixes\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erefactor\u003c/td\u003e\n\u003ctd\u003eRefactoring or optimizing production code\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003estyle\u003c/td\u003e\n\u003ctd\u003eImproving the formatting (i.e. removing unnecessary parentheses, etc.)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003edocs\u003c/td\u003e\n\u003ctd\u003eChanges to the documentation\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etest\u003c/td\u003e\n\u003ctd\u003eAdding or refactoring tests\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003echore\u003c/td\u003e\n\u003ctd\u003eCleaning up files or other changes that don’t affect the code\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="223-capitalize-the-description"\u003e2.2.3 Capitalize the Description\u003c/h3\u003e\n\u003cp\u003eNothing special here, just capitalize the description. It looks cleaner. Here’s an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003efeat: Add date validation in Purchase Order\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="224-do-not-end-the-subject-line-with-a-period"\u003e2.2.4 Do Not End the Subject Line With a Period\u003c/h3\u003e\n\u003cp\u003eTrailing punctuation is unnecessary in subject lines. And also, we want to keep it at 50 characters or less so space is precious.\u003c/p\u003e\n\u003ch3 id="225-use-the-imperative-mood-in-the-description"\u003e2.2.5 Use the Imperative Mood in the Description\u003c/h3\u003e\n\u003cp\u003eWriting in the imperative is like speaking or writing as if giving a command or an instruction. Here are some examples:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdd validation\u003c/li\u003e\n\u003cli\u003eFix typo in error message\u003c/li\u003e\n\u003cli\u003eDelete unnecessary code\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe imperative can sound a bit bossy or rude and may take a bit of getting used to, but git uses the imperative as well when creating commits on our behalf.\u003c/p\u003e\n\u003cp\u003eTo help, remember that a properly formed git commit description should complete the following sentence:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf applied, this commit will \u003cem\u003eyour description here\u003c/em\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf applied, this commit will \u003cu\u003eadd validation in Purchase Order\u003c/u\u003e.\u003c/li\u003e\n\u003cli\u003eIf applied, this commit will \u003cu\u003efix typo in error message\u003c/u\u003e.\u003c/li\u003e\n\u003cli\u003eIf applied, this commit will \u003cu\u003edelete unnecessary code\u003c/u\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTake note that this is only necessary for the description and not for the body.\u003c/p\u003e\n\u003ch3 id="226-separate-subject-from-body-with-a-blank-line"\u003e2.2.6 Separate Subject From Body With a Blank Line\u003c/h3\u003e\n\u003cp\u003eAgain, not all commits require a body. But in case it does, we should remember that the subject line is like the title. Adding a blank line in between the subject and the body makes it easier to read and differentiate the title from the body. Here’s an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003efix: Asset status not updating\n\nThis commit fixes a bug in the Asset DocType where the status does not go back to what it was previously after an Asset Maintenance or Asset Repair.\n\nThis was happening because the function to set the status did not default to the original status if it didn’t find any existing Asset Maintenance or Asset Repair. Adding this at the end of the condition fixes the bug.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="227-wrap-the-body-at-72-characters"\u003e2.2.7 Wrap the Body at 72 Characters\u003c/h3\u003e\n\u003cp\u003eGit never wraps text automatically and so it can be hard to view git logs when we have to scroll horizontally. When we write the body of a commit message, we have to think about its right margin and wrap text manually.\u003c/p\u003e\n\u003cp\u003eThe recommendation is to do this at 72 characters, so that git has plenty of room to indent text while still keeping everything under 80 characters overall.\u003c/p\u003e\n\u003ch3 id="228-use-the-body-to-explain-_what_-and-_why_-instead-of-_how_"\u003e2.2.8 Use the Body to Explain \u003cem\u003eWhat\u003c/em\u003e and \u003cem\u003eWhy\u003c/em\u003e Instead of \u003cem\u003eHow\u003c/em\u003e\u003c/h3\u003e\n\u003cp\u003eWe have to remember that the purpose of the commit is to give the reader context of what was changed and why. There is no need to write a novel explaining the excruciating details of how we managed to solve that bug that no one else could solve. If the viewer were interested, they could simply check the git diff for that. Keep things short—focus on the what and why.\u003c/p\u003e\n\u003ch1 id="pro-tips"\u003ePro Tips\u003c/h1\u003e\n\u003ch2 id="31-git-commit-template"\u003e3.1 Git Commit Template\u003c/h2\u003e\n\u003cp\u003eWe can actually set our own git commit templates so we don’t forget to write the important stuff and ensure that we’re following commit standards.\u003c/p\u003e\n\u003cp\u003e\u003ca href="https://gist.github.com/kevingdc/00bc3f90d2531c604df3d9e516c71998"\u003eThis is a link\u003c/a\u003e to Kevin\u0026rsquo;s personal template. Feel free to use it or modify it to your tastes. Once you download it and save it to your machine, you can have git use it as the default template by running the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003egit config --global commit.template path/to/.git_commit_template\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="32-gitlens"\u003e3.2 GitLens\u003c/h2\u003e\n\u003cp\u003eIf you’re using Visual Studio Code, you may also install the \u003ca href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"\u003eGitLens extension\u003c/a\u003e to easily see git history.\u003c/p\u003e\n\u003ch1 id="4-final-reminders"\u003e4 Final Reminders\u003c/h1\u003e\n\u003cp\u003ePlease note that these standards are still open to improvements. Just this because it’s on a document doesn’t mean it’s perfect. So if you, the reader, have any feedback or comments that you think will improve the overall standards, please don’t hesitate to let us know.\u003c/p\u003e\n'},{id:7,href:"/docs/setup/add-custom-domain/",title:"Add Custom Domain",description:"Add a custom domain to the site.",content:'\u003ch2 id="instructions"\u003eInstructions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eRun:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ebench setup add-domain [domain]\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="2"\u003e\n\u003cli\u003eRegenerate nginx config.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ebench setup nginx\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003eReload nginx.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003esudo service nginx reload\r\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:8,href:"/docs/setup/set-up-dns-multitenancy/",title:"Set Up DNS Multitenancy",description:"Set up DNS multitenancy so hostnames will be resolved to the site/domain name.",content:'\u003ch2 id="instructions"\u003eInstructions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eRun:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ebench setup add-domain [domain]\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="2"\u003e\n\u003cli\u003eRegenerate nginx config.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ebench setup nginx\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003eReload nginx.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003esudo service nginx reload\r\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:9,href:"/docs/setup/set-up-https/",title:"Set Up HTTPS",description:"Instructions on how to set up HTTPS.",content:'\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\r\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003e💡\u003c/div\u003e\r\n  \u003cdiv class="w-100"\u003eLet\'s Encrypt Certificates expire every three months.\u003c/div\u003e\r\n\u003c/div\u003e\n\u003ch2 id="prerequisites"\u003ePrerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSite is set up in \u003ca href="/docs/setup/set-up-instance/#converting-to-production"\u003eproduction mode\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThe site has a registered \u003ca href="/docs/setup/add-custom-domain/"\u003ecustom domain\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThe instance is set up with \u003ca href="/docs/setup/set-up-dns-multitenancy/"\u003eDNS multitenancy\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="instructions"\u003eInstructions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eRun:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003esudo -H bench setup lets-encrypt [site-name] --custom-domain [custom-domain]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou will be faced with several prompts, respond to them accordingly. This command will also add an entry to the crontab of the root user (this requires elevated permissions) that will attempt to renew the certificate every month.\u003c/p\u003e\n\u003ch2 id="renew-certificates-manually"\u003eRenew Certificates Manually\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003esudo bench renew-lets-encrypt\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:10,href:"/docs/help/how-to-update/",title:"How to Update",description:"Regularly update the installed npm packages to keep your Doks website stable, usable, and secure.",content:'\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\r\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003e💡\u003c/div\u003e\r\n  \u003cdiv class="w-100"\u003eLearn more about \u003ca href="https://docs.npmjs.com/about-semantic-versioning"\u003esemantic versioning\u003c/a\u003e and \u003ca href="https://docs.npmjs.com/cli/v6/using-npm/semver#advanced-range-syntax"\u003eadvanced range syntax\u003c/a\u003e.\u003c/div\u003e\r\n\u003c/div\u003e\n\u003ch2 id="check-for-outdated-packages"\u003eCheck for outdated packages\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href="https://docs.npmjs.com/cli/v7/commands/npm-outdated"\u003e\u003ccode\u003enpm outdated\u003c/code\u003e\u003c/a\u003e command will check the registry to see if any (or, specific) installed packages are currently outdated:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm outdated [[\u0026lt;@scope\u0026gt;/]\u0026lt;pkg\u0026gt; ...]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="update-packages"\u003eUpdate packages\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href="https://docs.npmjs.com/cli/v7/commands/npm-update"\u003e\u003ccode\u003enpm update\u003c/code\u003e\u003c/a\u003e command will update all the packages listed to the latest version (specified by the tag config), respecting semver:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm update [\u0026lt;pkg\u0026gt;...]\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:11,href:"/docs/help/troubleshooting/",title:"Troubleshooting",description:"Solutions to common problems.",content:'\u003ch2 id="problems-updating-npm-packages"\u003eProblems updating npm packages\u003c/h2\u003e\n\u003cp\u003eDelete the \u003ccode\u003e./node_modules\u003c/code\u003e folder, and run again:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm install\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="problems-with-cache"\u003eProblems with cache\u003c/h2\u003e\n\u003cp\u003eDelete the temporary directories:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run clean\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:12,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:'\u003ch2 id="this-theme"\u003eThis theme?\u003c/h2\u003e\n\u003cp\u003eDoks is a \u003ca href="https://gethyas.com/themes/"\u003eHyas theme\u003c/a\u003e build by the creator of Hyas.\u003c/p\u003e\n\u003ch2 id="keyboard-shortcuts-for-search"\u003eKeyboard shortcuts for search?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003efocus: \u003ccode\u003e/\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eselect: \u003ccode\u003e↓\u003c/code\u003e and \u003ccode\u003e↑\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eopen: \u003ccode\u003eEnter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eclose: \u003ccode\u003eEsc\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="other-documentation"\u003eOther documentation?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://docs.netlify.com/"\u003eNetlify\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://gohugo.io/documentation/"\u003eHugo\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="can-i-get-support"\u003eCan I get support?\u003c/h2\u003e\n\u003cp\u003eCreate a topic:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://community.netlify.com/"\u003eNetlify Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://discourse.gohugo.io/"\u003eHugo Forums\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://github.com/h-enk/doks/discussions"\u003eDoks Discussions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="contact-the-creator"\u003eContact the creator?\u003c/h2\u003e\n\u003cp\u003eSend \u003ccode\u003eh-enk\u003c/code\u003e a message:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://community.netlify.com/"\u003eNetlify Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://discourse.gohugo.io/"\u003eHugo Forums\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://github.com/h-enk/doks/discussions"\u003eDoks Discussions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:13,href:"/docs/",title:"Docs",description:null,content:""},{id:14,href:"/docs/help/",title:"Help",description:"Help Doks.",content:""},{id:15,href:"/docs/others/",title:"Others",description:"Other documentation.",content:""},{id:16,href:"/docs/projects/",title:"Projects",description:"Project documentation.",content:""},{id:17,href:"/docs/setup/",title:"Setup",description:"Setup documentation.",content:""},{id:18,href:"/docs/standards/",title:"Standards",description:"Standards documentation.",content:""},{id:19,href:"/docs/start-here/",title:"Start Here",description:"Start here.",content:""},{id:20,href:"/docs/training/",title:"Training",description:"Training documentation.",content:""}];b.add(c),userinput.addEventListener('input',e,!0),suggestions.addEventListener('click',f,!0);function e(){var g=this.value,e=b.search(g,5),f=suggestions.childNodes,h=0,i=e.length,c;for(suggestions.classList.remove('d-none'),e.forEach(function(b){c=document.createElement('div'),c.innerHTML='<a href><span></span><span></span></a>',a=c.querySelector('a'),t=c.querySelector('span:first-child'),d=c.querySelector('span:nth-child(2)'),a.href=b.href,t.textContent=b.title,d.textContent=b.description,suggestions.appendChild(c)});f.length>i;)suggestions.removeChild(f[h])}function f(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()