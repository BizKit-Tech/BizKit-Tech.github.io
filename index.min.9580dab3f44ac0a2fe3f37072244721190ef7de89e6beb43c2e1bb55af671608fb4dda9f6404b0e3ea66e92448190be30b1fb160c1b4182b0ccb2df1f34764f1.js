var suggestions=document.getElementById('suggestions'),userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(a){a.keyCode===191&&(a.preventDefault(),userinput.focus()),a.keyCode===27&&(userinput.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement);let c=0;b.keyCode===38?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var b=new FlexSearch({preset:'score',cache:!0,doc:{id:'id',field:['title','description','content'],store:['href','title','description']}}),c=[{id:0,href:"/docs/start-here/introduction/",title:"Introduction",description:"This site will provide you with documentation to better understand Frappe, ERPNext, and how BizKit uses these technologies.",content:'\u003ch2 id="get-started"\u003eGet started\u003c/h2\u003e\n\u003cp\u003eNew to the team? \u003ca href="/docs/training/"\u003eTraining →\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eTrying to set up an instance? \u003ca href="/docs/setup/"\u003eSetup →\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eNeed to know more about a project? \u003ca href="/docs/projects/"\u003eProjects →\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWanna know the development standards? \u003ca href="/docs/standards/"\u003eStandards →\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eNot sure what you\u0026rsquo;re looking for? \u003ca href="/docs/others/"\u003eOthers →\u003c/a\u003e\u003c/p\u003e\n'},{id:1,href:"/docs/help/commands/",title:"Commands",description:"Doks comes with commands for common tasks.",content:'\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\r\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003e💡\u003c/div\u003e\r\n  \u003cdiv class="w-100"\u003eYou can change the commands in the scripts section of `./package.json`.\u003c/div\u003e\r\n\u003c/div\u003e\n\u003ch2 id="create"\u003ecreate\u003c/h2\u003e\n\u003cp\u003eCreate new content for your site:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run create"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run create [path] [flags]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee also the Hugo docs: \u003ca href="https://gohugo.io/commands/hugo_new/"\u003ehugo new\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="lint"\u003elint\u003c/h2\u003e\n\u003cp\u003eCheck scripts, styles, and markdown for errors:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run lint"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run lint\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="scripts"\u003escripts\u003c/h3\u003e\n\u003cp\u003eCheck scripts for errors:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run lint:scripts"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run lint:scripts [-- --fix]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="styles"\u003estyles\u003c/h3\u003e\n\u003cp\u003eCheck styles for errors:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run lint:styles"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run lint:styles [-- --fix]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="markdown"\u003emarkdown\u003c/h3\u003e\n\u003cp\u003eCheck markdown for errors:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run lint:markdown"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run lint:markdown [-- --fix]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="clean"\u003eclean\u003c/h2\u003e\n\u003cp\u003eDelete temporary directories:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run clean"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run clean\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="start"\u003estart\u003c/h2\u003e\n\u003cp\u003eStart local development server:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run start"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run start\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="build"\u003ebuild\u003c/h2\u003e\n\u003cp\u003eBuild production website:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run build"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run build\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="functions"\u003efunctions\u003c/h3\u003e\n\u003cp\u003eBuild Lambda functions:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run build:functions"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run build:functions\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="preview"\u003epreview\u003c/h3\u003e\n\u003cp\u003eBuild production website including draft and future content:\u003c/p\u003e\n\u003cdiv class="doks-clipboard"\u003e\r\n  \u003cbutton class="btn-clipboard btn btn-link" data-clipboard-text="npm run build:preview"\u003e\u003cspan class="copy-status"\u003e\u003c/span\u003e\u003c/button\u003e\r\n\u003c/div\u003e\r\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run build:preview\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:2,href:"/docs/training/bench-commands/",title:"Bench Commands",description:"Commands we can use to manage an instance.",content:'\u003ch2 id="general-usage"\u003eGeneral Usage\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench --version\u003c/code\u003e - Show bench version\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench version\u003c/code\u003e - Show version of all apps\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench src\u003c/code\u003e - Show bench repo directory\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench --help\u003c/code\u003e - Show all commands and help\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench [command] --help\u003c/code\u003e - Show help for command\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench init [bench-name]\u003c/code\u003e - Create a new bench (Run from home dir)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--python TEXT\u003c/code\u003e                   Path to Python Executable.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--ignore-exist\u003c/code\u003e                  Ignore if Bench instance exists.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--apps_path TEXT\u003c/code\u003e                path to json files with apps to install after init\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--frappe-path TEXT\u003c/code\u003e              path to frappe repo\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--frappe-branch TEXT\u003c/code\u003e            Clone a particular branch of frappe\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--clone-from TEXT\u003c/code\u003e               copy repos from path\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--clone-without-update\u003c/code\u003e          copy repos from path without update\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--no-procfile\u003c/code\u003e                   Pull changes in all the apps in bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--no-backups\u003c/code\u003e                    Run migrations for all sites in the bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--no-auto-update\u003c/code\u003e                Build JS and CSS artifacts for the bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--skip-redis-config-generation\u003c/code\u003e  Skip redis config generation if already specifying the common-site-config file\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--verbose\u003c/code\u003e                       Verbose output during install\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench --site [site-name] COMMAND\u003c/code\u003e - Specify site for command\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench update\u003c/code\u003e - Pulls changes for bench-repo and all apps, applies patches, builds JS and CSS, and then migrates.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--pull\u003c/code\u003e                Pull changes in all the apps in bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--patch\u003c/code\u003e               Run migrations for all sites in the bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--build\u003c/code\u003e               Build JS and CSS artifacts for the bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--bench\u003c/code\u003e               Update bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--requirements\u003c/code\u003e        Update requirements\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--restart-supervisor\u003c/code\u003e  restart supervisor processes after update\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--no-backup\u003c/code\u003e			  Don\u0026rsquo;t take a backup before update\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--reset\u003c/code\u003e               Ignore local changes and update\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench restart\u003c/code\u003e Restart all bench services\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench backup\u003c/code\u003e Create a backup of the default site.\u003c/p\u003e\n\u003cp\u003eBackup will be saved to \u003ccode\u003e~/frappe-bench/sites/{your site}/private/backups/\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench backup-all-sites\u003c/code\u003e Backup all sites\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--with-files\u003c/code\u003e Backup site with files\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench restore\u003c/code\u003e Restore\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--with-private-files\u003c/code\u003e Restore site with private files (Path to tar file)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--with-public-files\u003c/code\u003e Restore site with public files (Path to tar file)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench migrate\u003c/code\u003e Run patches, sync schema and rebuild files/translations\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--rebuild-website TEXT\u003c/code\u003e Rebuild webpages after migration\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench migrate-env [python-version]\u003c/code\u003e Will migrate the virtual environment to the desired python version\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench --site [sitename] set-admin-password [password]\u003c/code\u003e Will reset the administrator password\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ebench destroy-all-sessions\u003c/code\u003e Destroys all sessions\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="config"\u003eConfig\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebench config\u003c/code\u003e - Change bench configuration\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eauto_update [on/off]\u003c/code\u003e          Enable/Disable auto update for bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edns_multitenant [on/off]\u003c/code\u003e      Enable/Disable DNS Multitenancy\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehttp_timeout\u003c/code\u003e                  Set http timeout\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erestart_supervisor_on_update\u003c/code\u003e  Enable/Disable auto restart of supervisor\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eserve_default_site\u003c/code\u003e            Configure nginx to serve the default site on\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eupdate_bench_on_update\u003c/code\u003e        Enable/Disable bench updates on running bench\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench setup\u003c/code\u003e - Setup components\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eauto-update\u003c/code\u003e  Add cronjob for bench auto update\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebackups    \u003c/code\u003e  Add cronjob for bench backups\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003econfig     \u003c/code\u003e  overwrite or make config.json\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eenv        \u003c/code\u003e  Setup virtualenv for bench\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enginx      \u003c/code\u003e  generate config for nginx\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprocfile   \u003c/code\u003e  Setup Procfile for bench start\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eproduction \u003c/code\u003e  setup bench for production\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eredis      \u003c/code\u003e  generate config for redis cache\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esocketio   \u003c/code\u003e  Setup node deps for socketio server\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esudoers    \u003c/code\u003e  Add commands to sudoers list for execution\u0026hellip;\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esupervisor \u003c/code\u003e  generate config for supervisor\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eadd-domain \u003c/code\u003e  add custom domain for site\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efirewall \u003c/code\u003e    setup firewall and block all ports except 22, 80 and 443\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003essh-port \u003c/code\u003e    change the default ssh connection port\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erequirements \u003c/code\u003eUpdate Python and Node packages\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--node \u003c/code\u003e Update only Node packages\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--python \u003c/code\u003e Update only Python packages\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench set-nginx-port [sitename] [port]\u003c/code\u003e - Set site\u0026rsquo;s port in Production\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="development"\u003eDevelopment\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebench new-app [app-name]\u003c/code\u003e Creates a new app\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench get-app [repo-link]\u003c/code\u003e - Downloads an app from a git repository and installs it\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--branch [branch-name]\u003c/code\u003e    Fetches specific branch of app\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench install-app [app-name]\u003c/code\u003e Installs existing app\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench remove-from-installed-apps [app-name]\u003c/code\u003e Remove app from the list of apps\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench uninstall-app [app-name]\u003c/code\u003e Delete app and everything linked to the app (Bench needs to be running)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench remove-app [app-name]\u003c/code\u003e Remove app from the bench entirely\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench --site [sitename] --force reinstall \u003c/code\u003e Reinstall with fresh database (Caution: Will wipe out old database)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench new-site [sitename]\u003c/code\u003e - Creates a new site\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--db-name\u003c/code\u003e                Database name\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--db-host\u003c/code\u003e                Custom database host URL for remote connection\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--db-port\u003c/code\u003e                Custom database listening port (eg. port other than the default 3306)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--mariadb-root-username\u003c/code\u003e  Root username for MariaDB\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--mariadb-root-password\u003c/code\u003e  Root password for MariaDB\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--admin-password\u003c/code\u003e         Administrator password for new site\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--verbose\u003c/code\u003e                     Verbose\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--force\u003c/code\u003e                       Force restore if site/database already exists\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--source_sql\u003c/code\u003e             Initiate database with a SQL file\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--install-app\u003c/code\u003e            Install app after installation`\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench use [site]\u003c/code\u003e Sets a default site\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench drop-site\u003c/code\u003e Removes site from disk and database completely\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--root-login\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--root-password\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench set-config [key] [value]\u003c/code\u003e   Adds a key-value pair to site\u0026rsquo;s config file\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench console\u003c/code\u003e   Opens a IPython console in the bench venv\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench execute\u003c/code\u003e   Execute a method inside any app.\n\u003cul\u003e\n\u003cli\u003eEg : \u003ccode\u003ebench execute frappe.utils.scheduler.enqueue_scheduler_events\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench --site [sitename] mariadb\u003c/code\u003e  Opens SQL Console\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench --site [sitename] export-fixtures\u003c/code\u003e  Exports fixtures\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench run-tests\u003c/code\u003e  Run tests\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--app\u003c/code\u003e App Name\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--doctype\u003c/code\u003e DocType to run tests for\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--test\u003c/code\u003e Specific Test\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--module\u003c/code\u003e Run a particular module that has tests\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--profile\u003c/code\u003e Runs a Python profiler on the test\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench disable-production\u003c/code\u003e  Disables production environment\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="scheduler"\u003eScheduler\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebench enable-scheduler\u003c/code\u003e - Enables Scheduler that will run scheduled tasks\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench doctor\u003c/code\u003e - Get diagnostic info about background workers\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench show-pending-jobs\u003c/code\u003e- Get pending jobs\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench purge-jobs\u003c/code\u003e - Destroy all pending jobs\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:3,href:"/docs/setup/set-up-instance/",title:"Set Up an Instance",description:"Instructions on how to set up an instance.",content:'\u003ch2 id="prerequisites"\u003ePrerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA server running on Ubuntu 20.04.\u003c/li\u003e\n\u003cli\u003eSSH access to the server.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="instructions"\u003eInstructions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eSet locale.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo update-locale LC_ALL=\u0026quot;C.UTF-8\u0026quot;\nsudo update-locale LANG=\u0026quot;C.UTF-8\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You might have to restart the server for the changes to take effect.\u003c/p\u003e\n\u003col start="2"\u003e\n\u003cli\u003eAllocate swap memory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo fallocate -l 4G /swapfile\nsudo chmod 600 /swapfile\nsudo mkswap /swapfile\nsudo swapon /swapfile\necho \u0026quot;/swapfile none swap sw 0 0\u0026quot; | sudo tee -a /etc/fstab\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003eAdd additional system configurations.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003eecho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf\necho vm.overcommit_memory=1 | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="4"\u003e\n\u003cli\u003eInstall dependencies.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get update\nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev \\\n    libbz2-dev libreadline-dev libjpeg-dev zlib1g-dev libpq-dev \\\n    wget curl llvm libncurses5-dev libncursesw5-dev \\\n    xz-utils tk-dev libffi-dev liblzma-dev python-openssl git\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="5"\u003e\n\u003cli\u003eInstall pyenv.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003egit clone https://github.com/pyenv/pyenv.git ~/.pyenv\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="6"\u003e\n\u003cli\u003eInstall python.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003eexport PYENV_ROOT=\u0026quot;$HOME/.pyenv\u0026quot;\nexport PATH=\u0026quot;$PYENV_ROOT/bin:$PATH\u0026quot;\npyenv install 3.6.10\npyenv global 3.6.10\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="7"\u003e\n\u003cli\u003eAdd pyenv to path.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003eecho \'export PYENV_ROOT=\u0026quot;$HOME/.pyenv\u0026quot;\' \u0026gt;\u0026gt; ~/.bashrc\necho \'export PATH=\u0026quot;$PYENV_ROOT/bin:$PATH\u0026quot;\' \u0026gt;\u0026gt; ~/.bashrc\necho -e \'if command -v pyenv 1\u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then\\n  eval \u0026quot;$(pyenv init -)\u0026quot;\\nfi\' \u0026gt;\u0026gt; ~/.bashrc\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You may need to logout then SSH in again for changes to take effect.\u003c/p\u003e\n\u003col start="8"\u003e\n\u003cli\u003eInstall additional prerequisites.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get install -y screen\nsudo apt-get install -y libffi-dev software-properties-common nginx\nsudo apt-get install -y xfonts-75dpi fontconfig libxrender1 xfonts-base libxext6\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="9"\u003e\n\u003cli\u003e\n\u003cp\u003eInstall MariaDB.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIf the MariaDB server is hosted in the same instance as the application server:\u003c/strong\u003e\n\u003col\u003e\n\u003cli\u003eInstall MariaDB server.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get install -y mariadb-server-10.3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you were not asked to set the password, run the following to set it: \u003ccode\u003emysql_secure_installation\u003c/code\u003e.\n2. Edit MariaDB config.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo nano /etc/mysql/my.cnf\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003eAdd the following to the file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003e[mysqld]\ncharacter-set-client-handshake = FALSE\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_unicode_ci\n\n[mysql]\ndefault-character-set = utf8mb4\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="4"\u003e\n\u003cli\u003eRestart the server.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo service mysql restart\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIf the MariaDB server is hosted in a separate instance:\u003c/strong\u003e\n\u003col\u003e\n\u003cli\u003eInstall MariaDB client.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get install -y mariadb-server-10.3\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eInstall Redis.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get install -y redis-server\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="11"\u003e\n\u003cli\u003eInstall Node, npm, and yarn.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003ecurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\nnvm install 12\nnpm install -g yarn\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="12"\u003e\n\u003cli\u003eInstall wkhtmltopdf.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get -y install xvfb libfontconfig wkhtmltopdf\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="13"\u003e\n\u003cli\u003eClean up installation files.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get clean\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="14"\u003e\n\u003cli\u003eSet git config perfmissions.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo chown -R ubuntu .config\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="15"\u003e\n\u003cli\u003eInstall Bench.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003egit clone https://github.com/BizKit-Tech/bench.git ~/.bench\npip install -e ~/.bench\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="16"\u003e\n\u003cli\u003eInstall Frappe.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003ebench init frappe-bench --frappe-path https://github.com/BizKit-Tech/frappe.git\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="17"\u003e\n\u003cli\u003eInstall ERPNext.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003e(cd ~/frappe-bench \u0026amp;\u0026amp; bench get-app https://github.com/BizKit-Tech/erpnext.git)\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="18"\u003e\n\u003cli\u003eInstall BizKit Core.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003e(cd ~/frappe-bench \u0026amp;\u0026amp; bench get-app https://github.com/BizKit-Tech/bizkit_core.git)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="converting-to-production"\u003eConverting to Production\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eInstall Python 3 and pip for sudo user.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo apt-get install -y python3-pip\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="2"\u003e\n\u003cli\u003eInstall Bench for sudo user.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo pip3 install -e ~/.bench\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003eSetup production.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo bench setup production ubuntu\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="4"\u003e\n\u003cli\u003eDisable fail2ban.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-sh"\u003esudo /etc/init.d/fail2ban stop\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:4,href:"/docs/standards/tdd/",title:"Test-Driven Development Guidelines",description:"Know more about our guidelines when writing and running unit tests.",content:'\u003ch1 id="1-background"\u003e1 Background\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eTest-driven development (TDD)\u003c/strong\u003e is a software development approach in which tests are written for a piece of code before the code itself is written. The idea is that by writing the tests first, you can define the desired behavior of the code and ensure that it works as expected.\u003c/p\u003e\n\u003ch1 id="2-key-features"\u003e2 Key Features\u003c/h1\u003e\n\u003cp\u003eThere are several key features of test-driven development that are important for beginners to understand:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe idea that tests are written before the code itself is written. This ensures that the code is written to satisfy the requirements of the tests, rather than the other way around.\u003c/li\u003e\n\u003cli\u003eThe use of automated testing tools to run the tests and check the results. This allows for efficient and repeatable testing, and ensures that the tests always run in the same way.\u003c/li\u003e\n\u003cli\u003eThe practice of writing tests for each piece of functionality that is added to the code. This helps to ensure that the code is written in a modular and testable way, and allows for efficient debugging if something goes wrong.\u003c/li\u003e\n\u003cli\u003eThe concept of test-driven development as a feedback loop. The tests are used to check the code and provide feedback on its behavior, which can then be used to improve the code and make it more reliable.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id="3-tdd-vs-qas-job"\u003e3 TDD vs QA’s Job\u003c/h1\u003e\n\u003cp\u003eUnit testing in test-driven development (TDD) and testing done by quality assurance (QA) are two different approaches to testing software. In general, unit testing in TDD is \u003cstrong\u003efocused on testing individual units of code\u003c/strong\u003e, while testing done by QA is focused on testing the overall functionality and quality of the software.\u003c/p\u003e\n\u003cp\u003eUnit testing in TDD is a software development practice in which developers write small, granular tests that test individual units of code before writing the code itself. This helps to ensure that the code is working as expected and helps to catch and prevent bugs from being introduced into the code.\u003c/p\u003e\n\u003cp\u003eTesting done by QA, on the other hand, is typically done after the code has been written. QA testers use a variety of techniques and tools to test the overall functionality and quality of the software, including manual testing, automated testing, and performance testing. QA testing is focused on ensuring that the software is working correctly from the user\u0026rsquo;s perspective and meets the requirements and standards set by the development team.\u003c/p\u003e\n\u003cp\u003eOverall, TDD and QA testing are complementary approaches to testing that serve different purposes in the software development process. While TDD focuses on writing small, focused tests that are written by the developer, QA testing is often focused on more comprehensive testing of the application as a whole. Both approaches can help to ensure the quality of the code and improve the overall user experience of the application.\u003c/p\u003e\n\u003ch1 id="4-setting-up"\u003e4 Setting Up\u003c/h1\u003e\n\u003cp\u003eThere are two files needed to be maintained to track BizKit-updated tests: an \u003ccode\u003eupdated_doctypes.txt\u003c/code\u003e and an \u003ccode\u003eupdated_modules.txt\u003c/code\u003e under the \u003ccode\u003eerpnext/erpnext/tests\u003c/code\u003e folder. These are where we maintain DocTypes and modules (whose classes are not directly associated to a DocType e.g., \u003ccode\u003eTestPurchaseOrderTransactionItemBinUpdater\u003c/code\u003e) with our updated tests.\u003c/p\u003e\n\u003cp\u003eDocTypes in the \u003ccode\u003eupdated_doctypes.txt\u003c/code\u003e are written like their labels, and are separated by line breaks:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-txt"\u003eItem\nPurchase Order\nPurchase Invoice\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eModules in the \u003ccode\u003eupdated_modules.txt\u003c/code\u003e are dotted relative paths to the modules, and are separated by line breaks:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-txt"\u003eerpnext.transactions.transaction_bin_updater.buying.purchase_order.test_purchase_order_transaction_bin_updater\nerpnext.transactions.transaction_bin_updater.buying.purchase_invoice.test_purchase_invoice_transaction_bin_updater\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch1 id="5-writing-unit-tests"\u003e5 Writing Unit Tests\u003c/h1\u003e\n\u003cp\u003eThere are two things discussed in this section:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreating and deleting documents using the designed static methods to be used in unit tests\u003c/li\u003e\n\u003cli\u003eWriting the actual unit tests\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id="51-creating-and-deleting-documents"\u003e5.1 Creating and Deleting Documents\u003c/h2\u003e\n\u003cp\u003eThese five static methods should be present in the \u003ccode\u003eTest\u003c/code\u003e class of a DocType (e.g., \u003ccode\u003eTestItem\u003c/code\u003e), which is a subclass of the \u003ccode\u003eunittest.TestCase\u003c/code\u003e:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003esetup_prerequisites\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecreate\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edestroy\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edestroy_all\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edestroy_prerequisites\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThese are set up as static methods (using the \u003ccode\u003e@staticmethod\u003c/code\u003e decorator) to eliminate the need to instantiate the whole \u003ccode\u003eunittest.TestCase\u003c/code\u003e class every time they are called:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eclass TestItem(unittest.TestCase):\n  @staticmethod\n  def setup_prerequisites():\n    pass\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="511-setup_prerequisites"\u003e5.1.1 setup_prerequisites\u003c/h3\u003e\n\u003cp\u003eThis method creates the necessary documents that need to be linked to the current document being created. For example, for an Item document, the following links are present:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eItem Group (required)\u003c/li\u003e\n\u003cli\u003eUOM in the \u003ccode\u003euoms\u003c/code\u003e table\u003c/li\u003e\n\u003cli\u003eSupplier in the \u003ccode\u003esupplier_items\u003c/code\u003e table (optional but frequently set)\u003c/li\u003e\n\u003cli\u003eCustomer in the \u003ccode\u003ecustomer_items\u003c/code\u003e table (optional but frequently set)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor required links, these are made positional arguments in the \u003ccode\u003esetup_prerequisites\u003c/code\u003e method, while those that are not required are made keyword arguments:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eclass TestItem(unittest.TestCase):\n  @staticmethod\n    def setup_prerequisites(\n        item_group_name, suppliers=[], customers=[], uoms=[]\n    ):\n        TestItemGroup.create(item_group_name)\n\n        for customer in customers:\n            TestCustomer.create(customer_name=customer)\n        for supplier in suppliers:\n            TestSupplier.create(supplier_name=supplier)\n\n        for uom in uoms:\n            TestUOM.create(uom)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the code above, the \u003ccode\u003eitem_group_name\u003c/code\u003e parameter is required, while the \u003ccode\u003esuppliers\u003c/code\u003e, \u003ccode\u003ecustomers\u003c/code\u003e, and \u003ccode\u003euoms\u003c/code\u003e parameters have default values that evaluate to a \u003ccode\u003eFalse\u003c/code\u003e Boolean. Inside the \u003ccode\u003esetup_prerequisites\u003c/code\u003e method, the \u003ccode\u003ecreate\u003c/code\u003e methods of the linked DocTypes are called based on the arguments passed.\u003c/p\u003e\n\u003ch3 id="512-create"\u003e5.1.2 create\u003c/h3\u003e\n\u003cp\u003eThis method creates an instance of the current DocType. The parameters of \u003ccode\u003ecreate\u003c/code\u003e methods are: the names of link fields that are \u003cstrong\u003erequired\u003c/strong\u003e, and the \u003ccode\u003edo_not_save\u003c/code\u003e parameter:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eclass TestItem(unittest.TestCase):\n    @staticmethod\n    def create(\n        item_name=\u0026quot;_Test Item\u0026quot;,\n        item_group=\u0026quot;_Test Item Group\u0026quot;,\n        item_description=\u0026quot;_Test Item\u0026quot;,\n        stock_uom=\u0026quot;Piece\u0026quot;,\n        do_not_save=0,\n    ):\n        TestItem.setup_prerequisites(\n            item_group, suppliers, customers, [uom[\u0026quot;uom\u0026quot;] for uom in uoms]\n        )\n\n        if not frappe.db.exists(\u0026quot;Item\u0026quot;, {\u0026quot;item_name\u0026quot;: item_name}):\n            new_item = frappe.new_doc(\u0026quot;Item\u0026quot;)\n            new_item.item_description = item_name\n            new_item.item_name = item_name\n            new_item.item_group = item_group\n            new_item.stock_uom = stock_uom\n\n            new_item.append(\u0026quot;uoms\u0026quot;, {\u0026quot;uom\u0026quot;: stock_uom, \u0026quot;conversion_factor\u0026quot;: 1})\n\n            if not do_not_save:\n                new_item.save()\n\n            return new_item\n        else:\n            item_docname = frappe.db.exists(\u0026quot;Item\u0026quot;, {\u0026quot;item_name\u0026quot;: item_name})\n            return frappe.get_doc(\u0026quot;Item\u0026quot;, item_docname)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe design of the \u003ccode\u003ecreate\u003c/code\u003e method follows the \u003ca href="https://refactoring.guru/design-patterns/singleton"\u003eSingleton pattern\u003c/a\u003e, wherein there is only one instance of the object you\u0026rsquo;re looking for. In the code, we specify the \u003ccode\u003eitem_name\u003c/code\u003e and other parameters that make the Item document unique. If that specific Item exists, it returns that existing Item. Otherwise, it creates a new one with the specified attributes and returns it.\u003c/p\u003e\n\u003cp\u003eFor non-transactions with less fields and links, the parameters are defined in the \u003ccode\u003ecreate\u003c/code\u003e method definition, like the one shown above. On the other hand, for transactions (e.g., Purchase Order, Sales Order), since there are too many fields and links in those documents, the parameters in their \u003ccode\u003ecreate\u003c/code\u003e methods are compressed into \u003ccode\u003e**args\u003c/code\u003e. The \u003ccode\u003e**\u003c/code\u003e is necessary to be able to access the arguments passed like a dictionary.\u003c/p\u003e\n\u003cp\u003eHere is an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eclass TestPurchaseOrder(unittest.TestCase):\n    @staticmethod\n    def create(**args):\n        args.setdefault(\u0026quot;item_name\u0026quot;, \u0026quot;_Test Item\u0026quot;)\n        args.setdefault(\u0026quot;company\u0026quot;, \u0026quot;_Test Company\u0026quot;)\n        args.setdefault(\u0026quot;supplier\u0026quot;, \u0026quot;_Test Supplier\u0026quot;)\n        args.setdefault(\u0026quot;set_warehouse\u0026quot;, \u0026quot;_Test Warehouse - _TC\u0026quot;)\n        args.setdefault(\u0026quot;tax_category\u0026quot;, \u0026quot;_Test Tax Category\u0026quot;)\n        args.setdefault(\u0026quot;qty\u0026quot;, 1)\n        args.setdefault(\u0026quot;price_list_rate\u0026quot;, 100)\n        args.setdefault(\u0026quot;rate\u0026quot;, 100)\n\n        TestPurchaseOrder.setup_prerequisites(\n            item_name=args.get(\u0026quot;item_name\u0026quot;),\n            company_name=args.get(\u0026quot;company\u0026quot;),\n            supplier_name=args.get(\u0026quot;supplier\u0026quot;),\n            warehouse_name=args.get(\u0026quot;set_warehouse\u0026quot;).split(\u0026quot; - \u0026quot;)[0],\n            company_abbr=args.get(\u0026quot;set_warehouse\u0026quot;).split(\u0026quot; - \u0026quot;)[1],\n            tax_category_title=args.get(\u0026quot;tax_category\u0026quot;),\n        )\n\n        item = frappe.db.exists(\u0026quot;Item\u0026quot;, {\u0026quot;item_name\u0026quot;: args.get(\u0026quot;item_name\u0026quot;)})\n        item = frappe.get_doc(\u0026quot;Item\u0026quot;, item)\n\n        new_po = frappe.new_doc(\u0026quot;Purchase Order\u0026quot;)\n        new_po.supplier = args.get(\u0026quot;supplier\u0026quot;)\n        new_po.company = args.get(\u0026quot;company\u0026quot;)\n        new_po.transaction_date = date.today()\n        new_po.set_warehouse = args.get(\u0026quot;set_warehouse\u0026quot;)\n        new_po.tax_category = args.get(\u0026quot;tax_category\u0026quot;)\n        new_po.append(\n            \u0026quot;items\u0026quot;,\n            {\n                \u0026quot;item_code\u0026quot;: item.item_code,\n                \u0026quot;item_name\u0026quot;: args.get(\u0026quot;item_name\u0026quot;),\n                \u0026quot;schedule_date\u0026quot;: date.today() + timedelta(days=7),\n                \u0026quot;description\u0026quot;: item.description,\n                \u0026quot;qty\u0026quot;: args.get(\u0026quot;qty\u0026quot;),\n                \u0026quot;stock_uom\u0026quot;: item.stock_uom,\n                \u0026quot;uom\u0026quot;: item.stock_uom,\n                \u0026quot;conversion_factor\u0026quot;: 1,\n                \u0026quot;price_list_rate\u0026quot;: args.get(\u0026quot;price_list_rate\u0026quot;),\n                \u0026quot;rate\u0026quot;: args.get(\u0026quot;rate\u0026quot;),\n                \u0026quot;amount\u0026quot;: args.get(\u0026quot;qty\u0026quot;) * args.get(\u0026quot;rate\u0026quot;),\n            },\n        )\n\n        if not args.get(\u0026quot;do_not_save\u0026quot;):\n            new_po.save()\n            new_po.reload()\n            if not args.get(\u0026quot;do_not_submit\u0026quot;):\n                new_po.submit()\n\n        return new_po\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the code above, the following steps are followed:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIn setting the default values for these parameters, the \u003ccode\u003esetdefault\u003c/code\u003e method is used on the \u003ccode\u003eargs\u003c/code\u003e dictionary (e.g., \u003ccode\u003eargs.setdefault(\u0026quot;item_name\u0026quot;, \u0026quot;_Test Item\u0026quot;)\u003c/code\u003e):\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eargs.setdefault(\u0026quot;item_name\u0026quot;, \u0026quot;_Test Item\u0026quot;)\nargs.setdefault(\u0026quot;company\u0026quot;, \u0026quot;_Test Company\u0026quot;)\nargs.setdefault(\u0026quot;supplier\u0026quot;, \u0026quot;_Test Supplier\u0026quot;)\nargs.setdefault(\u0026quot;set_warehouse\u0026quot;, \u0026quot;_Test Warehouse - _TC\u0026quot;)\nargs.setdefault(\u0026quot;tax_category\u0026quot;, \u0026quot;_Test Tax Category\u0026quot;)\nargs.setdefault(\u0026quot;qty\u0026quot;, 1)\nargs.setdefault(\u0026quot;price_list_rate\u0026quot;, 100)\nargs.setdefault(\u0026quot;rate\u0026quot;, 100)\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="2"\u003e\n\u003cli\u003eThe \u003ccode\u003esetup_prerequisites\u003c/code\u003e method of the current class is called, passing the necessary arguments (links in the DocType):\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eTestPurchaseOrder.setup_prerequisites(\n    item_name=args.get(\u0026quot;item_name\u0026quot;),\n    company_name=args.get(\u0026quot;company\u0026quot;),\n    supplier_name=args.get(\u0026quot;supplier\u0026quot;),\n    warehouse_name=args.get(\u0026quot;set_warehouse\u0026quot;).split(\u0026quot; - \u0026quot;)[0],\n    company_abbr=args.get(\u0026quot;set_warehouse\u0026quot;).split(\u0026quot; - \u0026quot;)[1],\n    tax_category_title=args.get(\u0026quot;tax_category\u0026quot;),\n)\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003eThere are times when the linked document is not named based on a specific field (e.g., Item can be named in different ways which can be set in the Stock Settings). To properly pull the item created as a prerequisite, we use the \u003ccode\u003efrappe.db.exists\u003c/code\u003e method first to get the Item docname then that is passed as an argument to the \u003ccode\u003efrappe.get_doc\u003c/code\u003e method to get the Item object itself.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eitem = frappe.db.exists(\u0026quot;Item\u0026quot;, {\u0026quot;item_name\u0026quot;: args.get(\u0026quot;item_name\u0026quot;)})\nitem = frappe.get_doc(\u0026quot;Item\u0026quot;, item)\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="4"\u003e\n\u003cli\u003eThe specific arguments passed are accessed using the \u003ccode\u003eargs.get()\u003c/code\u003e method (e.g., \u003ccode\u003eargs.get(\u0026quot;item_name\u0026quot;)\u003c/code\u003e):\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003enew_po.supplier = args.get(\u0026quot;supplier\u0026quot;)\nnew_po.company = args.get(\u0026quot;company\u0026quot;)\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="5"\u003e\n\u003cli\u003eTransactions\' \u003ccode\u003ecreate\u003c/code\u003e methods have additional \u003ccode\u003edo_not_save\u003c/code\u003e and \u003ccode\u003edo_not_submit\u003c/code\u003e parameters, the default values of which evaluate to \u003ccode\u003eFalse\u003c/code\u003e (\u003ccode\u003eNone\u003c/code\u003e):\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eif not args.get(\u0026quot;do_not_save\u0026quot;):\n    new_po.save()\n    new_po.reload()\n    if not args.get(\u0026quot;do_not_submit\u0026quot;):\n        new_po.submit()\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="6"\u003e\n\u003cli\u003eThe resulting transaction is returned.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e In the \u003ccode\u003ecreate\u003c/code\u003e method shown above, we do not check whether or not the Purchase Order exists already. This is because every Purchase Order or transaction cannot be reused.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="513-destroy"\u003e5.1.3 destroy\u003c/h3\u003e\n\u003cp\u003eThis method is used to delete the current document and possibly its prerequisites. It takes in the argument that identifies the unique document and the additional \u003ccode\u003edestroy_prerequisites\u003c/code\u003e argument (which we\u0026rsquo;ll touch on below):\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eclass TestItem(unittest.TestCase):\n    @staticmethod\n    def destroy(item_name, destroy_prerequisites=False):\n        if not item_name:\n            TestItem.destroy_all()\n\n        item = frappe.db.exists(\u0026quot;Item\u0026quot;, {\u0026quot;item_name\u0026quot;: item_name})\n        if item:\n            item_doc = frappe.get_doc(\u0026quot;Item\u0026quot;, item)\n            frappe.delete_doc(\u0026quot;Item\u0026quot;, item)\n\n            if destroy_prerequisites:\n                frappe.delete_doc(\u0026quot;Item Group\u0026quot;, item_doc.item_group)\n                if item_doc.supplier_items:\n                    for supplier in item_doc.supplier_items:\n                        frappe.delete_doc(\u0026quot;Supplier\u0026quot;, supplier)\n                if item_doc.customer_items:\n                    for customer in item_doc.customer_items:\n                        frappe.delete_doc(\u0026quot;Customer\u0026quot;, customer)\n                for uom in item_doc.uoms:\n                    frappe.delete_doc(\u0026quot;UOM\u0026quot;, uom)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the code above, the following steps are taken:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIt checks the identifier passed has a value. In this case the identifier of the Item document is the \u003ccode\u003eitem_name\u003c/code\u003e. If no \u003ccode\u003eitem_name\u003c/code\u003e is passed, the code understands this as all testing Item documents shall be deleted:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eif not item_name:\n    TestItem.destroy_all()\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="2"\u003e\n\u003cli\u003eIf \u003ccode\u003eitem_name\u003c/code\u003e has a value, it is passed to the \u003ccode\u003efrappe.db.exists\u003c/code\u003e method to get the docname of the Item with the specific attribute. The Item document with that docname is pulled using the \u003ccode\u003efrappe.get_doc\u003c/code\u003e method and is deleted:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003e item = frappe.db.exists(\u0026quot;Item\u0026quot;, {\u0026quot;item_name\u0026quot;: item_name})\nif item:\n    item_doc = frappe.get_doc(\u0026quot;Item\u0026quot;, item)\n    frappe.delete_doc(\u0026quot;Item\u0026quot;, item)\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003eThere is an additional \u003ccode\u003edestroy_prerequisites\u003c/code\u003e parameter in the \u003ccode\u003edestroy\u003c/code\u003e method (and \u003ccode\u003edestroy_all\u003c/code\u003e as well), which deletes the linked documents to that current document i.e., the prerequisites of the document. These are deleted as well if the \u003ccode\u003edestroy_prerequisites\u003c/code\u003e\u0026rsquo;s value evaluates to \u003ccode\u003eTrue\u003c/code\u003e. The default value of the \u003ccode\u003edestroy_prerequisites\u003c/code\u003e parameter is \u003ccode\u003eFalse\u003c/code\u003e. It is rarely advised to delete prerequisites of a document, so \u003cstrong\u003ebe careful when setting this to \u003ccode\u003eTrue\u003c/code\u003e\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eif item:\n    item_doc = frappe.get_doc(\u0026quot;Item\u0026quot;, item)\n    frappe.delete_doc(\u0026quot;Item\u0026quot;, item)\n\n    if destroy_prerequisites:\n        frappe.delete_doc(\u0026quot;Item Group\u0026quot;, item_doc.item_group)\n        if item_doc.supplier_items:\n            for supplier in item_doc.supplier_items:\n                frappe.delete_doc(\u0026quot;Supplier\u0026quot;, supplier)\n        if item_doc.customer_items:\n            for customer in item_doc.customer_items:\n                frappe.delete_doc(\u0026quot;Customer\u0026quot;, customer)\n        for uom in item_doc.uoms:\n            frappe.delete_doc(\u0026quot;UOM\u0026quot;, uom)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="514-destroy_all"\u003e5.1.4 destroy_all\u003c/h3\u003e\n\u003cp\u003eThis method deletes all Item documents in the database with \u003ccode\u003e_Test\u003c/code\u003e as a prefix in whatever the basis field is specified within the method (e.g., For Item documents, it is the \u003ccode\u003eitem_name\u003c/code\u003e field).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eclass TestItem(unittest.TestCase):\n    @staticmethod\n    def destroy_all():\n        test_items = get_test_doc_list(\u0026quot;tabItem\u0026quot;, \u0026quot;item_name\u0026quot;)\n\n        for test_item in test_items:\n            item_doc = frappe.get_doc(\u0026quot;Item\u0026quot;, test_item)\n            item_doc.buying_prices = []\n            item_doc.buying_discounts = []\n            item_doc.buying_deals = []\n            item_doc.selling_prices = []\n            item_doc.selling_discounts = []\n            item_doc.selling_deals = []\n            item_doc.save()\n            frappe.db.delete(\u0026quot;Item Barcode\u0026quot;, {\u0026quot;parent\u0026quot;: test_item})\n            frappe.db.delete(\u0026quot;UOM Conversion Detail\u0026quot;, {\u0026quot;parent\u0026quot;: test_item})\n            frappe.delete_doc(\u0026quot;Item\u0026quot;, test_item)\n\n        TestItem.destroy_prerequisites()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the code above, the following steps are taken:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIt calls the \u003ccode\u003eget_test_doc_list\u003c/code\u003e function imported from the \u003ccode\u003eerpnext.tests.utils\u003c/code\u003e module, which looks like this:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003edef get_test_doc_list(table_name, filter_column_name):\n    test_doc_list = frappe.db.sql(\n        \u0026quot;\u0026quot;\u0026quot;\n            select name\n            from `{0}`\n            where {1} like \'%\\\\_Test%\'\n        \u0026quot;\u0026quot;\u0026quot;.format(\n            table_name, filter_column_name\n        ),\n        as_list=1,\n    )\n\n    return list(zip(*test_doc_list))[0] if test_doc_list else []\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe \u003ccode\u003eget_test_doc_list\u003c/code\u003e method returns all \u003ccode\u003ename\u003c/code\u003e values in the specified table (\u003ccode\u003etable_name\u003c/code\u003e) and filters the rows such that only those with \u003ccode\u003e_Test\u003c/code\u003e in the filter field (\u003ccode\u003efilter_column_name\u003c/code\u003e) are returned.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003col start="2"\u003e\n\u003cli\u003eIt loops over every docname returned by the \u003ccode\u003eget_test_doc_list\u003c/code\u003e function and removes all links to other documents and child table rows that have a Link field to the current DocType. The reason for this is because the system throws an error when a document is deleted but that document is linked in another existing document (e.g., when an Item document linked to an existing Item Price is deleted). In order to resolve this issue, we have to unlink them first (and/or delete the other document) before we delete the current document.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003efor test_item in test_items:\n    item_doc = frappe.get_doc(\u0026quot;Item\u0026quot;, test_item)\n    item_doc.buying_prices = []\n    item_doc.buying_discounts = []\n    item_doc.buying_deals = []\n    item_doc.selling_prices = []\n    item_doc.selling_discounts = []\n    item_doc.selling_deals = []\n    item_doc.save()\n    frappe.db.delete(\u0026quot;Item Barcode\u0026quot;, {\u0026quot;parent\u0026quot;: test_item})\n    frappe.db.delete(\u0026quot;UOM Conversion Detail\u0026quot;, {\u0026quot;parent\u0026quot;: test_item})\n    frappe.delete_doc(\u0026quot;Item\u0026quot;, test_item)\n\nTestItem.destroy_prerequisites()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e For the Item DocType, such unlinking has to be done for Item Price, Item Buying Discount, Item Selling Discount, Item Buying Deal, and Item Selling Deal, as shown in the code above.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="515-destroy_prerequisites"\u003e5.1.5 destroy_prerequisites\u003c/h3\u003e\n\u003cp\u003eThis method deletes the prerequisite documents linked to the current document. It takes similar arguments as the \u003ccode\u003esetup_prerequisites\u003c/code\u003e, \u003cstrong\u003eall of which are keyword arguments\u003c/strong\u003e and have default values that evaluate to \u003ccode\u003eFalse\u003c/code\u003e (e.g., \u003ccode\u003eNone\u003c/code\u003e, \u003ccode\u003e[]\u003c/code\u003e). It deletes the actual documents linked to the current document based on the arguments passed to identify them using their DocTypes\' corresponding \u003ccode\u003edestroy\u003c/code\u003e methods.\u003c/p\u003e\n\u003cp\u003eA few things to note:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eCheck first if the field in the current document is required. In the Item DocType, the Item Group is required, while the Suppliers are not. Hence, the \u003ccode\u003edestroy_prerequisites\u003c/code\u003e method shall check first if a non-empty list for the \u003ccode\u003esuppliers\u003c/code\u003e parameter is passed, while the Item Group is deleted in every call.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUse the \u003ccode\u003edestroy\u003c/code\u003e method, and \u003cstrong\u003enot\u003c/strong\u003e the \u003ccode\u003edestroy_all\u003c/code\u003e method. This is to avoid errors in unit tests involving document deletion and linked fields.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUse this sparingly outside the \u003ccode\u003edestroy\u003c/code\u003e and \u003ccode\u003edestroy_all\u003c/code\u003e methods of its own class.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eclass TestItem(unittest.TestCase):\n    @staticmethod\n    def destroy_prerequisites(\n        item_group_name=None, suppliers=[], customers=[], uoms=[]\n    ):\n        TestItemGroup.destroy(item_group_name)\n        for supplier in suppliers:\n            TestSupplier.destroy(supplier)\n        for customer in customers:\n            TestCustomer.destroy(customer)\n        for uom in uoms:\n            TestUOM.destroy(uom)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="52-unit-tests"\u003e5.2 Unit Tests\u003c/h2\u003e\n\u003cp\u003eThe unit testing framework that we use at BizKit is unittest. Read its official documentation \u003ca href="https://docs.python.org/3/library/unittest.html"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id="521-red-green-refactor"\u003e5.2.1 Red, Green, Refactor\u003c/h3\u003e\n\u003ch4 id="5211-getting-started"\u003e5.2.1.1 Getting Started\u003c/h4\u003e\n\u003cp\u003eThe red, green, refactor approach is a common technique used in test-driven development. It consists of the following steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cspan style="color: red;"\u003eRed\u003c/span\u003e: Write a failing test for a piece of functionality that you want to add to your code. The test should define the expected behavior of the code and should be written before the code itself is written.\u003c/li\u003e\n\u003cli\u003e\u003cspan style="color: green;"\u003eGreen\u003c/span\u003e: Write the code to make the test pass. This should be done in a way that satisfies the requirements of the test and ensures that the code works as expected. This is typically the minimum amount of code needed to make the test pass.\u003c/li\u003e\n\u003cli\u003e\u003cspan style="color: blue;"\u003eRefactor\u003c/span\u003e: Once the code passes the test, you can refactor the code to improve its design, readability, and performance. This is done without changing the functionality of the code, so the tests should still pass.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe red-green-refactor approach is useful because it helps you focus on one small piece of functionality at a time, which makes the development process more manageable. It also encourages you to think about the design of your code upfront, and helps ensure that your code is well-tested.\u003c/p\u003e\n\u003ch4 id="5212-example"\u003e5.2.1.2 Example\u003c/h4\u003e\n\u003cp\u003eHere is an example of the red, green, refactor approach in test-driven development:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cspan style="color: red;"\u003eRed\u003c/span\u003e: Write a test to check that a function called \u003ccode\u003eadd\u003c/code\u003e can be used to add two numbers together and return the result. The test should define the expected behavior of the \u003ccode\u003eadd\u003c/code\u003e function, and should be written before the \u003ccode\u003eadd\u003c/code\u003e function itself is written.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003edef test_add():\n  result = add(2, 3)\n  assert result == 5\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="2"\u003e\n\u003cli\u003e\u003cspan style="color: green;"\u003eGreen\u003c/span\u003e: Write the \u003ccode\u003eadd\u003c/code\u003e function to make the test pass. This should be done in a way that satisfies the requirements of the test and ensures that the \u003ccode\u003eadd\u003c/code\u003e function works as expected.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003edef add(a, b):\n  return 5\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003e\u003cspan style="color: blue;"\u003eRefactor\u003c/span\u003e: Once the \u003ccode\u003eadd\u003c/code\u003e function passes the test, you can refactor the code to make it more modular and readable. This might involve restructuring the code, adding comments, or making other improvements.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003edef add(a, b):\n  # Return the sum of a and b\n  return a + b\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, the red, green, refactor approach is used to write a simple function called \u003ccode\u003eadd\u003c/code\u003e that can be used to add two numbers together and return the result. The test is written first, and then the code is written to make the test pass. The code is then refactored to improve its readability and maintainability. After refactoring, more tests are added and/or the existing tests are updated to handle more scenarios.\u003c/p\u003e\n\u003ch3 id="522-basic-rules"\u003e5.2.2 Basic Rules\u003c/h3\u003e\n\u003cp\u003eThere are several basic rules that you should follow when writing unit tests in Frappe:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEach test case should be a subclass of \u003ccode\u003eunittest.TestCase\u003c/code\u003e and should contain one or more test methods that begin with the word \u003ccode\u003etest\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eTest methods should use the various assertions provided by the \u003ccode\u003eunittest\u003c/code\u003e module to verify that the code under test is working correctly.\u003c/li\u003e\n\u003cli\u003eTest cases should be isolated from one another. This means that each test should run independently and not depend on any other test to be run first.\u003c/li\u003e\n\u003cli\u003eTest cases should be repeatable. This means that the same test should produce the same results every time it is run, regardless of the environment or other factors.\u003c/li\u003e\n\u003cli\u003eTest cases should be thorough. This means that they should cover all relevant scenarios and test for all possible outcomes.\u003c/li\u003e\n\u003cli\u003eTest cases should be easy to read and understand. This means that they should be well-structured and use clear, descriptive names for variables and methods.\u003c/li\u003e\n\u003cli\u003eTest code is still code. It should follow the same standards as production code (e.g., DRY, KISS principles).\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id="523-steps"\u003e5.2.3 Steps\u003c/h3\u003e\n\u003cp\u003eTo write unit tests in the Frappe framework, you can follow these steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eStart by creating a new file for your tests. In Frappe, unit tests can be placed in a \u003ccode\u003etests\u003c/code\u003e directory within an app or inside a doctype\u0026rsquo;s directory. For example, if you are writing tests for the \u003ccode\u003efrappe\u003c/code\u003e app, you would create a new file called \u003ccode\u003etests/test_my_module.py\u003c/code\u003e (or \u003ccode\u003emy_doctype/test_my_doctype.py\u003c/code\u003e if you are testing a doctype).\u003c/li\u003e\n\u003cli\u003eImport the \u003ccode\u003eunittest\u003c/code\u003e module and the app module that you want to test. For example:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eimport unittest\nfrom my_module import my_module_function\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003e\n\u003cp\u003eNext, create a new class for your tests, which will be derived from the \u003ccode\u003eunittest.TestCase\u003c/code\u003e class. This class will contain all of the tests for your module or doctype.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWithin the \u003ccode\u003eTestCase\u003c/code\u003e subclass, you can now define individual test methods. Each test method should be named starting with \u003ccode\u003etest_\u003c/code\u003e, and should contain one or more assertions that test a specific behavior of the code being tested.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eHere is an example of how this might look in the \u003ccode\u003etest_my_module.py\u003c/code\u003e file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eimport unittest\nfrom my_module import my_module_function\n\nclass TestMyModule(unittest.TestCase):\n    def setUp(self):\n        frappe.set_user(\u0026quot;Administrator\u0026quot;)\n        create_test_data()\n\n    def tearDown(self):\n        frappe.set_user(\u0026quot;Administrator\u0026quot;)\n        delete_test_data()\n\n    def test_my_module_function(self):\n        # Test code goes here\n        frappe.set_user(\u0026quot;test@example.com\u0026quot;)\n        self.assertEqual(my_module_function(), \u0026quot;expected output\u0026quot;)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003esetUp\u003c/code\u003e function is used to perform any necessary setup tasks before unit tests within a \u003ccode\u003eTestCase\u003c/code\u003e class are run. This can include things like opening database connections, creating temporary files, or modifying global state in a way that is necessary for the test to run properly.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003etearDown\u003c/code\u003e function is used to perform any necessary clean up tasks after unit tests within a \u003ccode\u003eTestCase\u003c/code\u003e class are run. This can include things like closing any open database connections, cleaning up temporary files, or restoring any modified global state.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003esetUp\u003c/code\u003e and \u003ccode\u003etearDown\u003c/code\u003e functions are both optional, and you only need to use them if your tests require some kind of setup or cleanup. In most cases, it is a good idea to use these functions to make your tests more modular and easier to maintain.\u003c/p\u003e\n\u003col start="5"\u003e\n\u003cli\u003eOnce you have written your tests, you can run them using the \u003ccode\u003ebench\u003c/code\u003e command-line tool from within the app\u0026rsquo;s directory. This will execute all of the test cases and display the results.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ebench run-tests\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: Testing is disabled by default. You can enable tests by entering following command:\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ebench --site site_name set-config allow_tests true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat\u0026rsquo;s it! These are the basic steps for writing and running unit tests in the Frappe framework. Keep in mind that there are many other features and options available for unit testing in Frappe, so you may want to consult the \u003ca href="https://frappeframework.com/docs/v13/user/en/guides/automated-testing/unit-testing"\u003eofficial Frappe documentation\u003c/a\u003e for more information.\u003c/p\u003e\n\u003ch3 id="524-additional-reminders-and-tips"\u003e5.2.4 Additional Reminders and Tips\u003c/h3\u003e\n\u003cp\u003eA few things to remember when writing unit tests:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAs much as possible, avoid using default document names (e.g., \u003ccode\u003e_Test Item\u003c/code\u003e). Create documents with names specific to the unit test to ensure that the attributes of the item are those known by the unit test. One way to do this is to use the test name when creating the document (e.g., \u003ccode\u003e_Test Item test_deduct_item_discounts_from_item_amounts\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eAvoid deleting documents and transactions to avoid errors when deleting documents linked to other documents.\u003c/li\u003e\n\u003cli\u003eStart with a small, well-defined task. This will help you focus on the task at hand and avoid getting overwhelmed.\u003c/li\u003e\n\u003cli\u003eWrite a test for the task before you write the code. This will help you understand the requirements and constraints of the task, and it will give you a clear goal to work towards.\u003c/li\u003e\n\u003cli\u003eWrite the minimum amount of code needed to make the test pass. This will help you avoid over-engineering and keep your code simple and focused.\u003c/li\u003e\n\u003cli\u003eRefactor your code to improve its design and readability. This will help you make your code more maintainable and easier to understand.\u003c/li\u003e\n\u003cli\u003eRepeat the process for each new feature or task you want to implement. This will help you build a suite of tests that will give you confidence in the correctness and completeness of your code.\u003c/li\u003e\n\u003cli\u003eBe persistent and keep practicing. Test-driven development can be challenging at first, but it becomes easier and more natural with time and practice.\u003c/li\u003e\n\u003cli\u003eTo make sure your test data doesn\u0026rsquo;t mess with the real data in your ERPNext instance, run the tests on a separate test site with the necessary apps installed. (Tip: You can check the \u003ccode\u003erun_tests.sh\u003c/code\u003e file under the erpnext repo for the steps taken to run all BizKit-updated tests.)\u003c/li\u003e\n\u003cli\u003eAvoid editing the setup methods without making sure that all updated tests run correctly with your proposed change. Additionally, as much as possible, only include required fields in the parameters in the \u003ccode\u003ecreate\u003c/code\u003e methods.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id="6-running-unit-tests"\u003e6 Running Unit Tests\u003c/h1\u003e\n\u003cp\u003eThis is the \u003cem\u003eexciting\u003c/em\u003e part! (lol is it really)\u003c/p\u003e\n\u003cp\u003eFollow these steps when running unit tests in your local instance:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eRun your unit tests individually first (using the \u003ccode\u003e--test\u003c/code\u003e flag).\u003c/li\u003e\n\u003cli\u003eOnce all your unit tests have passed individually, run the whole module/DocType if possible (using the \u003ccode\u003e--doctype\u003c/code\u003e or \u003ccode\u003e--module\u003c/code\u003e flag).\u003c/li\u003e\n\u003cli\u003eIf all tests pass as well, run all BizKit-updated tests (using the \u003ccode\u003ebench run-bizkit-tests\u003c/code\u003e command). Make sure that your new tests are accounted for in the \u003ccode\u003eupdated_doctypes.txt\u003c/code\u003e and/or \u003ccode\u003eupdated_modules.txt\u003c/code\u003e file.\u003c/li\u003e\n\u003cli\u003eIf you encounter no errors while running all BizKit-updated tests, you\u0026rsquo;re \u003cstrong\u003e#MarkedAsSafe\u003c/strong\u003e!\u003c/li\u003e\n\u003c/ol\u003e\n'},{id:5,href:"/docs/standards/code-review-guidelines/",title:"Code Review Guidelines",description:"Know more about our code review guidelines when reviewing pull requests.",content:'\u003ch1 id="1-overview"\u003e1 Overview\u003c/h1\u003e\n\u003ch2 id="11-definition"\u003e1.1 Definition\u003c/h2\u003e\n\u003cp\u003eThe \u003cstrong\u003ecode review\u003c/strong\u003e is a software quality assurance activity where one or several people check another developer’s work by reviewing their source code. This is done after implementation but before it is merged to the main codebase.\u003c/p\u003e\n\u003ch2 id="12-purpose"\u003e1.2 Purpose\u003c/h2\u003e\n\u003cp\u003eThe purpose of code reviews are to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eImprove code quality\u003c/em\u003e – improve internal code maintainability, readability, uniformity, understandability, etc.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eFind defects\u003c/em\u003e – find and fix performance problems, security vulnerabilities, etc.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eFacilitate learning and knowledge transfer\u003c/em\u003e – transfer knowledge and expectations about the codebase, approaches, quality, etc.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eShare mutual responsibility\u003c/em\u003e – foster a sense of collective code ownership\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eFind better solutions\u003c/em\u003e – generate ideas for new and better solutions that can improve the codebase\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="13-process-overview"\u003e1.3 Process Overview\u003c/h2\u003e\n\u003cp\u003eThere are two (2) participants in a code review: (1) the \u003cstrong\u003eauthor\u003c/strong\u003e, who writes the code and sends it for review, and (2) the \u003cstrong\u003ereviewer\u003c/strong\u003e, who checks the code and decides whether it should be merged to the codebase.\u003c/p\u003e\n\u003cp\u003eTo start a code review, the author creates a \u003cstrong\u003epull request\u003c/strong\u003e from their branch into the repository’s main branch. The pull request’s description must contain a \u003cstrong\u003echangelist\u003c/strong\u003e which contains the set of changes made and why they were made.\u003c/p\u003e\n\u003cp\u003eCode reviews happen in \u003cstrong\u003erounds\u003c/strong\u003e. Each round is one complete round-trip between the author and reviewer: the author sends changes, and the reviewer responds with written feedback on those changes. Every code review has one or more rounds.\u003c/p\u003e\n\u003cp\u003eThe review ends when the reviewer \u003cstrong\u003eapproves\u003c/strong\u003e the changes and merges it to the main branch.\u003c/p\u003e\n\u003cp\u003e(The above process description was adapted from \u003ca href="https://mtlynch.io/human-code-reviews-1/"\u003eHow to Do Code Reviews Like a Human (Part One)\u003c/a\u003e.)\u003c/p\u003e\n\u003ch2 id="14-git-strategy"\u003e1.4 Git Strategy\u003c/h2\u003e\n\u003cp\u003eWe have developed a \u003ca href="https://docs.google.com/presentation/d/1Y74gyc_yYdNnXHGdDB3Z87t6m2nYaV2FPzA8b_DH0CE/"\u003eGit branching strategy\u003c/a\u003e at BizKit to standardize how we work together. Please review it if you haven\u0026rsquo;t yet before starting development.\u003c/p\u003e\n\u003ch2 id="15-detailed-steps"\u003e1.5 Detailed Steps\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eThe author writes the code.\u003c/li\u003e\n\u003cli\u003eThe author creates a pull request from their branch to the repository’s develop branch.\u003c/li\u003e\n\u003cli\u003eThe author assigns two (2) reviewers to check their code.\u003c/li\u003e\n\u003cli\u003eThe author notifies the reviewers by creating a thread in the \u003ccode\u003e#pull-requests\u003c/code\u003e channel of our Discord server. Follow the following format:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003e[open] [your-name] repo-name pull-request-number\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003e[open] [kevin] erpnext 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMake sure to tag your reviewers and provide a link to your pull requests in the thread message.\u003c/p\u003e\n\u003col start="5"\u003e\n\u003cli\u003eThe reviewers review the code and provide feedback or comments using the repository host’s (as of the time of writing we’re using GitHub) built-in commenting tool.\u003c/li\u003e\n\u003cli\u003eOnce the reviewers are done, they notify the author to check the feedback or comments they made through the PR thread on Discord.\u003c/li\u003e\n\u003cli\u003eThe author implements fixes or requests or provides explanations on questions.\u003c/li\u003e\n\u003cli\u003eOnce issues have been resolved, requests have been implemented, or pending questions have been answered, the author notifies the reviewer to recheck their code.\u003c/li\u003e\n\u003cli\u003eRepeat steps 5 - 8 until the reviewers are satisfied with the changes.\u003c/li\u003e\n\u003cli\u003eThe reviewers approve the pull request, squash merge the pull request, and then delete the feature branch.\u003c/li\u003e\n\u003cli\u003eThere are two (2) ways to close the Discord PR thread: (1) manually renaming the thread \u003ccode\u003eopen\u003c/code\u003e \u0026mdash;\u0026gt; \u003ccode\u003eclosed\u003c/code\u003e, and (2) calling the \u003ccode\u003e/close\u003c/code\u003e command within the thread itself.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id="16-affected-projects-and-repositories"\u003e1.6 Affected Projects and Repositories\u003c/h2\u003e\n\u003cp\u003eCode reviews are to be done for the following BizKit repositories when creating pull requests to the main branch:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFrappe\u003c/li\u003e\n\u003cli\u003eERPNext\u003c/li\u003e\n\u003cli\u003eBench\u003c/li\u003e\n\u003cli\u003eBizKit Core\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id="2-author-guidelines"\u003e2 Author Guidelines\u003c/h1\u003e\n\u003ch2 id="21-role"\u003e2.1 Role\u003c/h2\u003e\n\u003cp\u003eThe role of the author is to write the code, test it to the best of their ability, and ensure that it follows best practices and coding standards. Note that even though reviewers are expected to test the author’s code, the author should still test their code prior to submitting a pull request.\u003c/p\u003e\n\u003cp\u003eAuthors initiate the code review process by creating a pull request from their branch to the repository’s main branch. Once the pull request is made, they assign two (2) reviewers to check their code.\u003c/p\u003e\n\u003cp\u003eIt is also their responsibility to implement any changes or improvements requested by their reviewers. But it is also possible that the reviewers are wrong—just as one can accidentally write buggy code, the reviewer may also misunderstand correct code. As such, authors are free to push back on any change requests if they feel that it is incorrect.\u003c/p\u003e\n\u003cp\u003eBut even when the reviewer is wrong, the author must still exercise a level of caution. If they misread it, will others make the same mistake? This could possibly mean that the code is hard to understand or may require some changes to make it clearer. The author may look for ways to refactor the code or add comments that make the code more obviously correct.\u003c/p\u003e\n\u003ch2 id="22-important-reminders"\u003e2.2 Important Reminders\u003c/h2\u003e\n\u003ch3 id="221-value-the-reviewers-time"\u003e2.2.1 Value the Reviewer’s Time\u003c/h3\u003e\n\u003cp\u003eRemember that reviewers have their own tasks as well and are taking time off of them to help out and improve the code. They have a limited amount of focus and energy and so it would be in everyone’s best interests to make things as easy and as smooth as possible.\u003c/p\u003e\n\u003ch3 id="222-be-the-first-to-review"\u003e2.2.2 Be the First to Review\u003c/h3\u003e\n\u003cp\u003eReviewers are not personal quality assurance analysts nor testers. Before submitting our code for review, we must ensure that we’ve checked and tested it to the best of our abilities. It is a waste of everyone’s time to submit faulty or untested code for review.\u003c/p\u003e\n\u003cp\u003eIt is a good practice to read our code first before submitting it. More than just checking for mistakes, we should imagine if it wasn’t us that wrote it and we’re reading it for the first time. What might confuse us?\u003c/p\u003e\n\u003cp\u003eIt can also be helpful to take a break between writing code and reviewing it. We’re often tired by the end of a long coding session and that makes it easier for us to miss glaring issues. We can wait for a bit and look at our code with fresh eyes before submitting it for review.\u003c/p\u003e\n\u003ch3 id="223-write-a-clear-changelist-description"\u003e2.2.3 Write a Clear Changelist Description\u003c/h3\u003e\n\u003cp\u003eThe changelist description should summarize any information that the reviewer needs. We have to remember that the person looking at the code might not have the same context that we have. Think of having future readers look at the description. Will they be able to understand it without having to talk to us?\u003c/p\u003e\n\u003cp\u003eA good changelist description explains \u003cstrong\u003ewhat\u003c/strong\u003e changes were made at a high level and \u003cstrong\u003ewhy\u003c/strong\u003e they were made.\u003c/p\u003e\n\u003ch3 id="224-commit-clearly-and-commit-often"\u003e2.2.4 Commit Clearly and Commit Often\u003c/h3\u003e\n\u003cp\u003eThe same rules for changelists apply to commit messages. One should be able to easily understand the changes made in a single commit even when they have no background knowledge.\u003c/p\u003e\n\u003cp\u003eCommitting often and in smaller chunks highlights the changes made and also makes it easier to review code. At the same time, this makes it easier to revert changes if needed.\u003c/p\u003e\n\u003ch3 id="225-break-up-large-changes"\u003e2.2.5 Break up Large Changes\u003c/h3\u003e\n\u003cp\u003eFor our, and our reviewers’, benefit, it would be best to break up large changes into smaller, multiple changes and pull requests. Sending in too many changes at once can make it harder to review code and easier to let issues pass. This can also be a sign of poorly separated tasks or features.\u003c/p\u003e\n\u003cp\u003eAs much as possible, a single pull request or change should aim to add or change just one thing.\u003c/p\u003e\n\u003ch3 id="226-learn-from-mistakes"\u003e2.2.6 Learn From Mistakes\u003c/h3\u003e\n\u003cp\u003eRemember that more than catching errors, the goal of code reviews is to improve the overall code quality and capacity of developers. If we make mistakes or the reviewers provide us feedback for improvement, it’d be in our best interest to learn from them and apply them to make our next code review smoother and make ourselves better.\u003c/p\u003e\n\u003ch1 id="3-reviewer-guidelines"\u003e3 Reviewer Guidelines\u003c/h1\u003e\n\u003ch2 id="31-role"\u003e3.1 Role\u003c/h2\u003e\n\u003cp\u003eThe role of the reviewer is to check the author’s submitted code, test it to the best of their ability, and ensure that it follows best practices and coding standards. Reviewers have a right to request changes or improvements to the author’s code provided that it contributes to the overall quality of the code.\u003c/p\u003e\n\u003cp\u003eOnce the reviewer is satisfied with the author’s work, they approve the pull request and merge it to the main codebase.\u003c/p\u003e\n\u003ch2 id="32-things-to-check"\u003e3.2 Things to Check\u003c/h2\u003e\n\u003cp\u003eBelow is a checklist of the things that reviewers should check for and ask themselves during code reviews:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAm I able to \u003cstrong\u003eunderstand\u003c/strong\u003e the code easily?\u003c/li\u003e\n\u003cli\u003eIs the code written following the \u003cstrong\u003ecoding standards/guidelines\u003c/strong\u003e?\u003c/li\u003e\n\u003cli\u003eIs the same code \u003cstrong\u003eduplicated\u003c/strong\u003e more than twice?\u003c/li\u003e\n\u003cli\u003eWill I be able to \u003cstrong\u003etest/debug\u003c/strong\u003e the code easily to find the root cause?\u003c/li\u003e\n\u003cli\u003eAre functions or classes \u003cstrong\u003etoo big\u003c/strong\u003e? Do they have \u003cstrong\u003etoo many responsibilities\u003c/strong\u003e?\u003c/li\u003e\n\u003cli\u003eWill the \u003cstrong\u003eperformance\u003c/strong\u003e be acceptable with huge data?\u003c/li\u003e\n\u003cli\u003eHas \u003cstrong\u003esecurity\u003c/strong\u003e been taken care of?\u003c/li\u003e\n\u003cli\u003eHow \u003cstrong\u003emaintainable\u003c/strong\u003e is the code? Will it require minimal effort to support/update in the future?\u003c/li\u003e\n\u003cli\u003eHow \u003cstrong\u003eextensible\u003c/strong\u003e is the code? Will it be easy to add enhancements in the future?\u003c/li\u003e\n\u003cli\u003eWhat did the author \u003cstrong\u003eget right\u003c/strong\u003e? Give the author some wins!\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="33-important-reminders"\u003e3.3 Important Reminders\u003c/h2\u003e\n\u003ch3 id="331-a-human-is-on-the-other-side"\u003e3.3.1 A Human Is on the Other Side\u003c/h3\u003e\n\u003cp\u003eIt can be easy to forget that the author is another human when we’re communicating through comments or only looking at their code. But we must remember that there is still a human on the other side with their own goals, issues, and feelings.\u003c/p\u003e\n\u003cp\u003eAs a reviewer, we are an \u003cstrong\u003eally\u003c/strong\u003e, not a gatekeeper. While the goal of code reviews is to improve the quality of the code, it is not worth sacrificing a relationship with a teammate just to push for better variable naming.\u003c/p\u003e\n\u003cp\u003eEspecially when we’re working through the medium of chat, it’s easier to be misunderstood or sound harsh. And so we must walk a fine line between pushing for improvements and taking care of our relationships.\u003c/p\u003e\n\u003cp\u003eRemember to be sensitive to what the author might feel when making comments and providing feedback. If we can do that then the succeeding reminders will be easy to follow.\u003c/p\u003e\n\u003ch3 id="332-frame-feedback-as-requests-not-commands"\u003e3.3.2 Frame Feedback as Requests, Not Commands\u003c/h3\u003e\n\u003cp\u003eCompare the following feedback:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eFeedback Framed as Command\u003c/th\u003e\n\u003cth\u003eFeedback Framed as Request\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eMove this function to \u003cem\u003etransaction.js\u003c/em\u003e.\u003c/td\u003e\n\u003ctd\u003eCan we move this function to \u003cem\u003etransaction.js\u003c/em\u003e?\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eWhich one sounds more helpful or collaborative?\u003c/p\u003e\n\u003cp\u003eJust like how reviewers are not the authors’ personal testers, authors are not personal code writers. Though we are reviewing their code, it is still their work. Framing feedback as requests instead of commands has the author feel a sense of autonomy and control over their own work.\u003c/p\u003e\n\u003cp\u003eFraming feedback as requests also allows the authors to push back in case we are wrong. Maybe the authors have a good reason for writing their code as such or making that choice. If the feedback is framed as a command, any response from the author sounds like they’re disobeying. On the other hand, if it’s a request or a question, the author is simply answering.\u003c/p\u003e\n\u003ch3 id="333-provide-examples-if-possible"\u003e3.3.3 Provide Examples if Possible\u003c/h3\u003e\n\u003cp\u003eWe all have other tasks. It is highly possible that the code we’re reviewing isn’t the only thing that the author is working on. So if we have the time to spare, it would be helpful to provide them examples of the change we’re requesting.\u003c/p\u003e\n\u003cp\u003eOf course, this has its limits. This is better for smaller, more trivial segments of code. But if we suddenly provide a complete, overhauled solution of the author’s code then it signals that we think they’re incompetent or can’t do their job well.\u003c/p\u003e\n\u003ch3 id="334-avoid-using-you"\u003e3.3.4 Avoid Using “You”\u003c/h3\u003e\n\u003cp\u003eIt’s easy to get attached to our work. The same goes for code. The author put a significant amount of effort into their code and is likely to be proud of it. It is only natural that they’d be attached to it and would react defensively against any feedback they receive.\u003c/p\u003e\n\u003cp\u003eAnd so we must provide feedback in a way that lowers those defenses. Remember that we’re reviewing the code and not the author. The presence of bugs in code does not and should not indicate the lack of skill or intelligence of a developer.\u003c/p\u003e\n\u003cp\u003eHaving “you” in comments tends to bring the focus away from the code and brings it to the coder, thereby increasing the chances of them being antagonistic about it.\u003c/p\u003e\n\u003cp\u003eInstead, we can resort to using \u003cstrong\u003e“we”\u003c/strong\u003e. For example, instead of saying, “Can you move this function to \u003cem\u003etransaction.js\u003c/em\u003e?” we can say, “Can we move this function to \u003cem\u003etransaction.js\u003c/em\u003e?” Doing so reinforces the team’s collective responsibility for the code.\u003c/p\u003e\n\u003cp\u003eGoing back to \u003ca href="/docs/standards/code-review-guidelines/#332-frame-feedback-as-requests-not-commands"\u003e3.3.2 Frame Feedback as Requests, Not Commands\u003c/a\u003e, it is also a good idea to use questions.\u003c/p\u003e\n\u003cp\u003eAnother option is to write in a \u003cstrong\u003epassive voice\u003c/strong\u003e. While this means death for almost any kind of writing, we aren’t writing for journals or blogs here. “This function can be moved to \u003cem\u003etransaction.js\u003c/em\u003e.” sounds less antagonistic than, “You should move this function to \u003cem\u003etransaction.js\u003c/em\u003e.”\u003c/p\u003e\n\u003ch3 id="335-learn-from-the-author"\u003e3.3.5 Learn From the Author\u003c/h3\u003e\n\u003cp\u003eWhile the role of the reviewer is to check the author’s code and provide feedback for improvement, that doesn’t mean that the reviewer can’t learn from the author as well. Take note of the things that the author did well, praise them for it, and also learn from it.\u003c/p\u003e\n\u003cp\u003eAgain, code reviews are meant to facilitate learning and knowledge transfer and so they are also opportunities for the reviewers to learn.\u003c/p\u003e\n\u003ch1 id="4-final-reminders"\u003e4 Final Reminders\u003c/h1\u003e\n\u003cp\u003ePlease note that this process is still open to improvements. Just this because it’s on a document doesn’t mean it’s perfect. So if you, the reader, have any feedback or comments that you think will improve the overall process or requirements, please don’t hesitate to let us know.\u003c/p\u003e\n'},{id:6,href:"/docs/standards/coding-standards/",title:"Coding Standards",description:"Know more about our coding standards at BizKit.",content:'\u003ch1 id="1-background"\u003e1 Background\u003c/h1\u003e\n\u003cp\u003eWhen multiple developers work together on a single repository, code consistency can often suffer. This is why it is important to define coding standards to ensure the consistency and maintainability of the codebase across different teams and developers.\u003c/p\u003e\n\u003ch2 id="11-formatters"\u003e1.1 Formatters\u003c/h2\u003e\n\u003cp\u003eFormatters make it easier to keep code consistent. They can automatically format code to follow a set of standards or settings.\u003c/p\u003e\n\u003ch3 id="111-python-formatter"\u003e1.1.1 Python Formatter\u003c/h3\u003e\n\u003cp\u003eFor Python, we use the \u003ca href="https://pypi.org/project/black/"\u003eblack\u003c/a\u003e formatter. The reason for this is that \u003ccode\u003eblack\u003c/code\u003e is uncompromising and will keep everything consistent without need for any other config or settings files.\u003c/p\u003e\n\u003cp\u003eTo install \u003ccode\u003eblack\u003c/code\u003e, run:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003epip install black\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce done, you can call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eblack \u0026lt;source_file_or_directory\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand \u003ccode\u003eblack\u003c/code\u003e will take care of everything.\u003c/p\u003e\n\u003cp\u003eYou may also configure \u003ccode\u003eblack\u003c/code\u003e to automatically run after every save in the Visual Studio Code editor. To do so, make sure you have the \u003ca href="https://marketplace.visualstudio.com/items?itemName=ms-python.python"\u003ePython extension\u003c/a\u003e installed and then enable \u003cstrong\u003eEditor: Format on Save\u003c/strong\u003e and set the \u003cstrong\u003ePython \u0026gt; Formatting: Provider\u003c/strong\u003e to \u003ccode\u003eblack\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id="112-javascript-formatter"\u003e1.1.2 JavaScript Formatter\u003c/h3\u003e\n\u003cp\u003eFor JavaScript, we use the \u003ca href="https://prettier.io/"\u003eprettier\u003c/a\u003e formatter with the following configurations:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e{\n  \u0026quot;arrowParens\u0026quot;: \u0026quot;always\u0026quot;,\n  \u0026quot;bracketSpacing\u0026quot;: true,\n  \u0026quot;trailingComma\u0026quot;: \u0026quot;es5\u0026quot;,\n  \u0026quot;tabWidth\u0026quot;: 4,\n  \u0026quot;semi\u0026quot;: true,\n  \u0026quot;singleQuote\u0026quot;: false\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you are using the Visual Studio Code editor, then the easiest way to configure and use \u003ccode\u003eprettier\u003c/code\u003e is to install \u003ca href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"\u003ethis extension\u003c/a\u003e and set the above configurations from the editor’s settings page.\u003c/p\u003e\n\u003cp\u003eYou may also copy and paste this code into your Visual Studio Code settings file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e\u0026quot;prettier.arrowParens\u0026quot;: \u0026quot;always\u0026quot;,\n\u0026quot;prettier.bracketSpacing\u0026quot;: true,\n\u0026quot;prettier.trailingComma\u0026quot;: \u0026quot;es5\u0026quot;,\n\u0026quot;prettier.tabWidth\u0026quot;: 4,\n\u0026quot;prettier.semi\u0026quot;:true,\n\u0026quot;prettier.singleQuote\u0026quot;: false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOtherwise, you may install \u003ccode\u003eprettier\u003c/code\u003e on a per project basis using the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm install --save-dev --save-exact prettier\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen create a \u003ccode\u003e.prettierrc.json\u003c/code\u003e config file with the above configurations.\u003c/p\u003e\n\u003cp\u003eWith that done, you can format a file by running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpx prettier --write \u0026lt;source_file_or_directory\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="12-linters"\u003e1.2 Linters\u003c/h2\u003e\n\u003cp\u003eWhile a linter is no longer absolutely necessary once formatters are used, they can still catch some possible styling improvements that aren’t always caught by formatters.\u003c/p\u003e\n\u003ch3 id="121-python-linter"\u003e1.2.1 Python Linter\u003c/h3\u003e\n\u003cp\u003eFor Python, we use a combination of the \u003ca href="https://flake8.pycqa.org/en/latest/"\u003eflake8\u003c/a\u003e and \u003ca href="http://mypy-lang.org/"\u003emypy\u003c/a\u003e linters.\u003c/p\u003e\n\u003cp\u003eTo install them, run:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003epip install flake8 mypy flake8-mypy\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLinters are best used in conjunction with a code editor so to enable them on the Visual Studio Code editor, make sure you have the \u003ca href="https://marketplace.visualstudio.com/items?itemName=ms-python.python"\u003ePython extension\u003c/a\u003e installed and then have the following settings enabled:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePython \u0026gt; Linting: Enabled\u003c/li\u003e\n\u003cli\u003ePython \u0026gt; Linting: Flake8 Enabled\u003c/li\u003e\n\u003cli\u003ePython \u0026gt; Linting: Mypy Enabled\u003c/li\u003e\n\u003cli\u003ePython \u0026gt; Linting: Lint On Save\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id="2-python-language-rules"\u003e2 Python Language Rules\u003c/h1\u003e\n\u003ch2 id="21-imports"\u003e2.1 Imports\u003c/h2\u003e\n\u003cp\u003ePrefer importing packages and modules over individual classes and functions. This makes it easier to compartmentalize external classes and functions into their respective packages.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eimport package.module\nfrom package import module\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003efrom package.module import (\n    classA, classB, functionC, constantD, functionE\n)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNEVER use \u003ccode\u003e*\u003c/code\u003e (wildcard) imports.\u003c/p\u003e\n\u003cp\u003eAlso avoid function-level imports.\u003c/p\u003e\n\u003cp\u003eFor modules or packages with long names, use the as statement to shorten it and make the code more readable. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eimport longername as ln\nimport module.with.a.really.long.name as mwarln\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="22-exceptions"\u003e2.2 Exceptions\u003c/h2\u003e\n\u003cp\u003eNever use catch-all \u003ccode\u003eexcept:\u003c/code\u003e statements, or catch \u003ccode\u003eException\u003c/code\u003e or \u003ccode\u003eStandardError\u003c/code\u003e. Python is very tolerant when using this and we may end up missing certain scenarios that we don’t want to be caught like incorrect variable names or \u003ccode\u003eCtrl+C\u003c/code\u003e interrupts.\u003c/p\u003e\n\u003cp\u003eMinimize the amount of code in a \u003ccode\u003etry\u003c/code\u003e/\u003ccode\u003eexcept\u003c/code\u003e block. The larger the body of the \u003ccode\u003etry\u003c/code\u003e, the more likely that an exception will be raised by a line of code that you didn’t expect to raise an exception. In those cases, the \u003ccode\u003etry\u003c/code\u003e/\u003ccode\u003eexcept\u003c/code\u003e block hides a real error.\u003c/p\u003e\n\u003cp\u003eUse the \u003ccode\u003efinally\u003c/code\u003e clause to execute code whether or not an exception is raised in the \u003ccode\u003etry\u003c/code\u003e block. This is often useful for cleanup, i.e., closing a file.\u003c/p\u003e\n\u003ch2 id="23-truefalse-evaluations"\u003e2.3 True/False Evaluations\u003c/h2\u003e\n\u003cp\u003eUse the “implicit” false if at all possible (e.g., \u003ccode\u003eif foo:\u003c/code\u003e rather than \u003ccode\u003eif len(foo):\u003c/code\u003e). They’re easier to read and less error-prone.\u003c/p\u003e\n\u003cp\u003eAlways use \u003ccode\u003eif foo is None:\u003c/code\u003e (or \u003ccode\u003eis not None\u003c/code\u003e) to check for a \u003ccode\u003eNone\u003c/code\u003e value. This is especially important, when testing whether a variable or argument that defaults to \u003ccode\u003eNone\u003c/code\u003e was set to some other value. The other value might be a value that’s false in a boolean context.\u003c/p\u003e\n\u003cp\u003eNever compare a boolean variable to \u003ccode\u003eFalse\u003c/code\u003e using \u003ccode\u003e==\u003c/code\u003e. Use \u003ccode\u003eif not x:\u003c/code\u003e instead. If you need to distinguish \u003ccode\u003eFalse\u003c/code\u003e from \u003ccode\u003eNone\u003c/code\u003e then chain the expressions, such as \u003ccode\u003eif not x and x is not None:\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFor sequences (strings, lists, tuples), use the fact that empty sequences are false, so \u003ccode\u003eif seq:\u003c/code\u003e and \u003ccode\u003eif not seq:\u003c/code\u003e are preferable to \u003ccode\u003eif len(seq):\u003c/code\u003e and \u003ccode\u003eif not len(seq):\u003c/code\u003e respectively.\u003c/p\u003e\n\u003cp\u003eNote that when handling integers, implicit false may involve more risk than benefit (i.e., accidentally handling \u003ccode\u003eNone\u003c/code\u003e as 0). In these cases, it is okay to compare a value which is known to be an integer (and is not the result of \u003ccode\u003elen()\u003c/code\u003e) against the integer 0. Also note that \u003ccode\u003e\u0026quot;0\u0026quot;\u003c/code\u003e (i.e., \u003ccode\u003e0\u003c/code\u003e as string) evaluates to true.\u003c/p\u003e\n\u003ch1 id="3-python-style-rules"\u003e3 Python Style Rules\u003c/h1\u003e\n\u003ch2 id="31-semicolons"\u003e3.1 Semicolons\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eNEVER.\u003c/strong\u003e Don’t even think about it.\u003c/p\u003e\n\u003ch2 id="32-line-length"\u003e3.2 Line Length\u003c/h2\u003e\n\u003cp\u003eMaximum line length is \u003cem\u003e80 characters\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eExplicit exceptions to the 80 character limit:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLong import statements.\u003c/li\u003e\n\u003cli\u003eURLs, pathnames, or long flags in comments.\u003c/li\u003e\n\u003cli\u003eLong string module level constants not containing whitespace that would be inconvenient to split across lines such as URLs or pathnames.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAvoid using backslash line continuation.\u003c/p\u003e\n\u003ch2 id="33-parentheses"\u003e3.3 Parentheses\u003c/h2\u003e\n\u003cp\u003eUse parentheses sparingly.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eif foo:\n    bar()\n\nif not foo:\n    bar()\n\nwhile foo:\n    bar()\n\nif x and y:\n    bar()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eif (foo):\n    bar()\n\nif not(foo):\n    bar()\n\nwhile (foo):\n    bar()\n\nif (x and y):\n    bar()\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="34-indentation"\u003e3.4 Indentation\u003c/h2\u003e\n\u003cp\u003eIndent your code blocks with \u003cem\u003e4 spaces\u003c/em\u003e. Never use tabs or mix tabs and spaces.\u003c/p\u003e\n\u003ch2 id="35-imports-formatting"\u003e3.5 Imports Formatting\u003c/h2\u003e\n\u003cp\u003eImports should be on separate lines. As much as possible, put them at the top of the file, just after any module comments and docstrings and before module globals and constants. Imports should be grouped from most generic to least generic or in the following order:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eStandard library imports\u003c/li\u003e\n\u003cli\u003eRelated third party imports\u003c/li\u003e\n\u003cli\u003eLocal application/library specific imports\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAlways put a blank line between each group of imports.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eimport collections\nimport queue\nimport sys\n\nfrom absl import app\nfrom absl import flags\nimport bs4\nimport cryptography\nimport tensorflow as tf\n\nfrom book.genres import scifi\nfrom myproject.backend import huxley\nfrom myproject.backend.hgwells import time_machine\nfrom myproject.backend.state_machine import main_loop\nfrom otherproject.ai import body\nfrom otherproject.ai import mind\nfrom otherproject.ai import soul\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="36-naming-conventions"\u003e3.6 Naming Conventions\u003c/h2\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003ePublic\u003c/th\u003e\n\u003cth\u003eInternal*\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ePackages\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eModules\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003ctd\u003e_lower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eClasses\u003c/td\u003e\n\u003ctd\u003ePascalCase\u003c/td\u003e\n\u003ctd\u003e_PascalCase\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExceptions\u003c/td\u003e\n\u003ctd\u003ePascalCase\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFunctions\u003c/td\u003e\n\u003ctd\u003elower_with_under()\u003c/td\u003e\n\u003ctd\u003e_lower_with_under()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eGlobal/Class Constants\u003c/td\u003e\n\u003ctd\u003eCAPS_WITH_UNDER\u003c/td\u003e\n\u003ctd\u003e_CAPS_WITH_UNDER\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eGlobal/Class Variables\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003ctd\u003e_lower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInstance Variables\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003ctd\u003e_lower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMethod Names\u003c/td\u003e\n\u003ctd\u003elower_with_under()\u003c/td\u003e\n\u003ctd\u003e_lower_with_under()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFunction/Method Parameters\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLocal Variables\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cem\u003e*Note: Internal means internal to a module, or protected or private within a class and should not be accessible outside of it.\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id="37-strings"\u003e3.7 Strings\u003c/h2\u003e\n\u003cp\u003eUse double quotes \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e for strings.\u003c/p\u003e\n\u003cp\u003eWhen a literal string won’t fit on a single line, use parentheses for implicit line joining.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003ex = (\n    \u0026quot;This will build a very long long \u0026quot;\n    \u0026quot;long long long long long long string.\u0026quot;\n)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003ex = \u0026quot;This will build a very long long \\\n    long long long long long long string.\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="38-whitespace"\u003e3.8 Whitespace\u003c/h2\u003e\n\u003cp\u003eFollow standard typographic rules for the use of spaces around punctuation.\u003c/p\u003e\n\u003cp\u003eNo whitespace inside parentheses, brackets or braces.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003espam(ham[1], {eggs: 2}, [])\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003espam( ham[ 1 ], { eggs: 2 }, [ ] )\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNo whitespace before a comma, semicolon, or colon. Do use whitespace after a comma, semicolon, or colon, except at the end of the line.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eif x == 4:\n    print(x, y)\n    x, y = y, x\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eif x == 4 :\n    print(x , y)\n    x , y = y , x\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNo whitespace before the open paren/bracket that starts an argument list, indexing or slicing.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003espam(1)\ndict[\'key\'] = list[index]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003espam (1)\ndict [\'key\'] = list [index]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSurround binary operators with a single space on either side for assignment (\u003ccode\u003e=\u003c/code\u003e), comparisons (\u003ccode\u003e==\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e!=\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;=\u003c/code\u003e, \u003ccode\u003e\u0026gt;=\u003c/code\u003e, \u003ccode\u003ein\u003c/code\u003e, \u003ccode\u003enot in\u003c/code\u003e, \u003ccode\u003eis\u003c/code\u003e, \u003ccode\u003eis not\u003c/code\u003e), and booleans (\u003ccode\u003eand\u003c/code\u003e, \u003ccode\u003eor\u003c/code\u003e, \u003ccode\u003enot\u003c/code\u003e). Use your better judgment for the insertion of spaces around arithmetic operators (\u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e-\u003c/code\u003e, \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e/\u003c/code\u003e, \u003ccode\u003e//\u003c/code\u003e, \u003ccode\u003e%\u003c/code\u003e, \u003ccode\u003e**\u003c/code\u003e, \u003ccode\u003e@\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003ex == 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003ex\u0026lt;1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNever use spaces around \u003ccode\u003e=\u003c/code\u003e when passing keyword arguments or defining a default parameter value.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003edef chewie(han, leia=True):\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003edef chewie(han, leia = True):\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="39-comments-and-docstrings"\u003e3.9 Comments and Docstrings\u003c/h2\u003e\n\u003ch3 id="391-docstrings"\u003e3.9.1 Docstrings\u003c/h3\u003e\n\u003cp\u003ePython uses docstrings to document code. A docstring is a string that is the first statement in a package, module, class or function. Always use the three double-quote \u003ccode\u003e\u0026quot;\u0026quot;\u0026quot;\u003c/code\u003e format for docstrings. The base format for a docstring includes a summary line (one physical line not exceeding 80 characters) terminated by a period, question mark, or exclamation point. When writing more (encouraged), this must be followed by a blank line, followed by the rest of the docstring starting at the same cursor position as the first quote of the first line.\u003c/p\u003e\n\u003ch3 id="392-modules"\u003e3.9.2 Modules\u003c/h3\u003e\n\u003cp\u003eEvery file should contain license boilerplate and should start with a docstring describing the contents and usage of the module.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003e\u0026quot;\u0026quot;\u0026quot;A one line summary of the module or program, terminated by a period.\n\nLeave one blank line.  The rest of this docstring should contain an\noverall description of the module or program.  Optionally, it may also\ncontain a brief description of exported classes and functions and/or usage\nexamples.\n\n    Typical usage example:\n\n        foo = ClassFoo()\n        bar = foo.FunctionBar()\n\u0026quot;\u0026quot;\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="393-functions-and-methods"\u003e3.9.3 Functions and Methods\u003c/h3\u003e\n\u003cp\u003eIn this section, “function” means a method, function, or generator.\u003c/p\u003e\n\u003cp\u003eA function must have a docstring, unless it meets all of the following criteria:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003enot externally visible\u003c/li\u003e\n\u003cli\u003every short\u003c/li\u003e\n\u003cli\u003eObvious\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA docstring should give enough information to write a call to the function without reading the function’s code. The docstring should be descriptive-style (\u003ccode\u003e\u0026quot;\u0026quot;\u0026quot;Fetches rows from a Bigtable.\u0026quot;\u0026quot;\u0026quot;\u003c/code\u003e) rather than imperative-style (\u003ccode\u003e\u0026quot;\u0026quot;\u0026quot;Fetch rows from a Bigtable.\u0026quot;\u0026quot;\u0026quot;\u003c/code\u003e). A docstring should describe the function’s calling syntax and its semantics, not its implementation. For tricky code, comments alongside the code are more appropriate than using docstrings.\u003c/p\u003e\n\u003cp\u003eA method that overrides a method from a base class may have a simple docstring sending the reader to its overridden method’s docstring, such as \u003ccode\u003e\u0026quot;\u0026quot;\u0026quot;See base class.\u0026quot;\u0026quot;\u0026quot;\u003c/code\u003e. The rationale is that there is no need to repeat in many places documentation that is already present in the base method’s docstring. However, if the overriding method’s behavior is substantially different from the overridden method, or details need to be provided (e.g., documenting additional side effects), a docstring with at least those differences is required on the overriding method.\u003c/p\u003e\n\u003cp\u003eCertain aspects of a function should be documented in special sections, listed below. Each section begins with a heading line, which ends with a colon. All sections other than the heading should maintain a hanging indent of two or four spaces (be consistent within a file). These sections can be omitted in cases where the function’s name and signature are informative enough that it can be aptly described using a one-line docstring.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eArgs:\u003c/strong\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eList each parameter by name. A description should follow the name, and be separated by a colon followed by either a space or newline. If the description is too long to fit on a single 80-character line, use a hanging indent of 2 or 4 spaces more than the parameter name (be consistent with the rest of the docstrings in the file). The description should include required type(s) if the code does not contain a corresponding type annotation. If a function accepts \u003ccode\u003e*foo\u003c/code\u003e (variable length argument lists) and/or \u003ccode\u003e**bar\u003c/code\u003e (arbitrary keyword arguments), they should be listed as \u003ccode\u003e*foo\u003c/code\u003e and \u003ccode\u003e**bar\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eReturns: (or Yields: for generators)\u003c/strong\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDescribe the type and semantics of the return value. If the function only returns \u003ccode\u003eNone\u003c/code\u003e, this section is not required. It may also be omitted if the docstring starts with Returns or Yields (e.g. \u003ccode\u003e\u0026quot;\u0026quot;\u0026quot;Returns row from Bigtable as a tuple of strings.\u0026quot;\u0026quot;\u0026quot;\u003c/code\u003e) and the opening sentence is sufficient to describe return value.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eRaises:\u003c/strong\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eList all exceptions that are relevant to the interface followed by a description. Use a similar exception name + colon + space or newline and hanging indent style as described in \u003cem\u003eArgs:\u003c/em\u003e. You should not document exceptions that get raised if the API specified in the docstring is violated (because this would paradoxically make behavior under violation of the API part of the API).\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003edef foo(a, b, c=True):\n    \u0026quot;\u0026quot;\u0026quot;Gives a sample docstring for a sample function.\n\n    This is where I provide a more concise description of the\n    function if necessary.\n\n    Args:\n        a: A list of strings.\n        b: The second parameter.\n        require_all_keys: Optional; If this is True, it\'ll do\n            something weird.\n\n    Returns:\n        A dict mapping keys to the corresponding stuff that was\n        fetched. Each row is represented as a tuple of strings. For\n        example:\n\n        {b\'Serak\': (\'Rigel VII\', \'Preparer\'),\n         b\'Zim\': (\'Irk\', \'Invader\'),\n         b\'Lrrr\': (\'Omicron Persei 8\', \'Emperor\')}\n\n        Returned keys are always bytes.  If a key from the keys\n        argument is missing from the dictionary, then that row was\n        not found in the table (and c must have been False).\n\n    Raises:\n        IOError: An error occurred accessing the data.\n    \u0026quot;\u0026quot;\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="394-classes"\u003e3.9.4 Classes\u003c/h3\u003e\n\u003cp\u003eClasses should have a docstring below the class definition describing the class. If your class has public attributes, they should be documented here in an Attributes section and follow the same formatting as a \u003ca href="/docs/standards/coding-standards/#393-functions-and-methods"\u003efunction’s Args\u003c/a\u003e section.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eclass SampleClass:\n    \u0026quot;\u0026quot;\u0026quot;Summary of class here.\n\n    Longer class information....\n    Longer class information....\n\n    Attributes:\n        likes_spam: A boolean indicating if we like SPAM or not.\n        eggs: An integer count of the eggs we have laid.\n    \u0026quot;\u0026quot;\u0026quot;\n\n    def __init__(self, likes_spam=False):\n        \u0026quot;\u0026quot;\u0026quot;Inits SampleClass with blah.\u0026quot;\u0026quot;\u0026quot;\n        self.likes_spam = likes_spam\n        self.eggs = 0\n\n    def public_method(self):\n        \u0026quot;\u0026quot;\u0026quot;Performs operation blah.\u0026quot;\u0026quot;\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="395-block-and-inline-comments"\u003e3.9.5 Block and Inline Comments\u003c/h3\u003e\n\u003cp\u003eThe final place to have comments is in tricky parts of the code. If you’re going to have to explain it at the next \u003ca href="/docs/standards/code-review-guidelines/"\u003ecode review\u003c/a\u003e, you should comment it now. But never describe the code. Assume the person reading the code knows Python (though not what you’re trying to do) better than you do.\u003c/p\u003e\n\u003cp\u003eFor complicated operations, add a few lines of comments before the operations commence.\u003c/p\u003e\n\u003cp\u003eUse inline comments sparingly for non-obvious operations. Inline comments should start at least 2 spaces away from the code with the comment character \u003ccode\u003e#\u003c/code\u003e, followed by at least one space before the text of the comment itself.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003e# We use a weighted dictionary search to find out where i is in\n# the array.  We extrapolate position based on the largest num\n# in the array and the array size and then do binary search to\n# get the exact number.\n\nif i \u0026amp; (i-1) == 0:  # True if i is 0 or a power of 2.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch1 id="4-javascript-language-rules"\u003e4 JavaScript Language Rules\u003c/h1\u003e\n\u003ch2 id="41-equality-checks"\u003e4.1 Equality Checks\u003c/h2\u003e\n\u003cp\u003eWhen comparing, use \u003ccode\u003e===\u003c/code\u003e and \u003ccode\u003e!==\u003c/code\u003e over =\u003ccode\u003e=\u003c/code\u003e and \u003ccode\u003e!=\u003c/code\u003e. JavaScript is a dynamic language so using \u003ccode\u003e==\u003c/code\u003e might give unexpected results due to it allowing the type to be different.\u003c/p\u003e\n\u003ch2 id="42-truefalse-evaluations"\u003e4.2 True/False Evaluations\u003c/h2\u003e\n\u003cp\u003eUse shortcuts for booleans, but explicit comparisons for strings and numbers.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003eif (isValid) {\n  bar();\n}\n\nif (name !== \u0026quot;\u0026quot;) {\n  bar();\n}\n\nif (myArray.length \u0026gt; 0) {\n  bar();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003eif (isValid === true) {\n  bar();\n}\n\nif (name) {\n  bar();\n}\n\nif (myArray) {\n  bar();\n}\n\nif (myArray.length) {\n  bar();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="43-functions"\u003e4.3 Functions\u003c/h2\u003e\n\u003cp\u003eUse default parameter syntax over mutating function arguments.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efunction foo(opts = {}) {\n  bar();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efunction foo(opts) {\n  if (opts === undefined) {\n    opts = {};\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlways put default parameters last.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efunction foo(name, opts = {}) {\n  bar();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efunction foo(opts = {}, name) {\n  bar();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNever reassign parameters. If you need a default value, then use default parameters instead.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efunction foo(a) {\n  const b = a || 1;\n}\n\nfunction foo(a = 1) {\n  bar();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efunction foo(a) {\n  a = 1;\n}\n\nfunction foo(a) {\n  if (a === undefined) {\n    a = 1;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="44-arrow-functions"\u003e4.4 Arrow Functions\u003c/h2\u003e\n\u003cp\u003eUse arrow functions whenever possible. They are more concise, anonymous, and change the way \u003ccode\u003ethis\u003c/code\u003e binds in functions and removes the need for those ugly \u003ccode\u003econst me = this;\u003c/code\u003e assignments.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003esetInterval(() =\u0026gt; {\n  this.foo();\n}, 5000);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst me = this;\nsetInterval(function () {\n  me.foo();\n}, 5000);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch1 id="5-javascript-style-rules"\u003e5 JavaScript Style Rules\u003c/h1\u003e\n\u003ch2 id="51-semicolons"\u003e5.1 Semicolons\u003c/h2\u003e\n\u003cp\u003eUse semicolons. While JavaScript has this thing called Automatic Semicolon Insertion (ASI), it can sometimes lead to unexpected results.\u003c/p\u003e\n\u003ch2 id="52-references"\u003e5.2 References\u003c/h2\u003e\n\u003cp\u003eAvoid using \u003ccode\u003evar\u003c/code\u003e like the plague. Use \u003ccode\u003econst\u003c/code\u003e as much as possible because it ensures that we can’t reassign references so it’s easier to track errors. If we need to reassign or update values, then use \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe reason why we want to use \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e as much as possible over \u003ccode\u003evar\u003c/code\u003e is because they are block-scoped. They will only exist in the blocks they are defined in and won’t lead to those hard-to-figure-out scoping issues.\u003c/p\u003e\n\u003ch2 id="53-objects"\u003e5.3 Objects\u003c/h2\u003e\n\u003cp\u003eUse the literal syntax for object creation.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst item = {};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst item = new Object();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUse object method shorthand.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efrappe.ui.form.on(\u0026quot;Item\u0026quot;, {\n  item_code(frm) {},\n});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003efrappe.ui.form.on(\u0026quot;Item\u0026quot;, {\n  item_code: function (frm) {},\n});\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="54-arrays"\u003e5.4 Arrays\u003c/h2\u003e\n\u003cp\u003eUse the literal syntax for array creation.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst items = [];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst items = new Array();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUse array spreads \u003ccode\u003e...\u003c/code\u003e to copy arrays.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst itemsCopy = [...items];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst itemsCopy = [];\n\nfor (let i = 0; i \u0026lt; items.length; i += 1) {\n  itemsCopy[i] = items[i];\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="55-destructuring"\u003e5.5 Destructuring\u003c/h2\u003e\n\u003cp\u003eUse array/object destructuring assignments.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst arr = [1, 2, 3, 4];\nconst [first, second] = arr;\n\nconst obj = { a: 1, b: 2, c: 3 };\nconst { a, b } = obj;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst arr = [1, 2, 3, 4];\nconst first = arr[0];\nconst second = arr[1];\n\nconst obj = { a: 1, b: 2, c: 3 };\nconst a = obj[\u0026quot;a\u0026quot;];\nconst b = obj[\u0026quot;b\u0026quot;];\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="56-strings"\u003e5.6 Strings\u003c/h2\u003e\n\u003cp\u003eUse double quotes \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e for strings.\u003c/p\u003e\n\u003cp\u003eWhen programmatically building up strings, consider using template strings instead of concatenation.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst greeting = `How are you, ${name}?`;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst greeting = \u0026quot;How are you, \u0026quot; + name + \u0026quot;?\u0026quot;;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="57-naming-conventions"\u003e5.7 Naming Conventions\u003c/h2\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eCase\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eClasses\u003c/td\u003e\n\u003ctd\u003ePascalCase\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExceptions\u003c/td\u003e\n\u003ctd\u003ePascalCase\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFunctions\u003c/td\u003e\n\u003ctd\u003elower_with_under()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eGlobal/Class Constants\u003c/td\u003e\n\u003ctd\u003eCAPS_WITH_UNDER\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eGlobal/Class Variables\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInstance Variables\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMethod Names\u003c/td\u003e\n\u003ctd\u003elower_with_under()\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFunction/Method Parameters\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLocal Variables\u003c/td\u003e\n\u003ctd\u003elower_with_under\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id="58-jquery"\u003e5.8 jQuery\u003c/h2\u003e\n\u003cp\u003ePrefix jQuery object variables with a \u003ccode\u003e$\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst $sidebar = $(\u0026quot;.sidebar\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-js"\u003econst sidebar = $(\u0026quot;.sidebar\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="59-indentation"\u003e5.9 Indentation\u003c/h2\u003e\n\u003cp\u003eIndent your code blocks with \u003cem\u003e4 spaces\u003c/em\u003e. Never use tabs or mix tabs and spaces.\u003c/p\u003e\n\u003ch2 id="510-blocks"\u003e5.10 Blocks\u003c/h2\u003e\n\u003cp\u003eUse braces with all multi-line blocks. The opening brace should always be on the same line as the condition, loop, or function declaration. The closing brace should be on a separate line.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif (test) return false;\n\nif (test) {\n    return false;\n}\n\nfunction bar() {\n    return false;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif (test)\n    return false;\n\nfunction foo() { return false; }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you’re using multi-line blocks with \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e, put \u003ccode\u003eelse\u003c/code\u003e on the same line as your \u003ccode\u003eif\u003c/code\u003e block’s closing brace.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif (test) {\n    thing1();\n    thing2();\n} else {\n    thing3();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif (test) {\n    thing1();\n    thing2();\n}\nelse {\n    thing3();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf an if block always executes a return statement, the subsequent else block is unnecessary. A return in an else if block following an if block that contains a return can be separated into multiple if blocks.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction foo() {\n    if (x) {\n        return x;\n    }\n\n    return y;\n}\n\nfunction cats() {\n    if (x) {\n        return x;\n    }\n\n    if (y) {\n        return y;\n    }\n}\n\nfunction dogs(x) {\n    if (x) {\n        if (z) {\n            return y;\n        }\n    } else {\n        return z;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction foo() {\n    if (x) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\nfunction cats() {\n    if (x) {\n        return x;\n    } else if (y) {\n        return y;\n    }\n}\n\nfunction dogs(x) {\n    if (x) {\n        return x;\n    } else {\n        if (y) {\n            return y;\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch1 id="6-sql-style-rules"\u003e6 SQL Style Rules\u003c/h1\u003e\n\u003ch2 id="61-keyword-formatting"\u003e6.1 Keyword Formatting\u003c/h2\u003e\n\u003cp\u003eUse lowercase letters for ALL keywords. Place keywords and arguments in separate lines.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-sql"\u003eselect\n    item_code,\n    item_group\nfrom\n    `tabItem`\nwhere\n    disabled = 0;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-sql"\u003eSELECT item_code, item_group\nFROM `tabItem`\nWHERE disabled = 0;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="62-condition-formatting"\u003e6.2 Condition Formatting\u003c/h2\u003e\n\u003cp\u003eSeparate each and/ or condition into their own line and place the keyword before the condition.\u003c/p\u003e\n\u003cp\u003e\u003cspan style="color: green;"\u003eYES:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-sql"\u003eselect\n    item_code,\n    item_group\nfrom\n    `tabItem`\nwhere\n    disabled = 0\n    and is_stock_item = 1\n    or is_fixed_asset = 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan style="color: red;"\u003eNO:\u003c/span\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-sql"\u003eSELECT item_code, item_group\nFROM `tabItem`\nWHERE disabled = 0 AND is_stock_item = 1 OR\n    is_fixed_asset = 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="63-alias-naming-conventions"\u003e6.3 Alias Naming Conventions\u003c/h2\u003e\n\u003cp\u003eFormat aliases as \u003ccode\u003et_\u0026lt;DocType abbreviation\u0026gt;\u003c/code\u003e. For example:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eDocType Name\u003c/th\u003e\n\u003cth\u003eTable Name\u003c/th\u003e\n\u003cth\u003eAlias Name\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eItem\u003c/td\u003e\n\u003ctd\u003etabItem\u003c/td\u003e\n\u003ctd\u003et_i\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eItem Price\u003c/td\u003e\n\u003ctd\u003etabItem Price\u003c/td\u003e\n\u003ctd\u003et_ip\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePurchase Order\u003c/td\u003e\n\u003ctd\u003etabPurchase Order\u003c/td\u003e\n\u003ctd\u003et_po\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePurchase Order Item\u003c/td\u003e\n\u003ctd\u003etabPurchase Order Item\u003c/td\u003e\n\u003ctd\u003et_poi\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id="7-final-reminders"\u003e7 Final Reminders\u003c/h1\u003e\n\u003cp\u003ePlease note that these standards are still open to improvements. Just because it’s on a document doesn’t mean it’s perfect. So if you, the reader, have any feedback or comments that you think will improve the overall standards, please don’t hesitate to let us know.\u003c/p\u003e\n'},{id:7,href:"/docs/standards/commit-standards/",title:"Commit Standards",description:"Know more about our commit standards at BizKit.",content:'\u003ch1 id="1-why-it-matters"\u003e1 Why It Matters\u003c/h1\u003e\n\u003cp\u003eImagine checking a git repository’s log and seeing something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003eStarted working on feature X\nTesting stuff\nFix small bug\nTicket #41\nMade lots of changes\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eConfused? Now, compare that to this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003efeat: Add date validation in Purchase Order\ntest: Add unit test for Item Price validation\nfix: Incorrect number format\nfix: Item error on save\nfeat: Add files for new Hour Multiplier DocType\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich one would be easier to read? Or better yet, which one would be easier to \u003cem\u003eunderstand\u003c/em\u003e? The former is inconsistent, messy, and all over the place. The latter is clean, informative, and precise.\u003c/p\u003e\n\u003cp\u003eWhen writing code, good commit messages are usually the last thing we want to think of or worry about. It’s not like we’re going to read them, right? But all we have to do is review someone’s code and suddenly we realize the importance of having good commit messages. Just try to find a bug introduced after deploying a new feature and figure out which change did that. Diving deep into code without understanding the context of why the developer made that change isn’t as fun as one thinks—nor is it a good use of time.\u003c/p\u003e\n\u003cp\u003eGood commit messages tell a \u003cem\u003estory\u003c/em\u003e. They give viewers the necessary background of what was changed and why that change was made.They let people who read them understand what’s going on without having to go into the nitty-gritty of the code or worse, contact the developer who’s supposedly hard at work doing something else.\u003c/p\u003e\n\u003cp\u003eAnd that is the main reason why good commits are necessary: they make it easier for everyone else—and most especially us.\u003c/p\u003e\n\u003ch1 id="2-how-to-write-good-commits"\u003e2 How To Write Good Commits\u003c/h1\u003e\n\u003ch1 id="21-the-basic-structure"\u003e2.1 The Basic Structure\u003c/h1\u003e\n\u003cp\u003eFortunately, it isn’t that hard to write good commits. And neither does it take a long time. But at the same time, one shouldn’t hurry when writing commits—doing so is the reason why so many developers put out nonsensical commit messages like \u003ca href="https://twitter.com/gitlost"\u003ethese\u003c/a\u003e. As mentioned before, good commit messages are supposed to tell a story and there aren’t any good stories written by someone in a hurry.\u003c/p\u003e\n\u003cp\u003eWe should pause for a moment and think about what we did. Good commit messages address the following questions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhat was changed or added?\u003c/li\u003e\n\u003cli\u003eWhy was it necessary?\u003c/li\u003e\n\u003cli\u003eWhat effects does it have?\u003c/li\u003e\n\u003cli\u003eHow did it work before and how does it work now?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAt the same time, we should remember to keep commits small. A good rule of thumb is to only commit \u003cstrong\u003eone\u003c/strong\u003e change at a time. Commits don’t cost anything so these are one of the cases where it’s better to have more.\u003c/p\u003e\n\u003cp\u003eWith that out of the way, here’s the basic structure for writing commit messages:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003e\u0026lt;type\u0026gt;: \u0026lt;description\u0026gt;\n\n[optional body]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, here’s an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003efeat: Add option to hide values in trees\n\nThis commit adds functionality that allows users to enable/disable showing the account balance and warehouse stock value in the Chart of Accounts and Warehouse trees respectively. The following fields were added in the following DocTypes to allow this:\n\n- show_balance_in_coa_tree in Accounts Settings\n- show_stock_value_in_warehouse_tree in Stock Settings\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimple enough, right? Let’s get down into the rules.\u003c/p\u003e\n\u003ch2 id="22-rules-for-writing-good-commits"\u003e2.2 Rules for Writing Good Commits\u003c/h2\u003e\n\u003ch3 id="221-limit-the-subject-line-to-50-characters"\u003e2.2.1 Limit the Subject Line to 50 Characters\u003c/h3\u003e\n\u003cp\u003eThe subject line is the first line of the git commit and is usually the only thing most developers that don’t care about doing good commits fill out. Whilesome commits don’t require adding a body, the subject line is necessary. It is a short summary of the change and is used as the title for the commit in most repository hosting sites.\u003c/p\u003e\n\u003cp\u003eWhile 50 characters is not a hard limit and the world won’t end if we go over it, using it as a rule of thumb ensures that they are readable. If we’re having trouble summarizing what we did in 50 characters then we might be committing too much. If that’s the case, then we need to split up our change into smaller chunks.\u003c/p\u003e\n\u003ch3 id="222-add-a-type"\u003e2.2.2 Add a Type\u003c/h3\u003e\n\u003cp\u003eAdding a type to the subject line makes it easier for viewers to categorize and figure out what’s going on. Common types and when to use them are the following:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003ePurpose\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003efeat\u003c/td\u003e\n\u003ctd\u003eNew feature or functionality\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003efix\u003c/td\u003e\n\u003ctd\u003eBug fixes\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erefactor\u003c/td\u003e\n\u003ctd\u003eRefactoring or optimizing production code\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003estyle\u003c/td\u003e\n\u003ctd\u003eImproving the formatting (i.e. removing unnecessary parentheses, etc.)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003edocs\u003c/td\u003e\n\u003ctd\u003eChanges to the documentation\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etest\u003c/td\u003e\n\u003ctd\u003eAdding or refactoring tests\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003echore\u003c/td\u003e\n\u003ctd\u003eCleaning up files or other changes that don’t affect the code\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="223-capitalize-the-description"\u003e2.2.3 Capitalize the Description\u003c/h3\u003e\n\u003cp\u003eNothing special here, just capitalize the description. It looks cleaner. Here’s an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003efeat: Add date validation in Purchase Order\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="224-do-not-end-the-subject-line-with-a-period"\u003e2.2.4 Do Not End the Subject Line With a Period\u003c/h3\u003e\n\u003cp\u003eTrailing punctuation is unnecessary in subject lines. And also, we want to keep it at 50 characters or less so space is precious.\u003c/p\u003e\n\u003ch3 id="225-use-the-imperative-mood-in-the-description"\u003e2.2.5 Use the Imperative Mood in the Description\u003c/h3\u003e\n\u003cp\u003eWriting in the imperative is like speaking or writing as if giving a command or an instruction. Here are some examples:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdd validation\u003c/li\u003e\n\u003cli\u003eFix typo in error message\u003c/li\u003e\n\u003cli\u003eDelete unnecessary code\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe imperative can sound a bit bossy or rude and may take a bit of getting used to, but git uses the imperative as well when creating commits on our behalf.\u003c/p\u003e\n\u003cp\u003eTo help, remember that a properly formed git commit description should complete the following sentence:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf applied, this commit will \u003cem\u003eyour description here\u003c/em\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf applied, this commit will \u003cu\u003eadd validation in Purchase Order\u003c/u\u003e.\u003c/li\u003e\n\u003cli\u003eIf applied, this commit will \u003cu\u003efix typo in error message\u003c/u\u003e.\u003c/li\u003e\n\u003cli\u003eIf applied, this commit will \u003cu\u003edelete unnecessary code\u003c/u\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTake note that this is only necessary for the description and not for the body.\u003c/p\u003e\n\u003ch3 id="226-separate-subject-from-body-with-a-blank-line"\u003e2.2.6 Separate Subject From Body With a Blank Line\u003c/h3\u003e\n\u003cp\u003eAgain, not all commits require a body. But in case it does, we should remember that the subject line is like the title. Adding a blank line in between the subject and the body makes it easier to read and differentiate the title from the body. Here’s an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-md"\u003efix: Asset status not updating\n\nThis commit fixes a bug in the Asset DocType where the status does not go back to what it was previously after an Asset Maintenance or Asset Repair.\n\nThis was happening because the function to set the status did not default to the original status if it didn’t find any existing Asset Maintenance or Asset Repair. Adding this at the end of the condition fixes the bug.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="227-wrap-the-body-at-72-characters"\u003e2.2.7 Wrap the Body at 72 Characters\u003c/h3\u003e\n\u003cp\u003eGit never wraps text automatically and so it can be hard to view git logs when we have to scroll horizontally. When we write the body of a commit message, we have to think about its right margin and wrap text manually.\u003c/p\u003e\n\u003cp\u003eThe recommendation is to do this at 72 characters, so that git has plenty of room to indent text while still keeping everything under 80 characters overall.\u003c/p\u003e\n\u003ch3 id="228-use-the-body-to-explain-_what_-and-_why_-instead-of-_how_"\u003e2.2.8 Use the Body to Explain \u003cem\u003eWhat\u003c/em\u003e and \u003cem\u003eWhy\u003c/em\u003e Instead of \u003cem\u003eHow\u003c/em\u003e\u003c/h3\u003e\n\u003cp\u003eWe have to remember that the purpose of the commit is to give the reader context of what was changed and why. There is no need to write a novel explaining the excruciating details of how we managed to solve that bug that no one else could solve. If the viewer were interested, they could simply check the git diff for that. Keep things short—focus on the what and why.\u003c/p\u003e\n\u003ch1 id="pro-tips"\u003ePro Tips\u003c/h1\u003e\n\u003ch2 id="31-git-commit-template"\u003e3.1 Git Commit Template\u003c/h2\u003e\n\u003cp\u003eWe can actually set our own git commit templates so we don’t forget to write the important stuff and ensure that we’re following commit standards.\u003c/p\u003e\n\u003cp\u003e\u003ca href="https://gist.github.com/kevingdc/00bc3f90d2531c604df3d9e516c71998"\u003eThis is a link\u003c/a\u003e to Kevin\u0026rsquo;s personal template. Feel free to use it or modify it to your tastes. Once you download it and save it to your machine, you can have git use it as the default template by running the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003egit config --global commit.template path/to/.git_commit_template\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="32-gitlens"\u003e3.2 GitLens\u003c/h2\u003e\n\u003cp\u003eIf you’re using Visual Studio Code, you may also install the \u003ca href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"\u003eGitLens extension\u003c/a\u003e to easily see git history.\u003c/p\u003e\n\u003ch1 id="4-final-reminders"\u003e4 Final Reminders\u003c/h1\u003e\n\u003cp\u003ePlease note that these standards are still open to improvements. Just this because it’s on a document doesn’t mean it’s perfect. So if you, the reader, have any feedback or comments that you think will improve the overall standards, please don’t hesitate to let us know.\u003c/p\u003e\n'},{id:8,href:"/docs/setup/add-custom-domain/",title:"Add Custom Domain",description:"Add a custom domain to the site.",content:'\u003ch2 id="instructions"\u003eInstructions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eRun:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ebench setup add-domain [domain]\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="2"\u003e\n\u003cli\u003eRegenerate nginx config.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ebench setup nginx\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003eReload nginx.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003esudo service nginx reload\r\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:9,href:"/docs/setup/set-up-dns-multitenancy/",title:"Set Up DNS Multitenancy",description:"Set up DNS multitenancy so hostnames will be resolved to the site/domain name.",content:'\u003ch2 id="instructions"\u003eInstructions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eRun:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ebench setup add-domain [domain]\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="2"\u003e\n\u003cli\u003eRegenerate nginx config.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ebench setup nginx\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="3"\u003e\n\u003cli\u003eReload nginx.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003esudo service nginx reload\r\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:10,href:"/docs/setup/set-up-https/",title:"Set Up HTTPS",description:"Instructions on how to set up HTTPS.",content:'\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\r\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003e💡\u003c/div\u003e\r\n  \u003cdiv class="w-100"\u003eLet\'s Encrypt Certificates expire every three months.\u003c/div\u003e\r\n\u003c/div\u003e\n\u003ch2 id="prerequisites"\u003ePrerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSite is set up in \u003ca href="/docs/setup/set-up-instance/#converting-to-production"\u003eproduction mode\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThe site has a registered \u003ca href="/docs/setup/add-custom-domain/"\u003ecustom domain\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThe instance is set up with \u003ca href="/docs/setup/set-up-dns-multitenancy/"\u003eDNS multitenancy\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="instructions"\u003eInstructions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eRun:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003esudo -H bench setup lets-encrypt [site-name] --custom-domain [custom-domain]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou will be faced with several prompts, respond to them accordingly. This command will also add an entry to the crontab of the root user (this requires elevated permissions) that will attempt to renew the certificate every month.\u003c/p\u003e\n\u003ch2 id="renew-certificates-manually"\u003eRenew Certificates Manually\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003esudo bench renew-lets-encrypt\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:11,href:"/docs/help/how-to-update/",title:"How to Update",description:"Regularly update the installed npm packages to keep your Doks website stable, usable, and secure.",content:'\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\r\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003e💡\u003c/div\u003e\r\n  \u003cdiv class="w-100"\u003eLearn more about \u003ca href="https://docs.npmjs.com/about-semantic-versioning"\u003esemantic versioning\u003c/a\u003e and \u003ca href="https://docs.npmjs.com/cli/v6/using-npm/semver#advanced-range-syntax"\u003eadvanced range syntax\u003c/a\u003e.\u003c/div\u003e\r\n\u003c/div\u003e\n\u003ch2 id="check-for-outdated-packages"\u003eCheck for outdated packages\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href="https://docs.npmjs.com/cli/v7/commands/npm-outdated"\u003e\u003ccode\u003enpm outdated\u003c/code\u003e\u003c/a\u003e command will check the registry to see if any (or, specific) installed packages are currently outdated:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm outdated [[\u0026lt;@scope\u0026gt;/]\u0026lt;pkg\u0026gt; ...]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="update-packages"\u003eUpdate packages\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href="https://docs.npmjs.com/cli/v7/commands/npm-update"\u003e\u003ccode\u003enpm update\u003c/code\u003e\u003c/a\u003e command will update all the packages listed to the latest version (specified by the tag config), respecting semver:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm update [\u0026lt;pkg\u0026gt;...]\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:12,href:"/docs/help/troubleshooting/",title:"Troubleshooting",description:"Solutions to common problems.",content:'\u003ch2 id="problems-updating-npm-packages"\u003eProblems updating npm packages\u003c/h2\u003e\n\u003cp\u003eDelete the \u003ccode\u003e./node_modules\u003c/code\u003e folder, and run again:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm install\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="problems-with-cache"\u003eProblems with cache\u003c/h2\u003e\n\u003cp\u003eDelete the temporary directories:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run clean\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:13,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:'\u003ch2 id="this-theme"\u003eThis theme?\u003c/h2\u003e\n\u003cp\u003eDoks is a \u003ca href="https://gethyas.com/themes/"\u003eHyas theme\u003c/a\u003e build by the creator of Hyas.\u003c/p\u003e\n\u003ch2 id="keyboard-shortcuts-for-search"\u003eKeyboard shortcuts for search?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003efocus: \u003ccode\u003e/\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eselect: \u003ccode\u003e↓\u003c/code\u003e and \u003ccode\u003e↑\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eopen: \u003ccode\u003eEnter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eclose: \u003ccode\u003eEsc\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="other-documentation"\u003eOther documentation?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://docs.netlify.com/"\u003eNetlify\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://gohugo.io/documentation/"\u003eHugo\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="can-i-get-support"\u003eCan I get support?\u003c/h2\u003e\n\u003cp\u003eCreate a topic:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://community.netlify.com/"\u003eNetlify Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://discourse.gohugo.io/"\u003eHugo Forums\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://github.com/h-enk/doks/discussions"\u003eDoks Discussions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="contact-the-creator"\u003eContact the creator?\u003c/h2\u003e\n\u003cp\u003eSend \u003ccode\u003eh-enk\u003c/code\u003e a message:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://community.netlify.com/"\u003eNetlify Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://discourse.gohugo.io/"\u003eHugo Forums\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://github.com/h-enk/doks/discussions"\u003eDoks Discussions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:14,href:"/docs/projects/reports-configurations/",title:"Reports Configurations",description:"",content:'\u003ch2 id="reports-configurations"\u003eReports Configurations\u003c/h2\u003e\n\u003ch3 id="overview"\u003eOverview\u003c/h3\u003e\n\u003cp\u003eThe \u0026ldquo;Reports Configurations\u0026rdquo; feature has been introduced to empower clients to tailor their report consumption experience according to their unique business needs. Reports, crucial tools for decision-making, may not always require the same data or presentation. A flexible solution is provided, allowing each client to customize report filters and columns to align with their preferences.\u003c/p\u003e\n\u003cp\u003eTraditionally, Script Reports were designed with a one-size-fits-all approach. However, differing client requirements must be addressed. For instance, certain filters or columns may be deemed irrelevant to some clients, while others may prefer to modify column labels for better alignment with their operations. This feature addresses these variances by enabling per-client configuration of reports.\u003c/p\u003e\n\u003ch3 id="reason-for-feature-inclusion"\u003eReason for Feature Inclusion\u003c/h3\u003e\n\u003cp\u003eThe inclusion of this feature enables per-client configuration of reports. Each client possesses unique preferences regarding report consumption. Some clients may opt to conceal specific filters or columns, irrelevant to their business needs. Conversely, others may choose to relabel specific columns to enhance context for their business operations.\u003c/p\u003e\n\u003ch3 id="changes-made"\u003eChanges Made\u003c/h3\u003e\n\u003ch4 id="upon-loading-the-report-document-form"\u003eUpon Loading the Report Document Form\u003c/h4\u003e\n\u003cp\u003e\u003cfigure class="border-0"\u003e\r\n  \u003cimg class="img-fluid lazyload blur-up" data-sizes="auto" src="/docs/projects/reports-configurations/image-6_hufebd8680f84e5ad9f9e05ad3a4810481_39594_20x0_resize_box_2.png" data-srcset="/docs/projects/reports-configurations/image-6_hufebd8680f84e5ad9f9e05ad3a4810481_39594_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-6_hufebd8680f84e5ad9f9e05ad3a4810481_39594_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-6_hufebd8680f84e5ad9f9e05ad3a4810481_39594_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-6_hufebd8680f84e5ad9f9e05ad3a4810481_39594_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-6_hufebd8680f84e5ad9f9e05ad3a4810481_39594_500x0_resize_box_2.png 500w" width="1021" height="441" alt="On Load of the Report Document Form 1"\u003e\r\n  \u003cnoscript\u003e\u003cimg class="img-fluid" sizes="100vw" srcset="/docs/projects/reports-configurations/image-6_hufebd8680f84e5ad9f9e05ad3a4810481_39594_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-6_hufebd8680f84e5ad9f9e05ad3a4810481_39594_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-6_hufebd8680f84e5ad9f9e05ad3a4810481_39594_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-6_hufebd8680f84e5ad9f9e05ad3a4810481_39594_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-6_hufebd8680f84e5ad9f9e05ad3a4810481_39594_500x0_resize_box_2.png 500w" src="/docs/projects/reports-configurations/image-6.png" width="1021" height="441" alt="On Load of the Report Document Form 1"\u003e\u003c/noscript\u003e\r\n  \r\n\u003c/figure\u003e\r\n\nAn implementation has been added in \u003ccode\u003ebefore_load\u003c/code\u003e Form Event within report.js to fetch filters and pass them to the backend.\u003c/p\u003e\n\u003cp\u003e\u003cfigure class="border-0"\u003e\r\n  \u003cimg class="img-fluid lazyload blur-up" data-sizes="auto" src="/docs/projects/reports-configurations/image-7_hu7f47de2fa763801779b585515a192c55_23183_20x0_resize_box_2.png" data-srcset="/docs/projects/reports-configurations/image-7_hu7f47de2fa763801779b585515a192c55_23183_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-7_hu7f47de2fa763801779b585515a192c55_23183_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-7_hu7f47de2fa763801779b585515a192c55_23183_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-7_hu7f47de2fa763801779b585515a192c55_23183_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-7_hu7f47de2fa763801779b585515a192c55_23183_500x0_resize_box_2.png 500w" width="759" height="387" alt="On Load of the Report Document Form 2"\u003e\r\n  \u003cnoscript\u003e\u003cimg class="img-fluid" sizes="100vw" srcset="/docs/projects/reports-configurations/image-7_hu7f47de2fa763801779b585515a192c55_23183_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-7_hu7f47de2fa763801779b585515a192c55_23183_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-7_hu7f47de2fa763801779b585515a192c55_23183_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-7_hu7f47de2fa763801779b585515a192c55_23183_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-7_hu7f47de2fa763801779b585515a192c55_23183_500x0_resize_box_2.png 500w" src="/docs/projects/reports-configurations/image-7.png" width="759" height="387" alt="On Load of the Report Document Form 2"\u003e\u003c/noscript\u003e\r\n  \r\n\u003c/figure\u003e\r\n\nThe filters from the request are used to load the filters and columns tables.\u003c/p\u003e\n\u003cfigure class="border-0"\u003e\r\n  \u003cimg class="img-fluid lazyload blur-up" data-sizes="auto" src="/docs/projects/reports-configurations/image-8_hu27f3b38d1e79ea7a194ca1cc660f52e8_52585_20x0_resize_box_2.png" data-srcset="/docs/projects/reports-configurations/image-8_hu27f3b38d1e79ea7a194ca1cc660f52e8_52585_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-8_hu27f3b38d1e79ea7a194ca1cc660f52e8_52585_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-8_hu27f3b38d1e79ea7a194ca1cc660f52e8_52585_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-8_hu27f3b38d1e79ea7a194ca1cc660f52e8_52585_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-8_hu27f3b38d1e79ea7a194ca1cc660f52e8_52585_500x0_resize_box_2.png 500w" width="1005" height="647" alt="On Load of the Report Document Form 3"\u003e\r\n  \u003cnoscript\u003e\u003cimg class="img-fluid" sizes="100vw" srcset="/docs/projects/reports-configurations/image-8_hu27f3b38d1e79ea7a194ca1cc660f52e8_52585_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-8_hu27f3b38d1e79ea7a194ca1cc660f52e8_52585_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-8_hu27f3b38d1e79ea7a194ca1cc660f52e8_52585_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-8_hu27f3b38d1e79ea7a194ca1cc660f52e8_52585_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-8_hu27f3b38d1e79ea7a194ca1cc660f52e8_52585_500x0_resize_box_2.png 500w" src="/docs/projects/reports-configurations/image-8.png" width="1005" height="647" alt="On Load of the Report Document Form 3"\u003e\u003c/noscript\u003e\r\n  \r\n\u003c/figure\u003e\r\n\n\u003cp\u003eComparison between the set of filters retrieved from the JavaScript (js) file and those obtained from the database is performed. If identical, no changes are made. However, discrepancies, such as the addition of a new filter to the js file, trigger the loading of the new filter set into the database.\u003c/p\u003e\n\u003cfigure class="border-0"\u003e\r\n  \u003cimg class="img-fluid lazyload blur-up" data-sizes="auto" src="/docs/projects/reports-configurations/image-9_hue2b40466393dbdf30b268907266b63b1_42050_20x0_resize_box_2.png" data-srcset="/docs/projects/reports-configurations/image-9_hue2b40466393dbdf30b268907266b63b1_42050_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-9_hue2b40466393dbdf30b268907266b63b1_42050_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-9_hue2b40466393dbdf30b268907266b63b1_42050_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-9_hue2b40466393dbdf30b268907266b63b1_42050_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-9_hue2b40466393dbdf30b268907266b63b1_42050_500x0_resize_box_2.png 500w" width="866" height="639" alt="On Load of the Report Document Form 4"\u003e\r\n  \u003cnoscript\u003e\u003cimg class="img-fluid" sizes="100vw" srcset="/docs/projects/reports-configurations/image-9_hue2b40466393dbdf30b268907266b63b1_42050_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-9_hue2b40466393dbdf30b268907266b63b1_42050_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-9_hue2b40466393dbdf30b268907266b63b1_42050_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-9_hue2b40466393dbdf30b268907266b63b1_42050_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-9_hue2b40466393dbdf30b268907266b63b1_42050_500x0_resize_box_2.png 500w" src="/docs/projects/reports-configurations/image-9.png" width="866" height="639" alt="On Load of the Report Document Form 4"\u003e\u003c/noscript\u003e\r\n  \r\n\u003c/figure\u003e\r\n\n\u003cp\u003eThis step closely mirrors the \u003ccode\u003eload_filters\u003c/code\u003e step mentioned previously. The key distinction lies in its initial utilization of filters, particularly their default values, for column retrieval. Subsequently, it compares the set of columns obtained from the Python (py) file with those retrieved from the database. Similarly, if identical, no changes occur. However, disparities, such as the addition of a new column to the py file, lead to the loading of the new column set into the database.\u003c/p\u003e\n\u003cfigure class="border-0"\u003e\r\n  \u003cimg class="img-fluid lazyload blur-up" data-sizes="auto" src="/docs/projects/reports-configurations/image-4_hu7f1dc80ac02a6620ec7aa03eb6580051_116183_20x0_resize_box_2.png" data-srcset="/docs/projects/reports-configurations/image-4_hu7f1dc80ac02a6620ec7aa03eb6580051_116183_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-4_hu7f1dc80ac02a6620ec7aa03eb6580051_116183_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-4_hu7f1dc80ac02a6620ec7aa03eb6580051_116183_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-4_hu7f1dc80ac02a6620ec7aa03eb6580051_116183_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-4_hu7f1dc80ac02a6620ec7aa03eb6580051_116183_500x0_resize_box_2.png 500w" width="1716" height="686" alt="On Load of the Report Document Form 5"\u003e\r\n  \u003cnoscript\u003e\u003cimg class="img-fluid" sizes="100vw" srcset="/docs/projects/reports-configurations/image-4_hu7f1dc80ac02a6620ec7aa03eb6580051_116183_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-4_hu7f1dc80ac02a6620ec7aa03eb6580051_116183_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-4_hu7f1dc80ac02a6620ec7aa03eb6580051_116183_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-4_hu7f1dc80ac02a6620ec7aa03eb6580051_116183_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-4_hu7f1dc80ac02a6620ec7aa03eb6580051_116183_500x0_resize_box_2.png 500w" src="/docs/projects/reports-configurations/image-4.png" width="1716" height="686" alt="On Load of the Report Document Form 5"\u003e\u003c/noscript\u003e\r\n  \r\n\u003c/figure\u003e\r\n\n\u003cp\u003eAn attempt is made to execute the \u003ccode\u003eget_configurable_columns\u003c/code\u003e function within the report module\u0026rsquo;s py file. A successful execution results in \u003ccode\u003ehas_dynamic_columns\u003c/code\u003e being set to \u003ccode\u003e0\u003c/code\u003e, and \u003ccode\u003ecolumns\u003c/code\u003e being populated with the list returned by \u003ccode\u003eget_configurable_columns\u003c/code\u003e. Failure leads to \u003ccode\u003ehas_dynamic_columns\u003c/code\u003e being set to \u003ccode\u003e1\u003c/code\u003e, and \u003ccode\u003ecolumns\u003c/code\u003e being assigned an empty list.\u003c/p\u003e\n\u003cp\u003eFollowing this, we also endeavor to execute the \u003ccode\u003eget_columns\u003c/code\u003e method, passing the default filter values as the first argument. Success sets \u003ccode\u003ehas_dynamic_columns\u003c/code\u003e to \u003ccode\u003e0\u003c/code\u003e, with \u003ccode\u003ecolumns\u003c/code\u003e populated by the list returned by \u003ccode\u003eget_columns\u003c/code\u003e. Failure results in \u003ccode\u003ehas_dynamic_columns\u003c/code\u003e being set to \u003ccode\u003e1\u003c/code\u003e, with \u003ccode\u003ecolumns\u003c/code\u003e assigned an empty list.\u003c/p\u003e\n\u003cp\u003eSubsequent to the two function call attempts mentioned above, the list from \u003ccode\u003eget_configurable_columns\u003c/code\u003e is assessed. If non-empty, it is returned as the result. However, if it is empty, the list from \u003ccode\u003eget_columns\u003c/code\u003e is passed, regardless of its emptiness.\u003c/p\u003e\n\u003cp\u003eAt this juncture, \u003ccode\u003ehas_dynamic_columns\u003c/code\u003e is set to \u003ccode\u003e0\u003c/code\u003e only if the execution of \u003ccode\u003eget_columns\u003c/code\u003e yields a non-empty list; otherwise, it is set to \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id="upon-loading-the-report-view"\u003eUpon Loading the Report View\u003c/h4\u003e\n\u003cfigure class="border-0"\u003e\r\n  \u003cimg class="img-fluid lazyload blur-up" data-sizes="auto" src="/docs/projects/reports-configurations/image-5_hudac33aef33593912a33c752dc7dd7d27_96198_20x0_resize_box_2.png" data-srcset="/docs/projects/reports-configurations/image-5_hudac33aef33593912a33c752dc7dd7d27_96198_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-5_hudac33aef33593912a33c752dc7dd7d27_96198_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-5_hudac33aef33593912a33c752dc7dd7d27_96198_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-5_hudac33aef33593912a33c752dc7dd7d27_96198_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-5_hudac33aef33593912a33c752dc7dd7d27_96198_500x0_resize_box_2.png 500w" width="1332" height="719" alt="On Load of the Report View"\u003e\r\n  \u003cnoscript\u003e\u003cimg class="img-fluid" sizes="100vw" srcset="/docs/projects/reports-configurations/image-5_hudac33aef33593912a33c752dc7dd7d27_96198_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-5_hudac33aef33593912a33c752dc7dd7d27_96198_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-5_hudac33aef33593912a33c752dc7dd7d27_96198_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-5_hudac33aef33593912a33c752dc7dd7d27_96198_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-5_hudac33aef33593912a33c752dc7dd7d27_96198_500x0_resize_box_2.png 500w" src="/docs/projects/reports-configurations/image-5.png" width="1332" height="719" alt="On Load of the Report View"\u003e\u003c/noscript\u003e\r\n  \r\n\u003c/figure\u003e\r\n\n\u003cp\u003eWhile loading the report view, a check is included to determine if the report doc\u0026rsquo;s \u003ccode\u003eenable_filters_and_columns\u003c/code\u003e property is set to \u003ccode\u003e1\u003c/code\u003e. If so, filter configurations are applied; otherwise, only filters from the JavaScript (js) file are retrieved. Subsequently, a report refresh is initiated.\u003c/p\u003e\n\u003cp\u003eDuring the refresh process, a server call to the \u003ccode\u003erun\u003c/code\u003e function in the \u003ccode\u003equery_report.py\u003c/code\u003e file is triggered, subsequently invoking the \u003ccode\u003eexecute\u003c/code\u003e function in the Python (py) file of the currently rendered report. Here, verification is conducted to ascertain whether the report doc\u0026rsquo;s \u003ccode\u003eenable_filters_and_columns\u003c/code\u003e property is set to \u003ccode\u003e1\u003c/code\u003e, and column configurations are applied prior to returning the result.\u003c/p\u003e\n\u003ch3 id="utilizing-the-feature"\u003eUtilizing the Feature\u003c/h3\u003e\n\u003cfigure\u003e\n    \u003cimg src="example.gif"\n         alt="Utilizing the Feature" width="100%"/\u003e \n\u003c/figure\u003e\n\n\u003col\u003e\n\u003cli\u003eNavigate to the Report List.\u003c/li\u003e\n\u003cli\u003eOpen a Script Report document Form.\u003c/li\u003e\n\u003cli\u003eAdjust the filter and column configurations.\u003c/li\u003e\n\u003cli\u003eVerify that \u003ccode\u003eEnable Filters and Columns Configuration\u003c/code\u003e is enabled.\u003c/li\u003e\n\u003cli\u003eSave your modifications.\u003c/li\u003e\n\u003cli\u003eAccess the Report View.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id="testing"\u003eTesting\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://app.clickup.com/t/865cwwyjc?comment=90080051624998"\u003eSummary\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://docs.google.com/spreadsheets/d/16IeQIgDSaPtXUXdGaxYxj3xapZK1GgSc/edit#gid=1215479650"\u003eTest Cases\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="limitations"\u003eLimitations\u003c/h3\u003e\n\u003ch4 id="dependency-on-get_columns"\u003eDependency on \u003ccode\u003eget_columns\u003c/code\u003e\u003c/h4\u003e\n\u003cfigure class="border-0"\u003e\r\n  \u003cimg class="img-fluid lazyload blur-up" data-sizes="auto" src="/docs/projects/reports-configurations/image-2_hu9fa8bcf62c1f57f44beb4f4a30d2d787_35231_20x0_resize_box_2.png" data-srcset="/docs/projects/reports-configurations/image-2_hu9fa8bcf62c1f57f44beb4f4a30d2d787_35231_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-2_hu9fa8bcf62c1f57f44beb4f4a30d2d787_35231_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-2_hu9fa8bcf62c1f57f44beb4f4a30d2d787_35231_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-2_hu9fa8bcf62c1f57f44beb4f4a30d2d787_35231_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-2_hu9fa8bcf62c1f57f44beb4f4a30d2d787_35231_500x0_resize_box_2.png 500w" width="1411" height="375" alt="Feature is dependent on the get_columns function"\u003e\r\n  \u003cnoscript\u003e\u003cimg class="img-fluid" sizes="100vw" srcset="/docs/projects/reports-configurations/image-2_hu9fa8bcf62c1f57f44beb4f4a30d2d787_35231_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-2_hu9fa8bcf62c1f57f44beb4f4a30d2d787_35231_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-2_hu9fa8bcf62c1f57f44beb4f4a30d2d787_35231_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-2_hu9fa8bcf62c1f57f44beb4f4a30d2d787_35231_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-2_hu9fa8bcf62c1f57f44beb4f4a30d2d787_35231_500x0_resize_box_2.png 500w" src="/docs/projects/reports-configurations/image-2.png" width="1411" height="375" alt="Feature is dependent on the get_columns function"\u003e\u003c/noscript\u003e\r\n  \r\n\u003c/figure\u003e\r\n\n\u003cp\u003eThis feature heavily relies on consistency in coding practices. It presupposes that all Python files for standard reports adhere to a standardized pattern. Specifically, the absence of the \u003ccode\u003eget_columns\u003c/code\u003e function in the Python file associated with a report leads to the assumption of dynamic columns. Conversely, if the \u003ccode\u003eget_columns\u003c/code\u003e function exists, an attempt is made to execute it using default filter values as parameters. If execution fails, it is also assumed that the report employs dynamic columns.\u003c/p\u003e\n\u003ch4 id="maintenance-of-get_configurable_columns"\u003eMaintenance of \u003ccode\u003eget_configurable_columns\u003c/code\u003e\u003c/h4\u003e\n\u003cfigure class="border-0"\u003e\r\n  \u003cimg class="img-fluid lazyload blur-up" data-sizes="auto" src="/docs/projects/reports-configurations/image-1_hu3f5d651e3e4beec14a4c829c6f1ddf77_34891_20x0_resize_box_2.png" data-srcset="/docs/projects/reports-configurations/image-1_hu3f5d651e3e4beec14a4c829c6f1ddf77_34891_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-1_hu3f5d651e3e4beec14a4c829c6f1ddf77_34891_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-1_hu3f5d651e3e4beec14a4c829c6f1ddf77_34891_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-1_hu3f5d651e3e4beec14a4c829c6f1ddf77_34891_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-1_hu3f5d651e3e4beec14a4c829c6f1ddf77_34891_500x0_resize_box_2.png 500w" width="1325" height="370" alt="Maintenance of get_configurable_columns"\u003e\r\n  \u003cnoscript\u003e\u003cimg class="img-fluid" sizes="100vw" srcset="/docs/projects/reports-configurations/image-1_hu3f5d651e3e4beec14a4c829c6f1ddf77_34891_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-1_hu3f5d651e3e4beec14a4c829c6f1ddf77_34891_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-1_hu3f5d651e3e4beec14a4c829c6f1ddf77_34891_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-1_hu3f5d651e3e4beec14a4c829c6f1ddf77_34891_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-1_hu3f5d651e3e4beec14a4c829c6f1ddf77_34891_500x0_resize_box_2.png 500w" src="/docs/projects/reports-configurations/image-1.png" width="1325" height="370" alt="Maintenance of get_configurable_columns"\u003e\u003c/noscript\u003e\r\n  \r\n\u003c/figure\u003e\r\n\n\u003cp\u003eFor reliable utilization of the feature in conjunction with dynamic columns, it is imperative to retain the \u003ccode\u003eget_configurable_columns\u003c/code\u003e function. This facilitates the configuration of non-dynamic columns within the complete column list.\u003c/p\u003e\n\u003ch4 id="alterations-in-the-json-file-of-individual-reports"\u003eAlterations in the JSON File of Individual Reports\u003c/h4\u003e\n\u003cfigure class="border-0"\u003e\r\n  \u003cimg class="img-fluid lazyload blur-up" data-sizes="auto" src="/docs/projects/reports-configurations/image_huf26e2ab9aadf3b22cde1168ad94da9cb_89429_20x0_resize_box_2.png" data-srcset="/docs/projects/reports-configurations/image_huf26e2ab9aadf3b22cde1168ad94da9cb_89429_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image_huf26e2ab9aadf3b22cde1168ad94da9cb_89429_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image_huf26e2ab9aadf3b22cde1168ad94da9cb_89429_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image_huf26e2ab9aadf3b22cde1168ad94da9cb_89429_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image_huf26e2ab9aadf3b22cde1168ad94da9cb_89429_500x0_resize_box_2.png 500w" width="1634" height="455" alt="File changes in the JSON file of individual reports"\u003e\r\n  \u003cnoscript\u003e\u003cimg class="img-fluid" sizes="100vw" srcset="/docs/projects/reports-configurations/image_huf26e2ab9aadf3b22cde1168ad94da9cb_89429_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image_huf26e2ab9aadf3b22cde1168ad94da9cb_89429_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image_huf26e2ab9aadf3b22cde1168ad94da9cb_89429_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image_huf26e2ab9aadf3b22cde1168ad94da9cb_89429_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image_huf26e2ab9aadf3b22cde1168ad94da9cb_89429_500x0_resize_box_2.png 500w" src="/docs/projects/reports-configurations/image.png" width="1634" height="455" alt="File changes in the JSON file of individual reports"\u003e\u003c/noscript\u003e\r\n  \r\n\u003c/figure\u003e\r\n\n\u003cp\u003eThis feature introduces new docfields to the Report Doctype. It\u0026rsquo;s crucial to note that the default behavior of the Report Doctype involves storing row values of a report document in a JSON file. Consequently, older reports do not include these newly introduced docfields in their respective JSON files. When a user accesses a specific report from the Report List, this action triggers an update process, adding the new fields to the report\u0026rsquo;s dedicated JSON file. Therefore, even if a user merely opens a Report document form without making any changes, file alterations will be observed.\u003c/p\u003e\n\u003ch4 id="unavailability-of-the-feature-in-query-reports"\u003eUnavailability of the Feature in Query Reports\u003c/h4\u003e\n\u003cfigure class="border-0"\u003e\r\n  \u003cimg class="img-fluid lazyload blur-up" data-sizes="auto" src="/docs/projects/reports-configurations/image-3_huc793080f8c3812357a88c1c92beffdb0_43671_20x0_resize_box_2.png" data-srcset="/docs/projects/reports-configurations/image-3_huc793080f8c3812357a88c1c92beffdb0_43671_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-3_huc793080f8c3812357a88c1c92beffdb0_43671_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-3_huc793080f8c3812357a88c1c92beffdb0_43671_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-3_huc793080f8c3812357a88c1c92beffdb0_43671_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-3_huc793080f8c3812357a88c1c92beffdb0_43671_500x0_resize_box_2.png 500w" width="1471" height="391" alt="Feature is not available on Query Reports"\u003e\r\n  \u003cnoscript\u003e\u003cimg class="img-fluid" sizes="100vw" srcset="/docs/projects/reports-configurations/image-3_huc793080f8c3812357a88c1c92beffdb0_43671_900x0_resize_box_2.png 900w,/docs/projects/reports-configurations/image-3_huc793080f8c3812357a88c1c92beffdb0_43671_800x0_resize_box_2.png 800w,/docs/projects/reports-configurations/image-3_huc793080f8c3812357a88c1c92beffdb0_43671_700x0_resize_box_2.png 700w,/docs/projects/reports-configurations/image-3_huc793080f8c3812357a88c1c92beffdb0_43671_600x0_resize_box_2.png 600w,/docs/projects/reports-configurations/image-3_huc793080f8c3812357a88c1c92beffdb0_43671_500x0_resize_box_2.png 500w" src="/docs/projects/reports-configurations/image-3.png" width="1471" height="391" alt="Feature is not available on Query Reports"\u003e\u003c/noscript\u003e\r\n  \r\n\u003c/figure\u003e\r\n\n\u003cp\u003eQuery reports lack JavaScript (js) and Python (py) files for use as references in defining filters and columns. Parsing the value of the Query/Script text field is unreliable.\u003c/p\u003e\n\u003ch3 id="future-improvements"\u003eFuture Improvements\u003c/h3\u003e\n\u003cp\u003eIn future iterations, comprehensive testing may be necessary. Additionally, it\u0026rsquo;s vital to consider testing the functionalities used by developers. Current testing efforts primarily focus on end-user functionalities. Developers interact with the Report Doctype when creating or modifying reports, involving changes to JavaScript (js) or Python (py) files. Hence, assessing the potential for disruptions when modifying these files is critical.\u003c/p\u003e\n\u003cp\u003eConsideration should also be given to addressing some, if not all, known limitations of this feature.\u003c/p\u003e\n\u003ch3 id="references"\u003eReferences\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://app.clickup.com/t/865cwwyjc"\u003eTask Card\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://discord.com/channels/583992942612447252/1133033028151676928"\u003eDiscord discussion\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePRs:\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://github.com/BizKit-Tech/frappe/pull/145"\u003eOriginal PR\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://github.com/BizKit-Tech/frappe/pull/148"\u003ePR for modification of the reports\' python file boilerplate\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://github.com/BizKit-Tech/frappe/pull/158"\u003eBugfix PR 1\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://github.com/BizKit-Tech/frappe/pull/161"\u003eBugfix PR 2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:15,href:"/docs/others/streamlining-server-deployment-with-github-actions/",title:"Streamlining Server Deployment with Github Actions",description:"",content:'\u003ch2 id="introduction"\u003eIntroduction\u003c/h2\u003e\n\u003ch3 id="a-problem"\u003eA. Problem\u003c/h3\u003e\n\u003cp\u003eDeploying code to development servers can be a time-consuming and error-prone process when done manually. We need to perform the following deployment steps on multiple development servers:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eMake changes to the codebase\u003c/li\u003e\n\u003cli\u003ePush the changes to GitHub\u003c/li\u003e\n\u003cli\u003eSSH into each individual dev server\u003c/li\u003e\n\u003cli\u003ePull the latest changes from GitHub\u003c/li\u003e\n\u003cli\u003eDepending on the nature of the changes, execute the appropriate \u003ccode\u003ebench\u003c/code\u003e command:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebench migrate\u003c/code\u003e is used for changes in Python, JS, and JSON files, as well as changes inside the \u003ccode\u003ecustomizations\u003c/code\u003e folder (custom fields, custom properties, custom scripts, print formats)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench build\u003c/code\u003e is used for changes in public HTML, CSS, and JS files\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebench import-initial-customization\u003c/code\u003e is used for changes inside the \u003ccode\u003ecustomizations/initial\u003c/code\u003e folder\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAs the development team continues to grow and the frequency of code deployments increases, this manual process becomes increasingly inefficient and error-prone. It not only consumes valuable developer time but also introduces the risk of human errors creeping into the deployment process.\u003c/p\u003e\n\u003ch3 id="b-solution"\u003eB. Solution\u003c/h3\u003e\n\u003cp\u003eTo address the challenges posed by manual deployment, we could automate the entire deployment process using \u003ca href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions"\u003e\u003cstrong\u003eGitHub Actions\u003c/strong\u003e\u003c/a\u003e. Since our source code is already hosted on GitHub, automating deployments with GitHub Actions provides an ideal solution.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIdeal Process:\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDevelopers make changes to the codebase\u003c/li\u003e\n\u003cli\u003eThey push the changes to GitHub\u003c/li\u003e\n\u003cli\u003eGitHub Actions automatically deploys the changes to the appropriate development servers\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy leveraging GitHub Actions, we can streamline the deployment process, making it more efficient, consistent, and less error-prone.\u003c/p\u003e\n\u003ch2 id="creating-the-github-actions-workflow"\u003eCreating the GitHub Actions Workflow\u003c/h2\u003e\n\u003cp\u003eIn this section, we will go through the process of creating a GitHub Actions workflow to automate the deployment of our code to multiple development servers.\u003c/p\u003e\n\u003ch3 id="a-creating-the-base-workflow-one-job-for-every-server"\u003eA. Creating the Base Workflow: One Job for Every Server\u003c/h3\u003e\n\u003cp\u003eTo start automating our deployment process, let\u0026rsquo;s follow these steps:\u003c/p\u003e\n\u003ch4 id="1-create-a-new-yaml-file-for-the-workflow"\u003e1. Create a New .yaml File for the Workflow\u003c/h4\u003e\n\u003cp\u003eLet\u0026rsquo;s begin by creating a new \u003ccode\u003e.yaml\u003c/code\u003e file in the \u003ccode\u003e.github/workflows\u003c/code\u003e folder within our repository to define the workflow. Let\u0026rsquo;s name it \u003ccode\u003edeploy-to-dev-servers.yaml\u003c/code\u003e. This file will contain the instructions for GitHub Actions.\u003c/p\u003e\n\u003ch4 id="2-trigger-workflow-on-push-to-test-branch"\u003e2. Trigger Workflow on Push to Test Branch\u003c/h4\u003e\n\u003cp\u003eNext, we are going to configure the workflow to trigger when code changes are pushed to the desired branch (e.g., \u003ccode\u003etest\u003c/code\u003e). We can use the \u003ccode\u003eon\u003c/code\u003e keyword to specify the event that triggers the workflow, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003ename: Deploy-to-Dev\nrun-name: Deploy to development servers by @${{ github.actor }}\n\non:\n  push:\n    branches:\n      - test\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="3-define-the-environment-variables"\u003e3. Define the Environment Variables\u003c/h4\u003e\n\u003cp\u003eTo ensure security and avoid hardcoding sensitive information, such as SSH keys, access tokens, and server IP addresses, we will use \u003ca href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions#about-secrets"\u003eGitHub Secrets\u003c/a\u003e to store these values securely. GitHub Secrets can be accessed within our workflow, and they help keep our credentials safe.\u003c/p\u003e\n\u003cp\u003eWe can utilize the \u003ccode\u003eenv\u003c/code\u003e and GitHub \u003ca href="https://docs.github.com/en/actions/learn-github-actions/contexts"\u003econtexts\u003c/a\u003e to define and access these variables. This centralizes our configuration for easy maintenance and readability. For instance:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003eenv:\n  APP: erpnext\n  APP_PATH: frappe-bench/apps/erpnext\n  V13_BRANCH: test\n  REPO_URL: git@github.com:${{ github.repository }}.git\n  TOKEN: ${{ secrets.GIT_TOKEN }}\n  SSH_USER: ${{ secrets.EC2_USERNAME }}\n  SSH_KEY: ${{ secrets.EC2_SSH_KEY }}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="4-create-a-job-for-every-server"\u003e4. Create a Job for Every Server\u003c/h4\u003e\n\u003cp\u003eBecause at this point we still don\u0026rsquo;t know any better, we will be creating a separate job for each server. This is not ideal because it will be difficult to maintain as the number of servers grows, but we will get to that later. For now, let\u0026rsquo;s do it this way.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eName the Job After the Server\u003c/strong\u003e: Let\u0026rsquo;s give each job a clear and descriptive name based on the server it deploys to.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003ejobs:\n  fork-dev:\n    runs-on: ubuntu-latest\n    env:\n      SERVER_NAME: fork_dev\n      SERVER_IP: ${{ secrets.FORK_DEV }}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCheckout the Code\u003c/strong\u003e: We will utilize the \u003ccode\u003eactions/checkout@v2\u003c/code\u003e action to check out the code from our repository. This action makes our repository content available for the workflow.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e    steps:\n      - uses: actions/checkout@v2\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCheck What Type of Files Were Changed\u003c/strong\u003e: To determine the type of changes made in the code, we will use the \u003ccode\u003edorny/paths-filter@v2\u003c/code\u003e action. This action allows us to filter paths based on file extensions, making it easier to decide whether to run \u003ccode\u003ebench migrate\u003c/code\u003e, \u003ccode\u003ebench build\u003c/code\u003e, or \u003ccode\u003ebench import-initial-customization\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            python:\n              - \'${{ env.APP }}/**/*.py\'\n            json:\n              - \'${{ env.APP }}/**/*.json\'\n            js:\n              - \'${{ env.APP }}/**/*.js\'\n            customizations:\n              - \'${{ env.APP }}/customizations/custom_fields/**\'\n              - \'${{ env.APP }}/customizations/custom_properties/**\'\n              - \'${{ env.APP }}/customizations/custom_scripts/**\'\n              - \'${{ env.APP }}/customizations/print_formats/**\'\n            public:\n              - \'${{ env.APP }}/public/**\'\n            custom_fields:\n              - \'${{ env.APP }}/customizations/initial/custom_fields/**\'\n            custom_properties:\n              - \'${{ env.APP }}/customizations/initial/custom_properties/**\'\n            custom_scripts:\n              - \'${{ env.APP }}/customizations/initial/custom_scripts/**\'\n            print_formats:\n              - \'${{ env.APP }}/customizations/initial/print_formats/**\'\n          base: ${{ github.ref }}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSSH into the Server\u003c/strong\u003e: Inside the job, we are going to set up SSH keys and a configuration file for the SSH client. This enables secure access to the target development server.\u003c/p\u003e\n\u003cp\u003eFor this to work, we must add the Amazon EC2 public key associated with GitHub Actions to the \u003ccode\u003eauthorized_keys\u003c/code\u003e file on the server. This configuration step must be done to all of our development servers.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e      - name: Configure SSH\n        shell: bash\n        run: |\n          mkdir -p ~/.ssh/\n          echo \u0026quot;$SSH_KEY\u0026quot; \u0026gt; ~/.ssh/${{ env.SERVER_NAME }}.key\n          chmod 600 ~/.ssh/${{ env.SERVER_NAME }}.key\n          cat \u0026gt;\u0026gt;~/.ssh/config \u0026lt;\u0026lt;END\n          Host ${{ env.SERVER_NAME }}\n            HostName ${{ env.SERVER_IP }}\n            User $SSH_USER\n            IdentityFile ~/.ssh/${{ env.SERVER_NAME }}.key\n            StrictHostKeyChecking no\n          END\n        env:\n          SSH_USER: ${{ env.SSH_USER }}\n          SSH_KEY: ${{ env.SSH_KEY }}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ePull the Code\u003c/strong\u003e: Instead of using \u003ccode\u003egit pull\u003c/code\u003e using the web URL, which would require developer credentials on the server, we will use the SSH method.\u003c/p\u003e\n\u003cp\u003eTo do this, we need to set up SSH keys within the dev servers and add these keys to our organization\u0026rsquo;s GitHub account (bizkit-engineer). This will allow the server to pull the code from GitHub without requiring developer credentials.\u003c/p\u003e\n\u003cp\u003eWe can generate an SSH key without a passphrase in our local machine by running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-powershell"\u003essh-keygen -t rsa\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd then we will copy the contents of the generated public key (\u003ccode\u003eid_rsa.pub\u003c/code\u003e) and \u003ca href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account"\u003eadd it to our organization\u0026rsquo;s GitHub account\u003c/a\u003e. It is best to label it GitHub Actions so it\u0026rsquo;s easily identifiable.\u003c/p\u003e\n\u003cp\u003eWe now need to copy the keys (\u003ccode\u003eid_rsa\u003c/code\u003e and \u003ccode\u003eid_rsa.pub\u003c/code\u003e) to the dev servers and save them inside the \u003ccode\u003e~/.ssh\u003c/code\u003e directory. Make sure the keys are secure by running the following commands inside the directory where the keys are saved:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-powershell"\u003echmod 400 id_rsa\nchmod 400 id_rsa.pub\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we need to create a \u003ccode\u003egit_pull.sh\u003c/code\u003e file in the root directory of the server. This file will contain the commands to pull the code from GitHub. It takes three arguments: the path to the app, the repository URL, and the branch name. It first changes the directory to the app path, then checks out the specified branch and pulls the code from the repository.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e#!/bin/bash\ncd $1\ngit checkout $3\ngit pull $2 $3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFinally, we add a step to the job (remember: the GitHub Actions workflow) to execute this script.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e      - name: Run git pull\n        shell: bash\n        run: ssh ${{ env.SERVER_NAME }} \'\u0026quot;bash ./git_pull.sh ${{ env.APP_PATH }} ${{ env.REPO_URL }} ${{ env.V13_BRANCH }}\'\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDo \u003ccode\u003ebench migrate\u003c/code\u003e, \u003ccode\u003ebench build\u003c/code\u003e or \u003ccode\u003ebench import-initial-customization\u003c/code\u003e Depending on the Files Changed\u003c/strong\u003e: Finally, we are going to create a step to execute the appropriate command (\u003ccode\u003ebench migrate\u003c/code\u003e, \u003ccode\u003ebench build\u003c/code\u003e, or \u003ccode\u003ebench import-initial-customization\u003c/code\u003e) based on the type of changes detected. \u003ca name="bench-command-depending-on-file-changed"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eFor this step, we need to create three bash scripts and save them in the root directory of the dev servers so we can run the \u003ccode\u003ebench\u003c/code\u003e commands, similar to the previous step.\u003c/p\u003e\n\u003cp\u003eFirst, let\u0026rsquo;s create \u003ccode\u003e./bench_migrate.sh\u003c/code\u003e which is responsible for the \u003ccode\u003ebench migrate\u003c/code\u003e command. It takes in one argument, which is the app name.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e#! /usr/bin/bash\ncd frappe-bench\n/home/ubuntu/.pyenv/shims/bench migrate\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, let\u0026rsquo;s create \u003ccode\u003e./bench_build.sh\u003c/code\u003e which is responsible for the \u003ccode\u003ebench build\u003c/code\u003e command. It also takes in the app name as an argument.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e#! /usr/bin/bash\ncd frappe-bench\n/home/ubuntu/.pyenv/shims/bench build --app $1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLastly, let\u0026rsquo;s create \u003ccode\u003e./bench_import_initial_customization.sh\u003c/code\u003e which is responsible for the \u003ccode\u003ebench import-initial-customization\u003c/code\u003e command. It takes in two arguments: the app name and the customization type (\u003ccode\u003ecustom_fields\u003c/code\u003e, \u003ccode\u003ecustom_porperties\u003c/code\u003e, \u003ccode\u003ecustom_scripts\u003c/code\u003e, \u003ccode\u003eprint_formats\u003c/code\u003e).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e#! /usr/bin/bash\ncd frappe-bench\n/home/ubuntu/.pyenv/shims/bench import-initial-customization $1 $2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you may have noticed, we are not simply using \u003ccode\u003ebench\u003c/code\u003e in the scripts because we will be executing them using the \u003ccode\u003essh\u003c/code\u003e command without logging into a shell prompt. This method will not initialize the environment we are connecting to, so if \u003ccode\u003ebench\u003c/code\u003e is installed in a Python virtual environment, we need to specify its absolute file path so it can be executed properly.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNote: The bash scripts can be further improved by doing something like the script below (which you will also see later in this document):\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e#! /usr/bin/bash\nif [ \u0026quot;$(which bench)\u0026quot; ]; then \n  bench_path=\u0026quot;$(which bench)\u0026quot;;\nelse \n  bench_path=\u0026quot;/home/ubuntu/.pyenv/shims/bench\u0026quot;;\nfi\ncd frappe-bench\n$bench_path build --app $1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we have the scripts, we can add the steps to the job. We will use the \u003ccode\u003eif\u003c/code\u003e keyword to execute the step only if the corresponding file type was changed. For example, if a Python file was changed, we will execute the \u003ccode\u003ebench migrate\u003c/code\u003e command. If a file inside the \u003ccode\u003ecustomizations/initial\u003c/code\u003e folder was changed, we will execute the \u003ccode\u003ebench import-initial-customization\u003c/code\u003e command. If a public JS file was changed, we will execute the \u003ccode\u003ebench build\u003c/code\u003e command. Here is how it looks:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e      - name: Run bench migrate\n        shell: bash\n        if: steps.filter.outputs.python == \'true\' || steps.filter.outputs.json == \'true\' || steps.filter.outputs.customizations == \'true\' || steps.filter.outputs.js == \'true\'\n        run: ssh ${{ env.SERVER_NAME }} \'bash ./bench_migrate.sh\'\n\n      - name: Run bench build\n        shell: bash\n        if: steps.filter.outputs.public == \'true\'\n        run: ssh ${{ env.SERVER_NAME }} \'bash ./bench_build.sh ${{ env.APP }}\'\n\n      - name: Import initial custom fields\n        shell: bash\n        if: steps.filter.outputs.custom_fields == \'true\'\n        run: ssh ${{ env.SERVER_NAME }} \'bash ./bench_import_initial_customization.sh ${{ env.APP }} custom_fields\'\n\n      - name: Import initial custom properties\n        shell: bash\n        if: steps.filter.outputs.custom_properties == \'true\'\n        run: ssh ${{ env.SERVER_NAME }} \'bash ./bench_import_initial_customization.sh ${{ env.APP }} custom_properties\'\n\n      - name: Import initial custom scripts\n        shell: bash\n        if: steps.filter.outputs.custom_scripts == \'true\'\n        run: ssh ${{ env.SERVER_NAME }} \'bash ./bench_import_initial_customization.sh ${{ env.APP }} custom_scripts\'\n        \n      - name: Import initial print formats\n        shell: bash\n        if: steps.filter.outputs.print_formats == \'true\'\n        run: ssh ${{ env.SERVER_NAME }} \'bash ./bench_import_initial_customization.sh ${{ env.APP }} print_formats\'\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBut imagine duplicating all of the steps above for every job and across multiple repositories. It would be a nightmare to maintain. So, instead of repeatedly defining the steps, we can create a reusable job with the necessary steps and use it for every job in our main workflow. This is where GitHub\u0026rsquo;s \u003ca href="https://docs.github.com/en/actions/creating-actions/creating-a-composite-action"\u003e\u003cstrong\u003ecomposite actions\u003c/strong\u003e\u003c/a\u003e come in.\u003c/p\u003e\n\u003ch3 id="b-refactoring-the-workflow-part-1-creating-a-composite-action"\u003eB. Refactoring the Workflow (Part 1): Creating a Composite Action\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s start by creating a new GitHub repository named \u003ccode\u003ebizkit_composite_actions\u003c/code\u003e. Inside this repository, let\u0026rsquo;s establish a folder structure as follows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreate an \u003ccode\u003eactions\u003c/code\u003e folder.\u003c/li\u003e\n\u003cli\u003eInside the \u003ccode\u003eactions\u003c/code\u003e folder, create a new folder named \u003ccode\u003edeploy-to-ec2\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eInside the \u003ccode\u003edeploy-to-ec2\u003c/code\u003e folder, create a file named \u003ccode\u003eaction.yaml\u003c/code\u003e. This file will house our composite action.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe can now proceed to define the composite action.\u003c/p\u003e\n\u003cp\u003eFirst, we want to ensure our composite action can be adaptable across different jobs with varying parameters. We can do that by utilizing action \u003ca href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#inputs"\u003einputs\u003c/a\u003e. These inputs will enable us to pass necessary parameters to the action dynamically.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003ename: \u0026quot;Deploy to EC2\u0026quot;\ndescription: \u0026quot;Pushes changes to EC2 server\u0026quot;\n\ninputs:\n  app_name:\n    description: \u0026quot;Name of the app (e.g. erpnext)\u0026quot;\n    required: true\n  app_path:\n    description: \u0026quot;File path of the app (e.g. frappe-bench/apps/erpnext)\u0026quot;\n    required: true\n  branch_name:\n    description: \u0026quot;Name of the branch to deploy (e.g. test)\u0026quot;\n    required: true\n  server_name:\n    description: \u0026quot;Name of the server to deploy to (e.g. bizkit_dev)\u0026quot;\n    required: true\n  server_ip:\n    description: \u0026quot;IP address of the server to deploy to\u0026quot;\n    required: true\n  ssh_user:\n    description: \u0026quot;SSH username for the server\u0026quot;\n    required: true\n  ssh_key:\n    description: \u0026quot;SSH key for the server\u0026quot;\n    required: true\n  bench_migrate_script:\n    description: \u0026quot;Command for running bench migrate\u0026quot;\n    required: false\n    default: \u0026quot;bash ./bench_migrate.sh\u0026quot;\n  bench_build_script:\n    description: \u0026quot;Command for running bench build\u0026quot;\n    required: false\n    default: \u0026quot;bash ./bench_build.sh\u0026quot;\n  bench_import_initial_customization_script:\n    description: \u0026quot;Command for running bench import-initial-customization\u0026quot;\n    required: false\n    default: \u0026quot;bash ./bench_import_initial_customization.sh\u0026quot;\n  git_pull_script:\n    description: \u0026quot;Command for running git pull\u0026quot;\n    required: false\n    default: \u0026quot;bash ./git_pull.sh\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, let\u0026rsquo;s define the steps of the action within the \u003ccode\u003eaction.yaml\u003c/code\u003e file. We will use the steps we have already implemented in our original workflow script. These steps should encapsulate the logic for checking file changes, SSH access, code retrieval, and the execution of \u003ccode\u003ebench\u003c/code\u003e commands.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003eruns:\n  using: \u0026quot;composite\u0026quot;\n  steps:\n    - uses: dorny/paths-filter@v2\n      id: filter\n      with:\n        filters: |\n          python:\n            - \'${{ inputs.app_name }}/**/*.py\'\n          json:\n            - \'${{ inputs.app_name }}/**/*.json\'\n          js:\n            - \'${{ inputs.app_name }}/**/*.js\'\n          customizations:\n            - \'${{ inputs.app_name }}/customizations/custom_fields/**\'\n            - \'${{ inputs.app_name }}/customizations/custom_properties/**\'\n            - \'${{ inputs.app_name }}/customizations/custom_scripts/**\'\n            - \'${{ inputs.app_name }}/customizations/print_formats/**\'\n          public:\n            - \'${{ inputs.app_name }}/public/**\'\n          custom_fields:\n            - \'${{ inputs.app_name }}/customizations/initial/custom_fields/**\'\n          custom_properties:\n            - \'${{ inputs.app_name }}/customizations/initial/custom_properties/**\'\n          custom_scripts:\n            - \'${{ inputs.app_name }}/customizations/initial/custom_scripts/**\'\n          print_formats:\n            - \'${{ inputs.app_name }}/customizations/initial/print_formats/**\'\n        base: ${{ github.ref }}\n      \n    - name: Configure SSH\n      shell: bash\n      run: |\n        mkdir -p ~/.ssh/\n        echo \u0026quot;$SSH_KEY\u0026quot; \u0026gt; ~/.ssh/${{ inputs.server_name }}.key\n        chmod 600 ~/.ssh/${{ inputs.server_name }}.key\n        cat \u0026gt;\u0026gt;~/.ssh/config \u0026lt;\u0026lt;END\n        Host ${{ inputs.server_name }}\n          HostName ${{ inputs.server_ip }}\n          User $SSH_USER\n          IdentityFile ~/.ssh/${{ inputs.server_name }}.key\n          StrictHostKeyChecking no\n        END\n      env:\n        SSH_USER: ${{ inputs.ssh_user }}\n        SSH_KEY: ${{ inputs.ssh_key }}\n\n    - name: Run git pull\n      shell: bash\n      run: ssh ${{ inputs.server_name }} \'${{ inputs.git_pull_script }} ${{ inputs.app_path }} ${{ env.REPO_URL }} ${{ inputs.branch_name }}\'\n      env:\n        REPO_URL: git@github.com:${{ github.repository }}.git\n\n    - name: Run bench migrate\n      shell: bash\n      if: steps.filter.outputs.python == \'true\' || steps.filter.outputs.json == \'true\' || steps.filter.outputs.customizations == \'true\' || steps.filter.outputs.js == \'true\'\n      run: ssh ${{ inputs.server_name }} \'${{ inputs.bench_migrate_script }}\'\n\n    - name: Run bench build\n      shell: bash\n      if: steps.filter.outputs.public == \'true\'\n      run: ssh ${{ inputs.server_name }} \'${{ inputs.bench_build_script }} ${{ inputs.app_name }}\'\n\n    - name: Import initial custom fields\n      shell: bash\n      if: steps.filter.outputs.custom_fields == \'true\'\n      run: ssh ${{ inputs.server_name }} \'${{ inputs.bench_import_initial_customization_script }} ${{ inputs.app_name }} custom_fields\'\n\n    - name: Import initial custom properties\n      shell: bash\n      if: steps.filter.outputs.custom_properties == \'true\'\n      run: ssh ${{ inputs.server_name }} \'${{ inputs.bench_import_initial_customization_script }} ${{ inputs.app_name }} custom_properties\'\n\n    - name: Import initial custom scripts\n      shell: bash\n      if: steps.filter.outputs.custom_scripts == \'true\'\n      run: ssh ${{ inputs.server_name }} \'${{ inputs.bench_import_initial_customization_script }} ${{ inputs.app_name }} custom_scripts\'\n    \n    - name: Import initial print formats\n      shell: bash\n      if: steps.filter.outputs.print_formats == \'true\'\n      run: ssh ${{ inputs.server_name }} \'${{ inputs.bench_import_initial_customization_script }} ${{ inputs.app_name }} print_formats\'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd that\u0026rsquo;s it! We have successfully created a composite action. Now, we can use this action in our workflow script.\u003c/p\u003e\n\u003cp\u003eGoing back to our original workflow script, we are going to replace the steps starting from the step that uses \u003ccode\u003edorny/paths-filter@v2\u003c/code\u003e to the last step with our composite action.\u003c/p\u003e\n\u003cp\u003eBecause the composite action resides in a private repository, we need to add this step first:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e    - name: Get composite action repo\n      uses: actions/checkout@v2\n      with:\n        repository: BizKit-Tech/bizkit_composite_actions\n        path: .github/bizkit_actions\n        token: ${{ env.TOKEN }}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis step checks out the composite action repository and stores it in the \u003ccode\u003e.github/bizkit_actions\u003c/code\u003e folder in our container, ready for use.\u003c/p\u003e\n\u003cp\u003eFinally, in our workflow script, we can utilize the composite action like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e    - name: Deploy to server\n      uses: ./.github/bizkit_actions/actions/deploy-to-ec2\n      with:\n        app_name: ${{ env.APP }}\n        app_path: ${{ env.APP_PATH }}\n        branch_name: ${{ env.V13_BRANCH }}\n        server_name: ${{ matrix.server_name }}\n        server_ip: ${{ secrets[matrix.server_name] }}\n        ssh_user: ${{ env.SSH_USER }}\n        ssh_key: ${{ env.SSH_KEY }}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe workflow script at this point should look something like this, but with multiple jobs having the same steps:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003ename: Deploy-to-Dev\nrun-name: Deploy to development servers by @${{ github.actor }}\n\non:\n  push:\n    branches:\n      - test\n\nenv:\n  APP: bizkit_core\n  APP_PATH: frappe-bench/apps/bizkit_core\n  V13_BRANCH: test\n  REPO_URL: git@github.com:${{ github.repository }}.git\n  TOKEN: ${{ secrets.GIT_TOKEN }}\n  SSH_USER: ${{ secrets.EC2_USERNAME }}\n  SSH_KEY: ${{ secrets.EC2_SSH_KEY }}\n\njobs:\n  fork-dev:\n    runs-on: ubuntu-latest\n    env:\n      SERVER_NAME: fork_dev\n      SERVER_IP: ${{ secrets.FORK_DEV }}\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Get composite action repo\n        uses: actions/checkout@v2\n        with:\n          repository: BizKit-Tech/bizkit_composite_actions\n          path: .github/bizkit_actions\n          token: ${{ env.TOKEN }}\n      - name: Deploy to server\n        uses: ./.github/bizkit_actions/actions/deploy-to-ec2\n        with:\n          app_name: ${{ env.APP }}\n          app_path: ${{ env.APP_PATH }}\n          branch_name: ${{ env.V13_BRANCH }}\n          server_name: ${{ env.SERVER_NAME }}\n          server_ip: ${{ env.SERVER_IP }}\n          ssh_user: ${{ env.SSH_USER }}\n          ssh_key: ${{ env.SSH_KEY }}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLooks good so far, but we can still improve it further. Since every job is still using the same steps, why don\u0026rsquo;t we just loop through a list of our dev servers? Good thing GitHub Actions has \u003ca href="https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs"\u003e\u003cstrong\u003ematrix strategies\u003c/strong\u003e\u003c/a\u003e that allow us to do just that.\u003c/p\u003e\n\u003ch3 id="c-refactoring-the-workflow-part-2-using-a-matrix-strategy"\u003eC. Refactoring the Workflow (Part 2): Using a Matrix Strategy\u003c/h3\u003e\n\u003cp\u003eA matrix strategy allows us to run a job multiple times with different configurations. This is perfect for our use case because we can run the same job for every server, but with different parameters.\u003c/p\u003e\n\u003cp\u003eTo use a matrix strategy, we need to define the matrix in the \u003ccode\u003ejobs\u003c/code\u003e section of our workflow script. We can do this by adding a \u003ccode\u003estrategy\u003c/code\u003e section inside the job. The \u003ccode\u003estrategy\u003c/code\u003e section contains the \u003ccode\u003ematrix\u003c/code\u003e section, which defines the matrix. The matrix is then defined by specifying the variables followed by their array of values. In our case, we want to define the \u003ccode\u003eserver_name\u003c/code\u003e variable.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003ejobs:\n  deploy:\n    name: Deploy to Dev\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        server_name: [FORK_DEV, GIORMI_DEV, LUXEN_DEV, NORI_DEV, TTC_DEV, RAMESH_DEV, LANCE_DEV]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake note that the values must be the same as the names of the secrets we defined in our repository. For example, we have a secret named \u003ccode\u003eFORK_DEV\u003c/code\u003e that contains the IP address of the \u003ccode\u003efork_dev\u003c/code\u003e server. We also have a secret named \u003ccode\u003eGIORMI_DEV\u003c/code\u003e that contains the IP address of the \u003ccode\u003egiormi_dev\u003c/code\u003e server. And so on. This is important because we will be using the values of the \u003ccode\u003eserver_name\u003c/code\u003e variable to access the corresponding secrets.\u003c/p\u003e\n\u003cp\u003eThen we can proceed to define the steps of the job. The workflow should now look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003ename: Deploy-to-Dev\nrun-name: Deploy to development servers by @${{ github.actor }}\n\non:\n  push:\n    branches:\n      - test\n\nenv:\n  APP: erpnext\n  APP_PATH: frappe-bench/apps/erpnext\n  V13_BRANCH: test\n  REPO_URL: git@github.com:${{ github.repository }}.git\n  TOKEN: ${{ secrets.GIT_TOKEN }}\n  SSH_USER: ${{ secrets.EC2_USERNAME }}\n  SSH_KEY: ${{ secrets.EC2_SSH_KEY }}\n\njobs:\n  deploy:\n    name: Deploy to Dev\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        server_name: [FORK_DEV, GIORMI_DEV, LUXEN_DEV, NORI_DEV, TTC_DEV, RAMESH_DEV, LANCE_DEV]\n    \n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Get composite action repo\n        uses: actions/checkout@v2\n        with:\n          repository: BizKit-Tech/bizkit_composite_actions\n          path: .github/bizkit_actions\n          token: ${{ env.TOKEN }}\n      \n      - name: Deploy to server\n        uses: ./.github/bizkit_actions/actions/deploy-to-ec2\n        with:\n          app_name: ${{ env.APP }}\n          app_path: ${{ env.APP_PATH }}\n          branch_name: ${{ env.V13_BRANCH }}\n          server_name: ${{ matrix.server_name }}\n          server_ip: ${{ secrets[matrix.server_name] }}\n          ssh_user: ${{ env.SSH_USER }}\n          ssh_key: ${{ env.SSH_KEY }}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt looks a lot cleaner than the previous iterations, doesn\u0026rsquo;t it?\u003c/p\u003e\n\u003cp\u003eBut wait, there\u0026rsquo;s more ~\u003c/p\u003e\n\u003ch3 id="d-checking-for-skipped-dev-servers"\u003eD. Checking for Skipped Dev Servers\u003c/h3\u003e\n\u003cp\u003eWe are almost done, but there is one more thing we need to do. Sometimes there is a need to skip a dev server from the deployment process. For instance, we might want to skip the \u003ccode\u003efork_dev\u003c/code\u003e server because it is being used for user training and we don\u0026rsquo;t want to disrupt the users. It is not ideal to remove the \u003ccode\u003efork_dev\u003c/code\u003e server from the matrix because we still need to deploy to it again in the future. So, what we need is a way to skip a server without removing it from the matrix.\u003c/p\u003e\n\u003cp\u003eWe now know how to create a composite action so we can use that knowledge to create a new one that will check if a server should be skipped or not. Let\u0026rsquo;s call it \u003ccode\u003echeck-auto-updates\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAs usual, in the same repository as the \u003ccode\u003edeploy-to-ec2\u003c/code\u003e action, we start by creating a new folder for the composite action. This time we will name it \u003ccode\u003echeck-auto-updates\u003c/code\u003e. Inside this folder, we create the \u003ccode\u003eaction.yaml\u003c/code\u003e file.\u003c/p\u003e\n\u003cp\u003eSimilar to the \u003ccode\u003edeploy-to-ec2\u003c/code\u003e action, we are going to define the inputs of the action.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003ename: \u0026quot;Check Auto Updates\u0026quot;\ndescription: \u0026quot;Check if automatic updates are enabled on the server\u0026quot;\n\ninputs:\n  server_name:\n    description: \u0026quot;Name of the server to deploy to (e.g. bizkit_dev)\u0026quot;\n    required: true\n  server_ip:\n    description: \u0026quot;IP address of the server to deploy to\u0026quot;\n    required: true\n  ssh_user:\n    description: \u0026quot;SSH username for the server\u0026quot;\n    required: true\n  ssh_key:\n    description: \u0026quot;SSH key for the server\u0026quot;\n    required: true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, the following is something we have not discussed before. We want this action to return a value indicating whether the server should be skipped or not. So, we will declare \u003ca href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions"\u003eoutputs\u003c/a\u003e for the action.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003eoutputs:\n  auto-update:\n    description: \u0026quot;Whether or not to update the server\u0026quot;\n    value: ${{ steps.check-auto-updates.outputs.auto-updates-enabled }}\n  bench-path:\n    description: \u0026quot;Path to bench\u0026quot;\n    value: ${{ steps.get-bench-path.outputs.bench-path }}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe value of the outputs will be set by the steps of the action, which makes the ID of the steps important. We will be using the \u003ccode\u003eid\u003c/code\u003e keyword to set the ID of the steps.\u003c/p\u003e\n\u003cp\u003eIn this workflow, the first thing that we want to do is to configure SSH access to the server the same way we did in the \u003ccode\u003edeploy-to-ec2\u003c/code\u003e action.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003eruns:\n  using: \u0026quot;composite\u0026quot;\n  steps:\n    - name: Configure SSH\n      shell: bash\n      run: |\n        mkdir -p ~/.ssh/\n        echo \u0026quot;$SSH_KEY\u0026quot; \u0026gt; ~/.ssh/${{ inputs.server_name }}.key\n        chmod 600 ~/.ssh/${{ inputs.server_name }}.key\n        cat \u0026gt;\u0026gt;~/.ssh/config \u0026lt;\u0026lt;END\n        Host ${{ inputs.server_name }}\n          HostName ${{ inputs.server_ip }}\n          User $SSH_USER\n          IdentityFile ~/.ssh/${{ inputs.server_name }}.key\n          StrictHostKeyChecking no\n        END\n      env:\n        SSH_USER: ${{ inputs.ssh_user }}\n        SSH_KEY: ${{ inputs.ssh_key }}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, we want to get the path to \u003ccode\u003ebench\u003c/code\u003e on the server because, as discussed previously, executing commands over SSH does not initialize the environment of the server so \u003ccode\u003ebench\u003c/code\u003e will not be detected if it is installed inside a Python virtual environment.\u003c/p\u003e\n\u003cp\u003eWe can do this by creating a new step that executes a bash script that outputs the path to \u003ccode\u003ebench\u003c/code\u003e and assigns it to the \u003ccode\u003ebench-path\u003c/code\u003e variable. In this script, if \u003ccode\u003ewhich bench\u003c/code\u003e returns nothing, then that means \u003ccode\u003ebench\u003c/code\u003e must be inside \u003ccode\u003e/home/ubuntu/.pyenv/shims/\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e    - name: Get path to bench\n      id: get-bench-path\n      shell: bash\n      run: |\n        echo \u0026quot;bench-path=$(\n        ssh ${{ inputs.server_name }} bash \u0026lt;\u0026lt;\'EOF\'\n        if [ \u0026quot;$(which bench)\u0026quot; ];\n        then echo \u0026quot;$(which bench)\u0026quot;;\n        else echo \u0026quot;/home/ubuntu/.pyenv/shims/bench\u0026quot;;\n        fi\n        EOF\n        )\n        \u0026quot; \u0026gt;\u0026gt; $GITHUB_OUTPUT\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake note of the syntax used to execute the script. We are using the \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e operator to pass the script as input to the \u003ccode\u003ebash\u003c/code\u003e command. This is called a \u003ca href="https://www.howtogeek.com/719058/how-to-use-here-documents-in-bash-on-linux/"\u003ehere document\u003c/a\u003e. The \u003ccode\u003e\'EOF\'\u003c/code\u003e is used to mark the end of the document. It is also important that the last \u003ccode\u003eEOF\u003c/code\u003e, \u003ccode\u003e)\u003c/code\u003e and \u003ccode\u003e\u0026quot;\u003c/code\u003e are on different lines to mark the end of each section of the command. If you put them on the same line, the command will not work.\u003c/p\u003e\n\u003cp\u003eThe output of the script is then passed to \u003ca href="https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter"\u003e\u003ccode\u003e$GITHUB_OUTPUT\u003c/code\u003e\u003c/a\u003e, which is a default environment variable in GitHub Actions that stores the output data generated by a step in the workflow. It allows us to pass information, such as file paths or computed values, from one part of our workflow to another.\u003c/p\u003e\n\u003cp\u003eThen, we want to check if automatic updates are enabled on the server. We can do this by creating another step that executes a bash script. The script will check the value of \u003ccode\u003eauto_updates_enabled\u003c/code\u003e in the site config of the server and returns it as an output.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003e    - name: Check auto updates config\n      id: check-auto-updates\n      shell: bash\n      run: echo \u0026quot;auto-updates-enabled=$(ssh ${{ inputs.server_name }} \'cd frappe-bench \u0026amp;\u0026amp; echo $(${{ env.BENCH_PATH }} get-site-config auto_updates_enabled)\')\u0026quot; \u0026gt;\u0026gt; $GITHUB_OUTPUT\n      env:\n        BENCH_PATH: ${{ steps.get-bench-path.outputs.bench-path }}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e(I am not going to discuss the \u003ccode\u003eauto_updates_enabled\u003c/code\u003e config here in detail. But just know that there is now a new checkbox in the System Settings doctype that allows System Managers to enable or disable automatic updates for a site. It modifies the \u003ccode\u003eauto_updates_enabled\u003c/code\u003e config in \u003ccode\u003esite_config.json\u003c/code\u003e. There is also a new \u003ccode\u003ebench\u003c/code\u003e command called \u003ccode\u003eget-site-config\u003c/code\u003e that gets a specific value from the site config.)\u003c/p\u003e\n\u003cp\u003eThe final code should look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003ename: \u0026quot;Check Auto Updates\u0026quot;\ndescription: \u0026quot;Check if automatic updates are enabled on the server\u0026quot;\n\ninputs:\n  server_name:\n    description: \u0026quot;Name of the server to deploy to (e.g. bizkit_dev)\u0026quot;\n    required: true\n  server_ip:\n    description: \u0026quot;IP address of the server to deploy to\u0026quot;\n    required: true\n  ssh_user:\n    description: \u0026quot;SSH username for the server\u0026quot;\n    required: true\n  ssh_key:\n    description: \u0026quot;SSH key for the server\u0026quot;\n    required: true\n\noutputs:\n  auto-update:\n    description: \u0026quot;Whether or not to update the server\u0026quot;\n    value: ${{ steps.check-auto-updates.outputs.auto-updates-enabled }}\n  bench-path:\n    description: \u0026quot;Path to bench\u0026quot;\n    value: ${{ steps.get-bench-path.outputs.bench-path }}\n\nruns:\n  using: \u0026quot;composite\u0026quot;\n  steps:\n    - name: Configure SSH\n      shell: bash\n      run: |\n        mkdir -p ~/.ssh/\n        echo \u0026quot;$SSH_KEY\u0026quot; \u0026gt; ~/.ssh/${{ inputs.server_name }}.key\n        chmod 600 ~/.ssh/${{ inputs.server_name }}.key\n        cat \u0026gt;\u0026gt;~/.ssh/config \u0026lt;\u0026lt;END\n        Host ${{ inputs.server_name }}\n          HostName ${{ inputs.server_ip }}\n          User $SSH_USER\n          IdentityFile ~/.ssh/${{ inputs.server_name }}.key\n          StrictHostKeyChecking no\n        END\n      env:\n        SSH_USER: ${{ inputs.ssh_user }}\n        SSH_KEY: ${{ inputs.ssh_key }}\n\n    - name: Get path to bench\n      id: get-bench-path\n      shell: bash\n      run: |\n        echo \u0026quot;bench-path=$(\n        ssh ${{ inputs.server_name }} bash \u0026lt;\u0026lt;\'EOF\'\n        if [ \u0026quot;$(which bench)\u0026quot; ];\n        then echo \u0026quot;$(which bench)\u0026quot;;\n        else echo \u0026quot;/home/ubuntu/.pyenv/shims/bench\u0026quot;;\n        fi\n        EOF\n        )\n        \u0026quot; \u0026gt;\u0026gt; $GITHUB_OUTPUT\n\n    - name: Check auto updates config\n      id: check-auto-updates\n      shell: bash\n      run: echo \u0026quot;auto-updates-enabled=$(ssh ${{ inputs.server_name }} \'cd frappe-bench \u0026amp;\u0026amp; echo $(${{ env.BENCH_PATH }} get-site-config auto_updates_enabled)\')\u0026quot; \u0026gt;\u0026gt; $GITHUB_OUTPUT\n      env:\n        BENCH_PATH: ${{ steps.get-bench-path.outputs.bench-path }}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eauto-updates-enabled\u003c/code\u003e output is the final output of this action. It will be used by our main workflow to determine whether to skip the server or not.\u003c/p\u003e\n\u003cp\u003eFinally, our main workflow should now look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-yaml"\u003ename: Deploy-to-Dev\nrun-name: Deploy to development servers by @${{ github.actor }}\n\non:\n  push:\n    branches:\n      - test\n\nenv:\n  APP: bizkit_core\n  APP_PATH: frappe-bench/apps/bizkit_core\n  V13_BRANCH: test\n  REPO_URL: git@github.com:${{ github.repository }}.git\n  TOKEN: ${{ secrets.GIT_TOKEN }}\n  SSH_USER: ${{ secrets.EC2_USERNAME }}\n  SSH_KEY: ${{ secrets.EC2_SSH_KEY }}\n\njobs:\n  deploy:\n    name: Deploy to Dev\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        server_name: [FORK_DEV, GIORMI_DEV, LUXEN_DEV, NORI_DEV, TTC_DEV, RAMESH_DEV, LANCE_DEV]\n    \n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Get composite action repo\n        uses: actions/checkout@v2\n        with:\n          repository: BizKit-Tech/bizkit_composite_actions\n          path: .github/bizkit_actions\n          token: ${{ env.TOKEN }}\n      \n      - name: Check if server is skipped\n        id: check-auto-updates\n        uses: ./.github/bizkit_actions/actions/check-auto-updates\n        with:\n          server_name: ${{ matrix.server_name }}\n          server_ip: ${{ secrets[matrix.server_name] }}\n          ssh_user: ${{ env.SSH_USER }}\n          ssh_key: ${{ env.SSH_KEY }}\n      \n      - name: Deploy to server\n        if: steps.check-auto-updates.outputs.auto-update == 1\n        uses: ./.github/bizkit_actions/actions/deploy-to-ec2\n        with:\n          app_name: ${{ env.APP }}\n          app_path: ${{ env.APP_PATH }}\n          branch_name: ${{ env.V13_BRANCH }}\n          server_name: ${{ matrix.server_name }}\n          server_ip: ${{ secrets[matrix.server_name] }}\n          ssh_user: ${{ env.SSH_USER }}\n          ssh_key: ${{ env.SSH_KEY }}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have successfully refactored our workflow script! It is now more readable and maintainable. We can now easily add more servers to the matrix without having to duplicate each step and having to manually check if a server should be skipped or not.\u003c/p\u003e\n\u003ch2 id="tldr"\u003eTL;DR\u003c/h2\u003e\n\u003cp\u003eWe used \u003cstrong\u003eGitHub Actions\u003c/strong\u003e to automate the deployment of our ERPNext code to our development servers. We refactored our workflow script by creating composite actions and using a matrix strategy. The final workflow script can be found in \u003ca href="https://github.com/BizKit-Tech/bizkit_core/blob/test/.github/workflows/deploy-to-dev-servers.yaml"\u003ebizkit_core\u003c/a\u003e, \u003ca href="https://github.com/BizKit-Tech/erpnext/blob/test/.github/workflows/deploy-to-dev-servers.yaml"\u003eerpnext\u003c/a\u003e, and \u003ca href="https://github.com/BizKit-Tech/frappe/blob/test/.github/workflows/deploy-to-dev-servers.yaml"\u003efrappe\u003c/a\u003e. The composite actions can be found in \u003ca href="https://github.com/BizKit-Tech/bizkit_composite_actions"\u003ebizkit_composite_actions\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf we are going to add a new server to the deployment pipeline, these are the steps that we need to follow:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eAdd the server IP address to the secrets of every repo. Use the naming convention: \u003ccode\u003e[SHORT_NAME]_[DEV|PROD]\u003c/code\u003e (e.g. \u003ccode\u003eEPC_DEV\u003c/code\u003e, \u003ccode\u003eGBMI_PROD\u003c/code\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAdd the Amazon EC2 public key for GitHub Actions to the \u003ccode\u003eauthorized_keys\u003c/code\u003e file of the server. This will be used for SSH access to the server.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eObtain the GitHub SSH key files (\u003ccode\u003eid_rsa\u003c/code\u003e and \u003ccode\u003eid_rsa.pub\u003c/code\u003e) added to the BizKit devs GitHub account (bizkit-engineer) and copy these to the \u003ccode\u003e~/.ssh\u003c/code\u003e directory of the server. This will be used for \u003ccode\u003egit pull\u003c/code\u003e using SSH.\u003c/p\u003e\n\u003cp\u003eMake sure the keys are secure by running the following commands inside the directory where the keys are saved.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003echmod 400 id_rsa\nchmod 400 id_rsa.pub\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun a test \u003ccode\u003egit\u003c/code\u003e command to check if the keys are working properly and to add the server to the list of known hosts. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit fetch git@github.com:BizKit-Tech/erpnext.git test\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCopy the following bash scripts in the server\u0026rsquo;s root directory. The contents of these scripts can be found \u003ca href="#bench-command-depending-on-file-changed"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ebench_migrate.sh\u003c/li\u003e\n\u003cli\u003ebench_build.sh\u003c/li\u003e\n\u003cli\u003ebench_import_initial_customization.sh\u003c/li\u003e\n\u003cli\u003egit_pull.sh\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAdd the server name (as defined in step #3) to the matrix of our main workflow.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id="references"\u003eReferences\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eGitHub Actions Workflow Syntax:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#about-yaml-syntax-for-workflows"\u003eGitHub Actions Workflow Syntax\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eCreating Composite Actions:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://docs.github.com/en/actions/creating-actions/creating-a-composite-action"\u003eGitHub Docs - Creating a Composite Action\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions"\u003eGitHub Docs - Metadata Syntax for GitHub Actions (Outputs for Composite Actions)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter"\u003eGitHub Docs - Workflow Commands for GitHub Actions (Setting an Output Parameter)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eUsing a Composite Action from a Private Repository:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://stackoverflow.com/questions/69034292/how-do-you-use-a-composite-action-that-exists-in-a-private-repository"\u003eStack Overflow - How do you use a composite action that exists in a private repository?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eAccessing Outputs from GitHub Actions Steps:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://stackoverflow.com/questions/59191913/how-do-i-get-the-output-of-a-specific-step-in-github-actions"\u003eStack Overflow - How do I get the output of a specific step in GitHub Actions?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://stackoverflow.com/questions/76225806/get-github-action-output-from-previous-step"\u003eStack Overflow - Get GitHub Action Output from Previous Step\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eMatrix Strategies in GitHub Actions:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#about-matrix-strategies"\u003eGitHub Docs - About Matrix Strategies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://adamtheautomator.com/github-actions-matrix/"\u003eAdam the Automator - GitHub Actions Matrix\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSSH Access and Remote Commands:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://stackoverflow.com/questions/216202/why-does-an-ssh-remote-command-get-fewer-environment-variables-then-when-run-man"\u003eStack Overflow - Why does an SSH remote command get fewer environment variables than when run manually?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://superuser.com/questions/1533956/how-to-execute-complex-command-line-over-ssh"\u003eSuper User - How to Execute Complex Command Line Over SSH\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://www.howtogeek.com/719058/how-to-use-here-documents-in-bash-on-linux/"\u003eHow-To Geek - How to Use Here Documents in Bash on Linux\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://stackoverflow.com/a/44979486"\u003eStack Overflow - SSH heredoc: bash prompt\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://www.gnu.org/software/bash/manual/bash.html#Bash-Conditional-Expressions"\u003eGNU Bash Manual - Bash Conditional Expressions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:16,href:"/docs/others/performance-tuning-methods/",title:"Performance Tuning Methods",description:"",content:'\u003ch2 id="erpnext-settings"\u003eERPNext Settings\u003c/h2\u003e\n\u003ch3 id="gunicorn-workers"\u003eGunicorn Workers\u003c/h3\u003e\n\u003cp\u003eERPNext uses Gunicorn HTTP server in production mode.\u003c/p\u003e\n\u003cp\u003eFor optimal performance, the number of gunicorn workers needs to be set according to the number of CPU cores your server has. The recommended number is\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2 * num_cores + 1\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e(Some say this also depends on RAM. For now, stick to \u003ccode\u003e2 * num_cores\u003c/code\u003e)\u003c/p\u003e\n\u003cp\u003eIt is specified in the \u003cstrong\u003ecommon_site_config.json\u003c/strong\u003e file in the \u003cstrong\u003efrappe-bench/sites\u003c/strong\u003e folder.\u003c/p\u003e\n\u003cp\u003eAfter changing gunicorn workers, you need to run:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebench setup supervisor\r\nsudo supervisorctl reread\r\nsudo supervisorctl update\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="http-timeout"\u003eHTTP timeout\u003c/h3\u003e\n\u003cp\u003eIf you are getting a request timeout error, you can increase the HTTP timeout by following these steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eUpdate bench config. Take note that the timeout value is in seconds.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003ebench config http_timeout \u0026lt;integer\u0026gt;\r\nbench setup supervisor\r\nbench setup nginx\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="2"\u003e\n\u003cli\u003eRestart services (as root).\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003esudo supervisorctl reload\r\nsudo service nginx reload\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="mariadb-settings"\u003eMariaDB Settings\u003c/h2\u003e\n\u003ch3 id="innodb-buffer-pool"\u003eInnoDB Buffer Pool\u003c/h3\u003e\n\u003cp\u003eThe InnoDB buffer pool is the memory area where MySQL\u0026rsquo;s InnoDB storage engine caches table and index data as it is accessed. The larger the buffer pool, the more InnoDB acts like an in-memory database, reading data from disk once and then accessing the data from memory during subsequent reads. The buffer pool even caches data changed by insert, update, and delete operations, so that disk writes can be grouped together for better performance.\u003c/p\u003e\n\u003cp\u003eTo get the recommended size for \u003ccode\u003einnodb_buffer_pool_size\u003c/code\u003e (G for gigabytes and M for megabytes), execute this query as root user:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-sql"\u003eSELECT CONCAT(CEILING(RIBPS/POWER(1024,pw)),SUBSTR(\' KMGT\',pw+1,1))\r\nRecommended_InnoDB_Buffer_Pool_Size FROM\r\n(\r\n    SELECT RIBPS,FLOOR(LOG(RIBPS)/LOG(1024)) pw\r\n    FROM\r\n    (\r\n        SELECT SUM(data_length+index_length)*1.1*growth RIBPS\r\n        FROM information_schema.tables AAA,\r\n        (SELECT 1.25 growth) BBB\r\n        WHERE ENGINE=\'InnoDB\'\r\n    ) AA\r\n) A;\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo check the current \u003ccode\u003einnodb_buffer_pool_size\u003c/code\u003e (in GB), run this query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-sql"\u003eSELECT @@innodb_buffer_pool_size/1024/1024/1024;\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="for-databases-hosted-in-a-non-rds-server"\u003eFor databases hosted in a non-RDS server\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eRun this command to edit your \u003cstrong\u003emy.cnf\u003c/strong\u003e file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003esudo nano /etc/mysql/my.cnf\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start="2"\u003e\n\u003cli\u003eThen copy and paste this at the bottom of your \u003cstrong\u003emy.cnf\u003c/strong\u003e or include it in the existing \u003ccode\u003emysqld\u003c/code\u003e section:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e[mysqld]\r\ninnodb_buffer_pool_size=SIZE\r\ninnodb_buffer_pool_instances=NUMBER\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReplace the pool size value by the recommended value from the query. If the recommended pool size is higher than or equal to 2G, select an adequate value for \u003ccode\u003einnodb_buffer_pool_instances\u003c/code\u003e such that each pool size is atleast 1G. (Default is 1)\u003c/p\u003e\n\u003col start="3"\u003e\n\u003cli\u003eThen restart your MariaDB service by running the following command:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003esudo service mysql restart\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="for-databases-hosted-in-an-rds-server"\u003eFor databases hosted in an RDS server\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eGo to your RDS dashboard in the AWS Management Console and select your database instance.\u003c/li\u003e\n\u003cli\u003eNavigate to the \u003cstrong\u003eConfiguration\u003c/strong\u003e tab and click on the \u003cstrong\u003eDB instance parameter group\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eEdit the \u003ccode\u003einnodb_buffer_pool_size\u003c/code\u003e parameter and set it to the recommended value from the query. You can also edit the \u003ccode\u003einnodb_buffer_pool_instances\u003c/code\u003e parameter and set it such that each pool size is atleast 1G.\u003c/li\u003e\n\u003cli\u003eSave the changes and wait for the RDS instance to finish modifying. This may take a few minutes.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Setting the \u003ccode\u003einnodb_buffer_pool_size\u003c/code\u003e too low could lead to frequent disk I/O, degrading performance, as data would be frequently read from and written to the disk. On the other hand, setting it too high might lead to swapping, which would also degrade performance. The recommended value is 70-80% of the total RAM available on the server. However, sticking to this rule for larger servers might lead to RAM wastage so, in such cases, it might be better to experiment with different values that suit the server without causing swapping.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id="wait-timeout"\u003eWait Timeout\u003c/h3\u003e\n\u003cp\u003eIn MySQL, \u003ccode\u003ewait_timeout\u003c/code\u003e and \u003ccode\u003einteractive_timeout\u003c/code\u003e are both variables that determine how long the server should wait for activity on a connection before closing it.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ewait_timeout\u003c/code\u003e - number of seconds the server waits for activity on a non-interactive connection before closing it. A \u003cem\u003enon-interactive\u003c/em\u003e connection is one that is used to run a batch job or a script, rather than being used by a user interacting with the MySQL server through a client program.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003einteractive_timeout\u003c/code\u003e - number of seconds the server waits for activity on an interactive connection before closing it. An \u003cem\u003einteractive\u003c/em\u003e connection is one that is used by a user interacting with the MySQL server through a client program, such as the MySQL command line client or a graphical client like DataGrip.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBoth \u003ccode\u003ewait_timeout\u003c/code\u003e and \u003ccode\u003einteractive_timeout\u003c/code\u003e can be set at the global level or per-session level. For non-RDS databases, you can set these variables by using the \u003ccode\u003eSET\u003c/code\u003e statement or specifying them in the \u003cstrong\u003emy.cnf\u003c/strong\u003e configuration file. And for RDS databases, you can set these variables through the \u003cstrong\u003eParameter groups\u003c/strong\u003e in the RDS dashboard (see \u003ca href="#for-databases-hosted-in-an-rds-server"\u003eInnoDB Buffer Pool\u003c/a\u003e).\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It\u0026rsquo;s important to note that setting these variables too low can result in connections being closed unexpectedly, while setting them too high can result in unused connections remaining open and consuming resources on the server.\u003c/p\u003e\n\u003chr\u003e\n\u003ch4 id="sleep-processes"\u003eSleep Processes\u003c/h4\u003e\n\u003cp\u003e\u003cem\u003eSleep\u003c/em\u003e state refers to a situation where the MySQL process has completed its query, yet the client-side has not yet terminated the connection. In many web applications, it\u0026rsquo;s common for connections not to be properly closed, resulting in sleeping MySQL processes. It is not necessarily a cause for worry if there is only a handful of sleeping processes as MySQL will clean them up after a configurable timeout period (\u003ccode\u003ewait_timeout\u003c/code\u003e).\u003c/p\u003e\n\u003ch3 id="max-connections"\u003eMax Connections\u003c/h3\u003e\n\u003cp\u003eYou can limit the number of connections that can be made to the database by setting the \u003ccode\u003emax_connections\u003c/code\u003e system variable. This can help prevent your database from being overwhelmed by too many connections.\u003c/p\u003e\n\u003cp\u003eThe ideal value for the \u003ccode\u003emax_connections\u003c/code\u003e system variable will depend on your specific application and hardware. Some factors to consider when determining the appropriate value for \u003ccode\u003emax_connections\u003c/code\u003e include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardware resources: The number of connections that your database can handle will depend on the amount of RAM and CPU resources that are available on your server. As a general rule, the more connections you have, the more memory and CPU resources will be required to manage them.\u003c/li\u003e\n\u003cli\u003eApplication requirements: The number of connections that your application requires will depend on how heavily it relies on the database, and how many concurrent users it has. For example, a high-traffic web application that relies heavily on the database may need more connections than a smaller application with fewer users.\u003c/li\u003e\n\u003cli\u003eMySQL default values: MySQL has default values for \u003ccode\u003emax_connections\u003c/code\u003e that are based on the amount of RAM on the server. For example, on a server with 1GB of RAM, the default value for \u003ccode\u003emax_connections\u003c/code\u003e is 151.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf the value of the \u003ccode\u003emax_connections\u003c/code\u003e system variable is too low, it can cause a number of issues:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eConnection errors: If the number of connections to the database exceeds the maximum number of connections allowed by \u003ccode\u003emax_connections\u003c/code\u003e, any new connection requests will fail, resulting in connection errors for your users.\u003c/li\u003e\n\u003cli\u003ePerformance issues: If the value of \u003ccode\u003emax_connections\u003c/code\u003e is too low, it can limit the number of concurrent queries that can be processed by the database, which can lead to performance issues and slower query processing times.\u003c/li\u003e\n\u003cli\u003eUnnecessary connection overhead: If the value of \u003ccode\u003emax_connections\u003c/code\u003e is too low, it can result in more connections being opened and closed, which can add unnecessary overhead and decrease the performance of your application.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUltimately, the best way to determine an appropriate value for \u003ccode\u003emax_connections\u003c/code\u003e is to experiment with different values and monitor the performance of your database to see how it responds.\u003c/p\u003e\n\u003ch2 id="references"\u003eReferences\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href="https://discuss.erpnext.com/t/maintenance-for-erpnext-performance/50412/15"\u003ehttps://discuss.erpnext.com/t/maintenance-for-erpnext-performance/50412/15\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://discuss.erpnext.com/t/maintenance-for-erpnext-performance/50412/14"\u003ehttps://discuss.erpnext.com/t/maintenance-for-erpnext-performance/50412/14\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://github.com/frappe/erpnext/wiki/ERPNext-Performance-Tuning#gunicorn-workers"\u003ehttps://github.com/frappe/erpnext/wiki/ERPNext-Performance-Tuning#gunicorn-workers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://github.com/jigneshpshah/greycube_helpmanual/wiki/Performance-Tuning-ERPNext#to-increase-http-timeout--to-solve-request-timeout-error"\u003ehttps://github.com/jigneshpshah/greycube_helpmanual/wiki/Performance-Tuning-ERPNext#to-increase-http-timeout--to-solve-request-timeout-error\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://dba.stackexchange.com/a/101000"\u003ehttps://dba.stackexchange.com/a/101000\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://serverfault.com/a/281439"\u003ehttps://serverfault.com/a/281439\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://dba.stackexchange.com/questions/27328/how-large-should-be-mysql-innodb-buffer-pool-size"\u003ehttps://dba.stackexchange.com/questions/27328/how-large-should-be-mysql-innodb-buffer-pool-size\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://www.percona.com/blog/80-ram-tune-innodb_buffer_pool_size/"\u003ehttps://www.percona.com/blog/80-ram-tune-innodb_buffer_pool_size/\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n'},{id:17,href:"/docs/others/investigating-performance-issues/",title:"Investigating Performance Issues",description:"Standard Operating Procedure (SOP) for Investigating Performance Issues in EC2 and RDS",content:'\u003ch2 id="prerequisites"\u003ePrerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAccess to the \u003ca href="https://ap-southeast-1.console.aws.amazon.com/console/home?region=ap-southeast-1"\u003eAWS Management Console\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSSH access to EC2 instances\u003c/li\u003e\n\u003cli\u003eUbuntu (or a compatible Linux distribution) installed on the EC2 instances\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="procedure"\u003eProcedure\u003c/h2\u003e\n\u003ch3 id="a-initial-analysis"\u003eA. Initial Analysis\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eIdentify the affected EC2 instance(s) or RDS database(s) experiencing performance issues.\u003c/li\u003e\n\u003cli\u003eMonitor user reports and system logs to gather information about the observed issues. Here are some questions that might aid in investigation:\n\u003cul\u003e\n\u003cli\u003eWhen did the site start slowing down?\u003c/li\u003e\n\u003cli\u003eWhat were some of the last activities in the site?\u003c/li\u003e\n\u003cli\u003eHow many users were using the site?\u003c/li\u003e\n\u003cli\u003eWas there a recent deployment? What was it?\u003c/li\u003e\n\u003cli\u003eHave the users observed a pattern in the performance of the site?\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIdentify the symptoms of the performance issues, such as slow response times, high CPU usage, database connection errors, slow query execution, or disk I/O bottlenecks by proceeding to the next steps.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id="b-investigating-ec2-performance-issues"\u003eB. Investigating EC2 Performance Issues\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eSSH into the affected EC2 instance using an SSH client (e.g., PuTTY).\u003c/li\u003e\n\u003cli\u003eRun the \u003ccode\u003ehtop\u003c/code\u003e command to analyze system resource utilization:\n\u003cul\u003e\n\u003cli\u003eInstall \u003ccode\u003ehtop\u003c/code\u003e if not already installed using the package manager (e.g., \u003ccode\u003esudo apt-get install htop\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eLaunch \u003ccode\u003ehtop\u003c/code\u003e by executing the command \u003ccode\u003ehtop\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eObserve CPU, memory, and disk usage, and identify any processes consuming excessive resources.\u003c/li\u003e\n\u003cli\u003eTake note of any processes or services causing high resource utilization.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id="using-htop"\u003eUsing htop\u003c/h4\u003e\n\u003ch5 id="description"\u003eDescription\u003c/h5\u003e\n\u003cp\u003e\u003ccode\u003ehtop\u003c/code\u003e is an interactive process viewer and system monitor for Unix-like systems. It provides a user-friendly interface to monitor the system\u0026rsquo;s resource usage, including CPU, memory, and network activity. \u003ccode\u003ehtop\u003c/code\u003e displays information in real-time and allows users to manage and control processes efficiently.\u003c/p\u003e\n\u003cfigure class="border-0"\u003e\r\n  \u003cimg class="img-fluid lazyload blur-up" data-sizes="auto" src="/docs/others/investigating-performance-issues/htop_hudf7c0037a22dca316d467d3960f83a70_1864058_20x0_resize_box_2.png" data-srcset="/docs/others/investigating-performance-issues/htop_hudf7c0037a22dca316d467d3960f83a70_1864058_900x0_resize_box_2.png 900w,/docs/others/investigating-performance-issues/htop_hudf7c0037a22dca316d467d3960f83a70_1864058_800x0_resize_box_2.png 800w,/docs/others/investigating-performance-issues/htop_hudf7c0037a22dca316d467d3960f83a70_1864058_700x0_resize_box_2.png 700w,/docs/others/investigating-performance-issues/htop_hudf7c0037a22dca316d467d3960f83a70_1864058_600x0_resize_box_2.png 600w,/docs/others/investigating-performance-issues/htop_hudf7c0037a22dca316d467d3960f83a70_1864058_500x0_resize_box_2.png 500w" width="2674" height="1482" alt="htop"\u003e\r\n  \u003cnoscript\u003e\u003cimg class="img-fluid" sizes="100vw" srcset="/docs/others/investigating-performance-issues/htop_hudf7c0037a22dca316d467d3960f83a70_1864058_900x0_resize_box_2.png 900w,/docs/others/investigating-performance-issues/htop_hudf7c0037a22dca316d467d3960f83a70_1864058_800x0_resize_box_2.png 800w,/docs/others/investigating-performance-issues/htop_hudf7c0037a22dca316d467d3960f83a70_1864058_700x0_resize_box_2.png 700w,/docs/others/investigating-performance-issues/htop_hudf7c0037a22dca316d467d3960f83a70_1864058_600x0_resize_box_2.png 600w,/docs/others/investigating-performance-issues/htop_hudf7c0037a22dca316d467d3960f83a70_1864058_500x0_resize_box_2.png 500w" src="/docs/others/investigating-performance-issues/htop.png" width="2674" height="1482" alt="htop"\u003e\u003c/noscript\u003e\r\n  \r\n\u003c/figure\u003e\r\n\n\u003ch5 id="display"\u003eDisplay\u003c/h5\u003e\n\u003cp\u003e\u003ccode\u003ehtop\u003c/code\u003e provides a comprehensive view of system resources. The default interface is divided into several sections:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHeader: Displays general system information, such as the load averages, uptime, and number of tasks running on the system.\n\u003cul\u003e\n\u003cli\u003eLoad average: The average computational work performed by the CPU over the last 1, 5, and 15 minutes. A CPU with 1 core has a maximum load average of 1.00, while a CPU with 4 cores has a maximum load average of 4.00\u003c/li\u003e\n\u003cli\u003eTasks: The total number of processes and threads running on the system\u003c/li\u003e\n\u003cli\u003eUptime: The time since the system was last booted\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCPU Meters: Shows a visual representation of CPU usage for each core\u003c/li\u003e\n\u003cli\u003eMemory Meters: Displays memory usage, including total, used, and available memory\u003c/li\u003e\n\u003cli\u003eSwap Meters: Shows swap usage, including total, used, and free swap\u003c/li\u003e\n\u003cli\u003eTasks: Lists running processes with details, including process ID (PID), user, CPU usage, memory usage, and more\u003c/li\u003e\n\u003cli\u003eFooter: Provides information on keybindings and system status\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id="color-legend"\u003eColor Legend\u003c/h5\u003e\n\u003cp\u003e\u003ccode\u003ehtop\u003c/code\u003e uses color coding to highlight different types of processes and resource usage.\u003c/p\u003e\n\u003ch6 id="for-cpu"\u003eFor CPU\u003c/h6\u003e\n\u003cul\u003e\n\u003cli\u003eGreen: Normal (user) processes\u003c/li\u003e\n\u003cli\u003eRed: System processes\u003c/li\u003e\n\u003cli\u003eYellow: I/O processes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch6 id="for-memory"\u003eFor Memory\u003c/h6\u003e\n\u003cul\u003e\n\u003cli\u003eGreen: Running processes\u003c/li\u003e\n\u003cli\u003eBlue: Buffer pages\u003c/li\u003e\n\u003cli\u003eYellow: Cache memory\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id="process-information"\u003eProcess Information\u003c/h5\u003e\n\u003cp\u003e\u003ccode\u003ehtop\u003c/code\u003e displays detailed information about each process, including the process ID (PID), user, CPU usage, memory usage, and more.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePID: The process ID\u003c/li\u003e\n\u003cli\u003eUSER: The user who started the process\u003c/li\u003e\n\u003cli\u003ePRI: The process priority by the kernel\u003c/li\u003e\n\u003cli\u003eNI: The process nice value or priority reset by the user (higher values indicate lower priority)\u003c/li\u003e\n\u003cli\u003eVIRT: The total amount of virtual memory used by the process\u003c/li\u003e\n\u003cli\u003eRES: The total amount of physical memory used by the process\u003c/li\u003e\n\u003cli\u003eSHR: The total amount of shared memory used by the process\u003c/li\u003e\n\u003cli\u003eS: The process status\n\u003cul\u003e\n\u003cli\u003eR: Running\u003c/li\u003e\n\u003cli\u003eS: Sleeping (idle)\u003c/li\u003e\n\u003cli\u003eD: Disk sleep (uninterruptible)\u003c/li\u003e\n\u003cli\u003eZ: Zombie (waiting for parent to read its exit status)\u003c/li\u003e\n\u003cli\u003eT: Traced or suspended (e.g. by SIGTSTP)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCPU%: The percentage of CPU time used by the process\u003c/li\u003e\n\u003cli\u003eMEM%: The percentage of memory used by the process\u003c/li\u003e\n\u003cli\u003eTIME+: The total CPU time used by the process\u003c/li\u003e\n\u003cli\u003eCommand: The command used to start the process\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor more information, see the \u003ca href="https://man7.org/linux/man-pages/man1/htop.1.html"\u003eLinux manual page\u003c/a\u003e for \u003ccode\u003ehtop\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id="c-investigating-rds-performance-issues"\u003eC. Investigating RDS Performance Issues\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eLog in to the \u003ca href="https://bizkit-tech.signin.aws.amazon.com/console"\u003eAWS Management Console\u003c/a\u003e and navigate to the RDS dashboard.\u003c/li\u003e\n\u003cli\u003eSelect the affected RDS database instance.\u003c/li\u003e\n\u003cli\u003eReview the monitoring graphs and logs provided by RDS, focusing on CPU utilization, IOPS, and database-specific metrics.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id="slow-query-log"\u003eSlow Query Log\u003c/h4\u003e\n\u003cp\u003eMonitor the slow query log to identify and analyze queries causing performance issues. A ready-made dashboard in CloudWatch is available for monitoring slow query logs.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIn the AWS Management Console, navigate to the CloudWatch dashboard.\u003c/li\u003e\n\u003cli\u003eSelect \u003cstrong\u003eDashboards\u003c/strong\u003e from the left navigation pane.\u003c/li\u003e\n\u003cli\u003eSelect the \u003cstrong\u003eslow-query-logs\u003c/strong\u003e dashboard. This dashboard displays the slow query logs for all RDS instances with slow query logs enabled.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIf slow query log is not yet enabled, enable it by following these steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIn the RDS console, go to the \u003cstrong\u003eParameter groups\u003c/strong\u003e tab for the RDS instance.\u003c/li\u003e\n\u003cli\u003eCreate or modify the parameter group associated with the RDS instance.\u003c/li\u003e\n\u003cli\u003eSet the \u003ccode\u003eslow_query_log\u003c/code\u003e parameter to \u003ccode\u003e1\u003c/code\u003e to enable the slow query log.\u003c/li\u003e\n\u003cli\u003eSet the \u003ccode\u003elog_output\u003c/code\u003e parameter to \u003ccode\u003eFILE\u003c/code\u003e to write the slow query logs to the file system and publish them to CloudWatch logs.\u003c/li\u003e\n\u003cli\u003eAdjust the \u003ccode\u003elong_query_time\u003c/code\u003e parameter to specify the threshold for a query to be considered slow. The default value is 10 seconds.\u003c/li\u003e\n\u003cli\u003eApply the modified parameter group to the RDS instance.\u003c/li\u003e\n\u003cli\u003eAdd the instance\u0026rsquo;s log file to the list of log files to be monitored in the \u003cstrong\u003eslow-query-logs\u003c/strong\u003e dashboard in CloudWatch.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id="real-time-monitoring"\u003eReal-time Monitoring\u003c/h4\u003e\n\u003ch5 id="innodb-status"\u003eInnoDB Status\u003c/h5\u003e\n\u003cp\u003eThe MySQL InnoDB status provides a detailed report on the current state of the InnoDB storage engine. It can be used to identify the cause of performance issues, such as slow queries or deadlocks.\u003c/p\u003e\n\u003cp\u003eTo show the InnoDB status, run the following command in the MySQL shell:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSHOW ENGINE INNODB STATUS;\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you want to see the list of locked tables, run the following command in the MySQL shell:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSHOW OPEN TABLES WHERE in_use \u0026gt; 0;\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="process-list"\u003eProcess List\u003c/h5\u003e\n\u003cp\u003eThe MySQL process list contains information about the current running processes on the database server. It can be used to identify long-running queries or processes that are causing performance issues.\u003c/p\u003e\n\u003cp\u003eTo show the process list, run the following command in the MySQL shell:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSHOW FULL PROCESSLIST;\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="d-checking-application-code-for-optimization-areas"\u003eD. Checking Application Code for Optimization Areas\u003c/h3\u003e\n\u003cp\u003eAnalyze the code for any performance bottlenecks and work with the development team to optimize those areas.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUtilize the \u003cstrong\u003eNetwork\u003c/strong\u003e tab in the browser\u0026rsquo;s developer tools to identify slow requests and analyze the code for potential optimization areas.\u003c/li\u003e\n\u003cli\u003eUse Frappe logs for debugging and identifying bottlenecks in the code. This is especially useful when running the application in production mode.\u003c/li\u003e\n\u003cli\u003eIn developer mode, view real-time logs in the terminal window where \u003ccode\u003ebench start\u003c/code\u003e is running.\n\u003cul\u003e\n\u003cli\u003eWhen you write print statements in your Python code, the output will be displayed in the terminal window.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="network-tab"\u003eNetwork Tab\u003c/h4\u003e\n\u003cp\u003eThe Network tab in a browser\u0026rsquo;s developer tools allows you to monitor and analyze the network activity between the browser and the server, helping you identify bottlenecks, slow-loading resources, and other issues that might affect the overall performance of your web application.\u003c/p\u003e\n\u003cfigure class="border-0"\u003e\r\n  \u003cimg class="img-fluid lazyload blur-up" data-sizes="auto" src="/docs/others/investigating-performance-issues/network-tab_hu596b79a4c1ffabd2d4c7118409d49518_642768_20x0_resize_box_2.png" data-srcset="/docs/others/investigating-performance-issues/network-tab_hu596b79a4c1ffabd2d4c7118409d49518_642768_900x0_resize_box_2.png 900w,/docs/others/investigating-performance-issues/network-tab_hu596b79a4c1ffabd2d4c7118409d49518_642768_800x0_resize_box_2.png 800w,/docs/others/investigating-performance-issues/network-tab_hu596b79a4c1ffabd2d4c7118409d49518_642768_700x0_resize_box_2.png 700w,/docs/others/investigating-performance-issues/network-tab_hu596b79a4c1ffabd2d4c7118409d49518_642768_600x0_resize_box_2.png 600w,/docs/others/investigating-performance-issues/network-tab_hu596b79a4c1ffabd2d4c7118409d49518_642768_500x0_resize_box_2.png 500w" width="2016" height="1790" alt="Network Tab"\u003e\r\n  \u003cnoscript\u003e\u003cimg class="img-fluid" sizes="100vw" srcset="/docs/others/investigating-performance-issues/network-tab_hu596b79a4c1ffabd2d4c7118409d49518_642768_900x0_resize_box_2.png 900w,/docs/others/investigating-performance-issues/network-tab_hu596b79a4c1ffabd2d4c7118409d49518_642768_800x0_resize_box_2.png 800w,/docs/others/investigating-performance-issues/network-tab_hu596b79a4c1ffabd2d4c7118409d49518_642768_700x0_resize_box_2.png 700w,/docs/others/investigating-performance-issues/network-tab_hu596b79a4c1ffabd2d4c7118409d49518_642768_600x0_resize_box_2.png 600w,/docs/others/investigating-performance-issues/network-tab_hu596b79a4c1ffabd2d4c7118409d49518_642768_500x0_resize_box_2.png 500w" src="/docs/others/investigating-performance-issues/network-tab.png" width="2016" height="1790" alt="Network Tab"\u003e\u003c/noscript\u003e\r\n  \r\n\u003c/figure\u003e\r\n\n\u003ch5 id="how-to-use-the-network-tab"\u003eHow to use the Network tab\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003eOpen the browser\u0026rsquo;s developer tools by right-clicking on your web page and selecting \u003cstrong\u003eInspect\u003c/strong\u003e or \u003cstrong\u003eInspect Element.\u003c/strong\u003e Alternatively, you can use keyboard shortcuts like F12 or Ctrl+Shift+I (Windows/Linux) or Cmd+Option+I (Mac) to open the Developer Tools panel.\u003c/li\u003e\n\u003cli\u003eWithin the Developer Tools panel, find and select the \u003cstrong\u003eNetwork\u003c/strong\u003e tab. This tab displays a timeline of all network requests made by the web page.\u003c/li\u003e\n\u003cli\u003eReload the page. This will capture all the network requests made during the page load.\u003c/li\u003e\n\u003cli\u003eAs the page loads, you\u0026rsquo;ll see various network requests being recorded in the Network tab. The timeline displays details such as the request type (e.g., GET, POST), the resource\u0026rsquo;s URL, status codes, and timing information.\u003c/li\u003e\n\u003cli\u003eAnalyze the requests and responses to identify slow requests and potential optimization areas. Look for the following details:\n\u003cul\u003e\n\u003cli\u003eResponse Time: Check the \u003cstrong\u003eTime\u003c/strong\u003e column to see how long each request takes to complete. Slow responses might indicate issues with the server or network.\u003c/li\u003e\n\u003cli\u003eStatus Codes: Check the \u003cstrong\u003eStatus\u003c/strong\u003e column to identify any failed requests (e.g., 404 or 500 errors).\u003c/li\u003e\n\u003cli\u003eSize: Analyze the \u003cstrong\u003eSize\u003c/strong\u003e column to see the size of the resources being loaded. Large resources can slow down page loading.\u003c/li\u003e\n\u003cli\u003eWaterfall Chart: The waterfall chart provides a visual representation of when requests start and finish relative to each other. This can help you identify dependencies and bottlenecks.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eUse filters and sorting options to focus on specific types of requests (e.g., XHR, images, scripts) or to sort requests by different criteria (e.g., response time, size). This can help you isolate specific types of performance issues.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id="frappe-logs"\u003eFrappe Logs\u003c/h4\u003e\n\u003cp\u003eFrappe logs can include information about errors and exceptions that have occurred, as well as various types of debugging and diagnostic information.\u003c/p\u003e\n\u003ch5 id="desk-logs"\u003eDesk Logs\u003c/h5\u003e\n\u003cp\u003eLogs that track operational events: usually user activities that happen in the frontend. They can be accessed via the Desk UI.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAccess Log\u003c/li\u003e\n\u003cli\u003eActivity Log\u003c/li\u003e\n\u003cli\u003eError Log\u003c/li\u003e\n\u003cli\u003eScheduled Job Log\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id="server-logs"\u003eServer Logs\u003c/h5\u003e\n\u003cp\u003eLogs that are generated by the Frappe application on the server level. They generally consist of lower level, transactional data. From your frappe-bench folder, you may find logs under:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e./logs\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e./sites/{site}/logs\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHere are the types of server logs:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebench.log\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003escheduler.log\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eworker.log\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eworker.error.log\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efrappe.log\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebackup.log\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="when-should-you-check-the-application-code"\u003eWhen should you check the application code?\u003c/h4\u003e\n\u003ch5 id="high-resource-utilization"\u003eHigh resource utilization\u003c/h5\u003e\n\u003cp\u003eIf the initial analysis or monitoring indicates high resource utilization on the application server (EC2 instance), it is worth investigating the application code for any resource-intensive processes, memory leaks, or inefficient algorithms. Optimizing the code can reduce the strain on system resources and improve overall performance.\u003c/p\u003e\n\u003ch5 id="database-centric-performance-issues"\u003eDatabase-centric performance issues\u003c/h5\u003e\n\u003cp\u003eIf the performance problems are primarily related to database operations, such as slow queries or inefficient data retrieval, reviewing and optimizing the application code can have a significant impact. Analyzing the code can help identify areas where queries can be optimized, data fetching can be optimized, or caching mechanisms can be implemented.\u003c/p\u003e\n\u003ch5 id="recurring-performance-issues"\u003eRecurring performance issues\u003c/h5\u003e\n\u003cp\u003eIf you frequently encounter performance issues that appear to be related to the application logic, it is important to dig deeper into the code. Reviewing the code for potential optimization areas can help identify recurring patterns or bottlenecks that may need to be addressed systematically.\u003c/p\u003e\n\u003ch3 id="e-tuning-server-configuration"\u003eE. Tuning Server Configuration\u003c/h3\u003e\n\u003cp\u003eIt is recommended to do this in urgent situations or when other investigations have identified database or server misconfigurations.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAdjust RDS parameter groups for the affected database instance(s).\u003c/li\u003e\n\u003cli\u003eModify EC2 instance configurations if necessary (e.g., changing instance type, increasing storage).\u003c/li\u003e\n\u003cli\u003eOptimize query execution plans or indexing strategies for the database.\u003c/li\u003e\n\u003cli\u003eAdjust RDS or EC2 instance scaling settings if applicable.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eMore details can be found in the \u003ca href="/docs/others/performance-tuning-methods"\u003ePerformance Tuning Methods\u003c/a\u003e document.\u003c/p\u003e\n\u003ch3 id="f-implementing-changes-and-monitoring"\u003eF. Implementing Changes and Monitoring\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eMonitor the system after making changes to assess the impact on performance.\u003c/li\u003e\n\u003cli\u003eUtilize AWS CloudWatch or third-party monitoring tools to track relevant metrics and gather real-time insights.\u003c/li\u003e\n\u003cli\u003eContinue monitoring and refining configurations until the desired performance improvements are achieved.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id="documentation"\u003eDocumentation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eMaintain a log of all investigations performed, including the observed symptoms, analysis conducted, and actions taken.\u003c/li\u003e\n\u003cli\u003eDocument any changes made to database configurations, instance settings, or other relevant adjustments.\u003c/li\u003e\n\u003cli\u003eRecord the results of the changes and the impact on performance.\u003c/li\u003e\n\u003c/ol\u003e\n'},{id:18,href:"/docs/",title:"Docs",description:null,content:""},{id:19,href:"/docs/help/",title:"Help",description:"Help Doks.",content:""},{id:20,href:"/docs/others/",title:"Others",description:"Other documentation.",content:""},{id:21,href:"/docs/projects/",title:"Projects",description:"Project documentation.",content:""},{id:22,href:"/docs/setup/",title:"Setup",description:"Setup documentation.",content:""},{id:23,href:"/docs/standards/",title:"Standards",description:"Standards documentation.",content:""},{id:24,href:"/docs/start-here/",title:"Start Here",description:"Start here.",content:""},{id:25,href:"/docs/training/",title:"Training",description:"Training documentation.",content:""}];b.add(c),userinput.addEventListener('input',e,!0),suggestions.addEventListener('click',f,!0);function e(){var g=this.value,e=b.search(g,5),f=suggestions.childNodes,h=0,i=e.length,c;for(suggestions.classList.remove('d-none'),e.forEach(function(b){c=document.createElement('div'),c.innerHTML='<a href><span></span><span></span></a>',a=c.querySelector('a'),t=c.querySelector('span:first-child'),d=c.querySelector('span:nth-child(2)'),a.href=b.href,t.textContent=b.title,d.textContent=b.description,suggestions.appendChild(c)});f.length>i;)suggestions.removeChild(f[h])}function f(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()